#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516418_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50418 "Generate Dividend Prorated"
{
    RDLCLayout = 'Layouts/GenerateDividendProrated.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Customer; "Members Register")
        {
            DataItemTableView = sorting("No.") where("Customer Type" = const(Member));
            RequestFilterFields = "No.";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address2; Company."Address 2")
            {
            }
            column(Company_PhoneNo; Company."Phone No.")
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(S_No; SN)
            {
            }
            column(No; Customer."No.")
            {
            }
            column(Name; Customer.Name)
            {
            }
            column(Current_Shares; Customer."Current Shares")
            {
            }
            trigger OnPreDataItem();
            begin
                //LastFieldNo := FIELDNO("");
            end;

            trigger OnAfterGetRecord();
            begin
                Customer."Dividend Amount" := 0;
                DivProg.Reset;
                DivProg.SetCurrentkey("Member No");
                DivProg.SetRange(DivProg."Member No", Customer."No.");
                if DivProg.Find('-') then
                    DivProg.DeleteAll;
                if StartDate = 0D then
                    Error('You must specify start Date.');
                DivTotal := 0;
                "W/Tax" := 0;
                CommDiv := 0;
                GenSetUp.Get(0);
                //1
                Evaluate(BDate, '01/01/05');
                FromDate := BDate;
                ToDate := CalcDate('-1D', StartDate);
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //CDiv:=((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(12/12);
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (12 / 12));
                        DivTotal := CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (12 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //jan
                FromDate := StartDate;
                ToDate := CalcDate('-1D', CalcDate('1M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (11 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (11 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //3
                FromDate := CalcDate('1M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('2M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (10 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (10 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //4
                FromDate := CalcDate('2M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('3M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (9 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (9 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //5
                FromDate := CalcDate('3M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('4M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (8 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (8 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //6
                FromDate := CalcDate('4M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('5M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (7 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (7 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //7
                FromDate := CalcDate('5M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('6M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //DivTotal:=DivTotal+((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(6/12)
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (6 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (6 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //8
                FromDate := CalcDate('6M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('7M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //DivTotal:=DivTotal+((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(6/12)
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (5 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (5 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //9
                FromDate := CalcDate('7M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('8M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //DivTotal:=DivTotal+((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(6/12)
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (4 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (4 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //10
                FromDate := CalcDate('8M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('9M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //DivTotal:=DivTotal+((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(6/12)
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (3 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (3 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //11
                FromDate := CalcDate('9M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('10M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        //DivTotal:=DivTotal+((GenSetUp."Interest on Deposit %"/100)*((Cust."Current Shares"+Cust."Shares Retained")*-1))*(6/12)
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (2 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (2 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end;
                end;
                //12
                FromDate := CalcDate('10M', StartDate);
                ToDate := CalcDate('-1D', CalcDate('11M', StartDate));
                Evaluate(FromDateS, Format(FromDate));
                Evaluate(ToDateS, Format(ToDate));
                DateFilter := FromDateS + '..' + ToDateS;
                Cust.Reset;
                Cust.SetCurrentkey("No.");
                Cust.SetRange(Cust."No.", Customer."No.");
                Cust.SetFilter(Cust."Date Filter", DateFilter);
                if Cust.Find('-') then begin
                    Cust.CalcFields(Cust."Current Shares", Cust."Shares Retained");
                    if (Cust."Current Shares" <> 0) then begin
                        CDiv := (((GenSetUp."Interest on Deposits (%)" / 100) * ((Cust."Current Shares") * -1)) * (1 / 12));
                        DivTotal := DivTotal + CDiv;
                        DivProg.Init;
                        DivProg."Member No" := Customer."No.";
                        DivProg.Date := ToDate;
                        DivProg."Gross Dividends" := CDiv;
                        DivProg."Witholding Tax" := (CDiv) * (GenSetUp."Withholding Tax (%)" / 100);
                        DivProg."Net Dividends" := DivProg."Gross Dividends" - DivProg."Witholding Tax";
                        DivProg."Qualifying Shares" := ((Cust."Current Shares") * -1) * (1 / 12);
                        DivProg.Shares := Cust."Current Shares" * -1;
                        DivProg.Insert;
                    end; //>
                end;
                Customer."Dividend Amount" := DivTotal;
                Customer.Modify;
                DivProg.Reset;
                DivProg.SetRange(DivProg."Member No", "No.");
                if DivProg.Find('-') then begin
                    repeat
                        "W/Tax" += DivProg."Witholding Tax";
                        CommDiv += DivProg."Share Capital";
                    until DivProg.Next = 0;
                end;
                if DivTotal <> 0 then begin
                    //>* Add
                    if (Customer."FOSA Account No." <> '') and
                                       (Customer.Defaulter = true) then begin
                        LineNo := LineNo + 10000;
                        Gnjlline.Init;
                        Gnjlline."Journal Template Name" := 'PURCHASES';
                        Gnjlline."Journal Batch Name" := 'DIV';
                        Gnjlline."Document No." := 'DIVIDEND';
                        Gnjlline."Line No." := LineNo;
                        Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                        Gnjlline."Account No." := Customer."No.";
                        Gnjlline.Validate(Gnjlline."Account No.");
                        Gnjlline."Posting Date" := PostingDate;
                        Gnjlline.Description := 'Dividends';
                        Gnjlline.Validate(Gnjlline."Currency Code");
                        Gnjlline.Amount := -(DivTotal + CommDiv);
                        Gnjlline.Validate(Gnjlline.Amount);
                        Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                        Gnjlline."Bal. Account No." := '20945';
                        Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                        Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                        Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                        if Gnjlline.Amount <> 0 then
                            Gnjlline.Insert;
                        //>W/Tax
                        LineNo := LineNo + 10000;
                        Gnjlline.Init;
                        Gnjlline."Journal Template Name" := 'PURCHASES';
                        Gnjlline."Journal Batch Name" := 'DIV';
                        Gnjlline."Document No." := 'DIVIDEND';
                        Gnjlline."Line No." := LineNo;
                        Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                        Gnjlline."Account No." := Customer."No.";
                        Gnjlline.Validate(Gnjlline."Account No.");
                        Gnjlline."Posting Date" := PostingDate;
                        Gnjlline.Description := 'Dividends Withholding Tax';
                        Gnjlline.Validate(Gnjlline."Currency Code");
                        Gnjlline.Amount := "W/Tax";
                        Gnjlline.Validate(Gnjlline.Amount);
                        Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                        Gnjlline."Bal. Account No." := '20360';
                        Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                        Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                        Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                        if Gnjlline.Amount <> 0 then
                            Gnjlline.Insert;
                    end else
                        if Customer.Defaulter = false then begin
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                            Gnjlline."Account No." := Customer."No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := -(DivTotal + CommDiv);
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                            Gnjlline."Bal. Account No." := '20945';
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            //W/Tax
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                            Gnjlline."Account No." := Customer."No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends Withholding Tax';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := "W/Tax";
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                            Gnjlline."Bal. Account No." := '20360';
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            //Transfer to Vendor
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Vendor;
                            Gnjlline."Account No." := Customer."FOSA Account No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := -(DivTotal + CommDiv);
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'FOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            Gnjlline."Int on Dep SMS" := true;
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                            Gnjlline."Account No." := Customer."No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := (DivTotal + CommDiv);
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            //W/Tax
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Vendor;
                            Gnjlline."Account No." := Customer."FOSA Account No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends Withholding Tax';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := "W/Tax";
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'FOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            LineNo := LineNo + 10000;
                            Gnjlline.Init;
                            Gnjlline."Journal Template Name" := 'PURCHASES';
                            Gnjlline."Journal Batch Name" := 'DIV';
                            Gnjlline."Document No." := 'DIVIDEND';
                            Gnjlline."Line No." := LineNo;
                            Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                            Gnjlline."Account No." := Customer."No.";
                            Gnjlline.Validate(Gnjlline."Account No.");
                            Gnjlline."Posting Date" := PostingDate;
                            Gnjlline.Description := 'Dividends Withholding Tax';
                            Gnjlline.Validate(Gnjlline."Currency Code");
                            Gnjlline.Amount := -"W/Tax";
                            Gnjlline.Validate(Gnjlline.Amount);
                            Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                            Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                            Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                            if Gnjlline.Amount <> 0 then
                                Gnjlline.Insert;
                            //Div Processing Fee
                            if (DivTotal + CommDiv) >= 100 then begin
                                LineNo := LineNo + 10000;
                                Gnjlline.Init;
                                Gnjlline."Journal Template Name" := 'PURCHASES';
                                Gnjlline."Journal Batch Name" := 'DIV';
                                Gnjlline."Document No." := 'DIVIDEND';
                                Gnjlline."Line No." := LineNo;
                                Gnjlline."Account Type" := Gnjlline."account type"::Vendor;
                                Gnjlline."Account No." := Customer."FOSA Account No.";
                                Gnjlline.Validate(Gnjlline."Account No.");
                                Gnjlline."Posting Date" := PostingDate;
                                Gnjlline.Description := 'Dividends Processing Fee';
                                Gnjlline.Validate(Gnjlline."Currency Code");
                                Gnjlline.Amount := 100;
                                Gnjlline.Validate(Gnjlline.Amount);
                                Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                                Gnjlline."Bal. Account No." := '30164';
                                Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                                Gnjlline."Shortcut Dimension 1 Code" := 'FOSA';
                                Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                                if Gnjlline.Amount <> 0 then
                                    Gnjlline.Insert;
                                //Excise Duty on Fee
                                LineNo := LineNo + 10000;
                                Gnjlline.Init;
                                Gnjlline."Journal Template Name" := 'PURCHASES';
                                Gnjlline."Journal Batch Name" := 'DIV';
                                Gnjlline."Document No." := 'DIVIDEND';
                                Gnjlline."Line No." := LineNo;
                                Gnjlline."Account Type" := Gnjlline."account type"::Vendor;
                                Gnjlline."Account No." := Customer."FOSA Account No.";
                                Gnjlline.Validate(Gnjlline."Account No.");
                                Gnjlline."Posting Date" := PostingDate;
                                Gnjlline.Description := 'Excise on DivProcessing Fee';
                                Gnjlline.Validate(Gnjlline."Currency Code");
                                Gnjlline.Amount := 10;
                                Gnjlline.Validate(Gnjlline.Amount);
                                Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                                Gnjlline."Bal. Account No." := '20355';
                                Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                                Gnjlline."Shortcut Dimension 1 Code" := 'FOSA';
                                Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                                if Gnjlline.Amount <> 0 then
                                    Gnjlline.Insert;
                            end;
                        end;
                    //>END;
                end else
                    if Customer."FOSA Account No." = '' then begin
                        LineNo := LineNo + 10000;
                        Gnjlline.Init;
                        Gnjlline."Journal Template Name" := 'PURCHASES';
                        Gnjlline."Journal Batch Name" := 'DIV';
                        Gnjlline."Document No." := 'DIVIDEND';
                        Gnjlline."Line No." := LineNo;
                        Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                        Gnjlline."Account No." := Customer."No.";
                        Gnjlline.Validate(Gnjlline."Account No.");
                        Gnjlline."Posting Date" := PostingDate;
                        Gnjlline.Description := 'Dividends';
                        Gnjlline.Validate(Gnjlline."Currency Code");
                        Gnjlline.Amount := -(DivTotal + CommDiv);
                        Gnjlline.Validate(Gnjlline.Amount);
                        Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                        Gnjlline."Bal. Account No." := '20945';
                        Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                        Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                        Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                        if Gnjlline.Amount <> 0 then
                            Gnjlline.Insert;
                        //>W/Tax
                        LineNo := LineNo + 10000;
                        Gnjlline.Init;
                        Gnjlline."Journal Template Name" := 'PURCHASES';
                        Gnjlline."Journal Batch Name" := 'DIV';
                        Gnjlline."Document No." := 'DIVIDEND';
                        Gnjlline."Line No." := LineNo;
                        Gnjlline."Account Type" := Gnjlline."account type"::Customer;
                        Gnjlline."Account No." := Customer."No.";
                        Gnjlline.Validate(Gnjlline."Account No.");
                        Gnjlline."Posting Date" := PostingDate;
                        Gnjlline.Description := 'Dividends Withholding Tax';
                        Gnjlline.Validate(Gnjlline."Currency Code");
                        Gnjlline.Amount := "W/Tax";
                        Gnjlline.Validate(Gnjlline.Amount);
                        Gnjlline."Bal. Account Type" := Gnjlline."bal. account type"::"G/L Account";
                        Gnjlline."Bal. Account No." := '20360';
                        Gnjlline."Transaction Type" := Gnjlline."transaction type"::"Additional Shares";
                        Gnjlline."Shortcut Dimension 1 Code" := 'BOSA';
                        Gnjlline."Shortcut Dimension 2 Code" := 'NAIROBI';
                        if Gnjlline.Amount <> 0 then
                            Gnjlline.Insert;
                    end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(Start_Date; StartDate)
                {
                    ApplicationArea = Basic;
                }
                field(Posting_Date; PostingDate)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Loans_RegisterCaptionLbl: label 'Approved Loans Report';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Client_No_CaptionLbl: label 'Client No.';
        Outstanding_LoanCaptionLbl: label 'Outstanding Loan';
        PeriodCaptionLbl: label 'Period';
        Approved_DateCaptionLbl: label 'Approved Date';
        Loan_TypeCaption_Control1102760043Lbl: label 'Loan Type';
        Verified_By__________________________________________________CaptionLbl: label 'Verified By..................................................';
        Confirmed_By__________________________________________________CaptionLbl: label 'Confirmed By..................................................';
        Sign________________________CaptionLbl: label 'Sign........................';
        Sign________________________Caption_Control1102755003Lbl: label 'Sign........................';
        Date________________________CaptionLbl: label 'Date........................';
        Date________________________Caption_Control1102755005Lbl: label 'Date........................';
        NameCreditOff: label 'Name......................................';
        NameCreditDate: label 'Date........................................';
        NameCreditSign: label 'Signature..................................';
        NameCreditMNG: label 'Name......................................';
        NameCreditMNGDate: label 'Date.....................................';
        NameCreditMNGSign: label 'Signature..................................';
        NameCEO: label 'Name........................................';
        NameCEOSign: label 'Signature...................................';
        NameCEODate: label 'Date.....................................';
        CreditCom1: label 'Name........................................';
        CreditCom1Sign: label 'Signature...................................';
        CreditCom1Date: label 'Date.........................................';
        CreditCom2: label 'Name........................................';
        CreditCom2Sign: label 'Signature....................................';
        CreditCom2Date: label 'Date..........................................';
        CreditCom3: label 'Name.........................................';
        CreditComDate3: label 'Date..........................................';
        CreditComSign3: label 'Signature..................................';
        Comment: label '....................';
        SN: Integer;
        Company: Record "Company Information";
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        Cust: Record "Members Register";
        StartDate: Date;
        DateFilter: Text[100];
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text[100];
        ToDateS: Text[100];
        DivTotal: Decimal;
        GenSetUp: Record "Sacco General Set-Up";
        CDeposits: Decimal;
        CustDiv: Record Customer;
        DivProg: Record "Dividends Progression";
        CDiv: Decimal;
        BDate: Date;
        CustR: Record "Members Register";
        IntRebTotal: Decimal;
        CIntReb: Decimal;
        LineNo: Integer;
        Gnjlline: Record "Gen. Journal Line";
        PostingDate: Date;
        "W/Tax": Decimal;
        CommDiv: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516418_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
