#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516930_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50930 "Scheduled Meeting Notification"
{
    RDLCLayout = 'Layouts/ScheduledMeetingNotification.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Meetings Schedule"; "Meetings Schedule")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            trigger OnAfterGetRecord();
            var
                Recipient: List of [Text];
            begin
                SMTPSetup.Get();
                VarNoticeDate := CalcDate('2D', Today);
                ObjHouseGroups.Reset;
                ObjHouseGroups.SetRange(ObjHouseGroups."Cell Group Code", "Lead No");
                if ObjHouseGroups.FindSet then begin
                    VarGroupName := ObjHouseGroups."Cell Group Name";
                end;
                ObjLeads.Reset;
                ObjLeads.SetRange(ObjLeads."No.", "Lead No");
                if ObjLeads.FindSet then begin
                    VarGroupName := ObjLeads.Name;
                end;
                //Notify Staff===================================================================
                ObjMeetings.Reset;
                ObjMeetings.SetRange(ObjMeetings."Lead No", "Lead No");
                ObjMeetings.SetRange(ObjMeetings."Meeting Date", VarNoticeDate);
                ObjMeetings.SetFilter(ObjMeetings."User Email", '<>%1', '');
                if ObjMeetings.FindSet then begin
                    if ObjMeetings."User Email" = '' then begin
                        Error('Email Address Missing for User' + '-' + ObjMeetings."User to Notify");
                    end;
                    if ObjMeetings."User Email" <> '' then
                        Recipient.Add(ObjMeetings."User Email");
                    SMTPMail.CreateMessage(SMTPSetup."Email Sender Name", SMTPSetup."Email Sender Address", Recipient, 'Meeting Notification', '', true);
                    SMTPMail.AppendBody(StrSubstNo(MeetingsMessage, ObjMeetings."User to Notify", VarGroupName, ObjMeetings."Meeting Date", ObjMeetings."Meeting Place", UserId));
                    SMTPMail.AppendBody(SMTPSetup."Email Sender Name");
                    SMTPMail.AppendBody('<br><br>');
                    SMTPMail.AddAttachment(FileName, Attachment);
                    SMTPMail.Send;
                end;
                //End Notify Staff===================================================================
                //Notify Customer====================================================================
                ObjMeetings.Reset;
                ObjMeetings.SetRange(ObjMeetings."Lead No", "Lead No");
                ObjMeetings.SetRange(ObjMeetings."Meeting Date", VarNoticeDate);
                if ObjMeetings.FindSet then begin
                    if ObjLeads.Get(ObjMeetings."Lead No") then begin
                        VarCustEmail := ObjLeads."E-Mail";
                    end;
                    if VarCustEmail = '' then begin
                        exit;
                    end;
                    if VarCustEmail <> '' then
                        Recipient.Add(VarCustEmail);
                    SMTPMail.CreateMessage(SMTPSetup."Email Sender Name", SMTPSetup."Email Sender Address", Recipient, 'Meeting Notification', '', true);
                    SMTPMail.AppendBody(StrSubstNo(MeetingsMessage, VarCustName, ObjMeetings."User to Notify", ObjMeetings."Meeting Date", ObjMeetings."Meeting Place", UserId));
                    SMTPMail.AppendBody(SMTPSetup."Email Sender Name");
                    SMTPMail.AppendBody('<br><br>');
                    SMTPMail.AddAttachment(FileName, Attachment);
                    SMTPMail.Send;
                end;
                //End Notify Customer================================================================
                SMTPSetup.Get();
                VarNoticeDate := CalcDate('2D', Today);
                //Send Sms Notification to Customer==================================================
                if ObjMeetings."Meeting Date" = VarNoticeDate then begin
                    if ObjLeads.Get(ObjMeetings."Lead No") then begin
                        if ObjLeads."Phone No." <> '' then
                            VarSmsBody := 'Dear ' + ' ' + ObjLeads."First Name" + ',' + 'you have a scheduled meeting with' + ' ' + ObjMeetings."User to Notify" + ' ' + 'on' + ' '
                            + Format(ObjMeetings."Meeting Date") + ' ' + 'at' + ' ' + ObjMeetings."Meeting Place" + '.Contact Kingdom Sacco for clarification.';
                        SurestpFactory.FnSendSMS('MeetingNotification', VarSmsBody, ObjLeads."No.", ObjLeads."Phone No.");
                    end;
                end;
                //End Send SMS Notification to Customer==============================================
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        MeetingsMessage: label '<p style="font-family:Verdana,Arial;font-size:10pt">Dear<b> %1,</b></p><p style="font-family:Verdana,Arial;font-size:9pt">Meeting Notification</p><p style="font-family:Verdana,Arial;font-size:9pt">This is to confirm that you have a scheduled meeting with %2  on  %3  at %4,</p><p style="font-family:Verdana,Arial;font-size:9pt"> </b></p><br>Regards<p>%5</p><p><b>KINGDOM SACCO LTD</b></p>';
        Memb: Record "Membership Applications";
        SMTPMail: Codeunit "SMTP Mail";
        SMTPSetup: Record "SMTP Mail Setup";
        FileName: Text[100];
        Attachment: Text[250];
        CompanyInfo: Record "Company Information";
        ObjMeetings: Record "Meetings Schedule";
        VarNoticeDate: Date;
        ObjHouseGroups: Record "Member House Groups";
        VarGroupName: Code[80];
        ObjLeads: Record "Lead Management";
        VarCustEmail: Text[30];
        VarCustName: Code[50];
        SurestpFactory: Codeunit "SURESTEP Factory";
        VarSmsBody: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516930_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
