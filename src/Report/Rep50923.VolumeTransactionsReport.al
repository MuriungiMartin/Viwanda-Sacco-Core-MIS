#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516923_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50923 "Volume Transactions Report"
{
    RDLCLayout = 'Layouts/VolumeTransactionsReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Audit Volume Trans. Entries"; "Audit Volume Trans. Entries")
        {
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Posting Date";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(EntryNo_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Entry No")
            {
            }
            column(PostingDate_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Posting Date")
            {
            }
            column(AccountNo_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Account No")
            {
            }
            column(DocumentNo_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Document No")
            {
            }
            column(Description_AuditVolumeTransEntries; "Audit Volume Trans. Entries".Description)
            {
            }
            column(DebitAmount_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Debit Amount")
            {
            }
            column(CreditAmount_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Credit Amount")
            {
            }
            column(Amount_AuditVolumeTransEntries; "Audit Volume Trans. Entries".Amount)
            {
            }
            column(UserID_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."User ID")
            {
            }
            column(AccountName_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Account Name")
            {
            }
            column(AccountType_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Account Type")
            {
            }
            column(AccountTypeDescription_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Account Type Description")
            {
            }
            column(AccountBalance_AuditVolumeTransEntries; "Audit Volume Trans. Entries"."Account Balance")
            {
            }
            column(VarDepositLimit; VarDepositLimit)
            {
            }
            column(VarWithdrawalLimit; VarWithdrawalLimit)
            {
            }
            column(VarCurrAccountBal; VarCurrAccountBal)
            {
            }
            column(VarAccountName; VarAccountName)
            {
            }
            column(VarAccountType; VarAccountType)
            {
            }
            column(VarDepositCriteriaTrue; VarDepositCriteriaTrue)
            {
            }
            column(VarWithdrawalCriteriaTrue; VarWithdrawalCriteriaTrue)
            {
            }
            column(VarDepCount; VarDepCount + 1)
            {
            }
            column(VarWithCount; VarWithCount + 1)
            {
            }
            trigger OnPreDataItem();
            var
                VarEntryNo: Integer;
            begin
                //===================================================Generate Credits
                ObjDetailedVendorLedger.Reset;
                ObjDetailedVendorLedger.SetFilter(ObjDetailedVendorLedger."Credit Amount", '>=%1', VarDepositLimit);
                ObjDetailedVendorLedger.SetFilter(ObjDetailedVendorLedger."Posting Date", DateFilter);
                if ObjDetailedVendorLedger.FindSet then begin
                    repeat
                        ObjDetailedVendorLedger.CalcFields(Description);
                        if ObjVendor.Get(ObjDetailedVendorLedger."Vendor No.") then begin
                            ObjVendor.CalcFields(ObjVendor.Balance);
                            ObjAuditEntries.Reset;
                            ObjAuditEntries.SetCurrentkey("Entry No");
                            if ObjAuditEntries.FindLast then
                                VarEntryNo := ObjAuditEntries."Entry No";
                            ObjAuditEntries.Init;
                            ObjAuditEntries."Entry No" := VarEntryNo + 1;
                            ObjAuditEntries."Account No" := ObjDetailedVendorLedger."Vendor No.";
                            ObjAuditEntries."Document No" := ObjDetailedVendorLedger."Document No.";
                            ObjAuditEntries.Description := ObjDetailedVendorLedger.Description;
                            ObjAuditEntries."Credit Amount" := ObjDetailedVendorLedger."Credit Amount";
                            ObjAuditEntries."Debit Amount" := ObjDetailedVendorLedger."Debit Amount";
                            ObjAuditEntries.Amount := ObjDetailedVendorLedger.Amount;
                            ObjAuditEntries."Posting Date" := ObjDetailedVendorLedger."Posting Date";
                            ObjAuditEntries."User ID" := ObjDetailedVendorLedger."User ID";
                            ObjAuditEntries."Account Name" := ObjVendor.Name;
                            ObjAuditEntries."Account Type" := ObjVendor."Account Type";
                            ObjAuditEntries."Account Type Description" := ObjVendor."Account Type Name";
                            ObjAuditEntries."Account Balance" := ObjVendor.Balance;
                            ObjAuditEntries.Insert;
                        end;
                    until ObjDetailedVendorLedger.Next = 0;
                end;
                //===================================================Generate Debits
                ObjDetailedVendorLedger.Reset;
                ObjDetailedVendorLedger.SetFilter(ObjDetailedVendorLedger."Debit Amount", '>=%1', VarWithdrawalLimit);
                ObjDetailedVendorLedger.SetFilter(ObjDetailedVendorLedger."Posting Date", DateFilter);
                if ObjDetailedVendorLedger.FindSet then begin
                    repeat
                        ObjDetailedVendorLedger.CalcFields(Description);
                        if ObjVendor.Get(ObjDetailedVendorLedger."Vendor No.") then begin
                            ObjVendor.CalcFields(ObjVendor.Balance);
                            ObjAuditEntries.Reset;
                            ObjAuditEntries.SetCurrentkey("Entry No");
                            if ObjAuditEntries.FindLast then
                                VarEntryNo := ObjAuditEntries."Entry No";
                            ObjAuditEntries.Init;
                            ObjAuditEntries."Entry No" := VarEntryNo + 1;
                            ObjAuditEntries."Account No" := ObjDetailedVendorLedger."Vendor No.";
                            ObjAuditEntries."Document No" := ObjDetailedVendorLedger."Document No.";
                            ObjAuditEntries.Description := ObjDetailedVendorLedger.Description;
                            ObjAuditEntries."Credit Amount" := ObjDetailedVendorLedger."Credit Amount";
                            ObjAuditEntries."Debit Amount" := ObjDetailedVendorLedger."Debit Amount";
                            ObjAuditEntries.Amount := ObjDetailedVendorLedger.Amount;
                            ObjAuditEntries."Posting Date" := ObjDetailedVendorLedger."Posting Date";
                            ObjAuditEntries."User ID" := ObjDetailedVendorLedger."User ID";
                            ObjAuditEntries."Account Name" := ObjVendor.Name;
                            ObjAuditEntries."Account Type" := ObjVendor."Account Type";
                            ObjAuditEntries."Account Type Description" := ObjVendor."Account Type Name";
                            ObjAuditEntries."Account Balance" := ObjVendor.Balance;
                            ObjAuditEntries.Insert;
                        end;
                    until ObjDetailedVendorLedger.Next = 0;
                end;
            end;

            trigger OnAfterGetRecord();
            begin
                /* IF (VarDepositLimit=0) OR (VarWithdrawalLimit=0) THEN BEGIN
                   ERROR('Ensure you specify the Deposit and Withdrawal Limit');
                   END;
                 ObjVendor.RESET;
                 ObjVendor.SETRANGE(ObjVendor."No.","Vendor No.");
                 IF ObjVendor.FINDSET THEN BEGIN
                   ObjVendor.CALCFIELDS(ObjVendor.Balance);
                   VarAccountName:=ObjVendor.Name;
                   VarAccountType:=ObjVendor."Account Type";
                   VarCurrAccountBal:=ObjVendor.Balance;
                   //VarDepCount:=VarDepCount+1;
                 END;
                 VarDepositCriteriaTrue:=FALSE;
                 VarWithCount:=0;
                 ObjVendorLedg.RESET;
                 ObjVendorLedg.SETRANGE(ObjVendorLedg."Entry No.","Entry No.");
                 ObjVendorLedg.SETFILTER(ObjVendorLedg."Credit Amount",'>=%1',VarDepositLimit);
                 IF ObjVendorLedg.FINDSET THEN BEGIN
                    VarDepositCriteriaTrue:=TRUE;
                    //VarWithCount:=VarWithCount+1;
                   END;
                 VarWithdrawalCriteriaTrue:=FALSE;
                 ObjVendorLedg.RESET;
                 ObjVendorLedg.SETRANGE(ObjVendorLedg."Entry No.","Entry No.");
                 ObjVendorLedg.SETFILTER(ObjVendorLedg."Debit Amount",'>=%1',VarWithdrawalLimit);
                 IF ObjVendorLedg.FINDSET THEN BEGIN
                    VarWithdrawalCriteriaTrue:=TRUE;
                   END;
                   */

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("Deposit Limit"; VarDepositLimit)
                {
                    ApplicationArea = Basic;
                }
                field("Withdrawal Limit"; VarWithdrawalLimit)
                {
                    ApplicationArea = Basic;
                }
                field(DateFilter; DateFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Date Filter';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Company: Record "Company Information";
        ClosingBalPreviousDay: Decimal;
        TotalDeposits: Decimal;
        TotalWithdrawals: Decimal;
        ClosingBalToday: Decimal;
        GLAccountNo: Code[20];
        VendorPostingGroups: Record "Vendor Posting Group";
        StartDate: Date;
        PreviousDay: Date;
        CurrDate: Date;
        GLAccounts: Record "G/L Account";
        CurrDateFilter: Text;
        PrevDateFilter: Text;
        GLEntry: Record "G/L Entry";
        ASAT: Date;
        TransactedAccounts: Integer;
        GLEntries: Record "G/L Entry";
        VarDepositLimit: Decimal;
        VarWithdrawalLimit: Decimal;
        VarCurrAccountBal: Decimal;
        VarAccountName: Code[50];
        VarAccountType: Code[20];
        ObjVendor: Record Vendor;
        VarDepositCriteriaTrue: Boolean;
        VarWithdrawalCriteriaTrue: Boolean;
        ObjVendorLedg: Record "Vendor Ledger Entry";
        VarDepCount: Integer;
        VarWithCount: Integer;
        ObjDetailedVendorLedger: Record "Detailed Vendor Ledg. Entry";
        DateFilter: Text;
        ObjAuditEntries: Record "Audit Volume Trans. Entries";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516923_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
