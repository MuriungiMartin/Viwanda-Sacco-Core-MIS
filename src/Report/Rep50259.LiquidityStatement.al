#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516259_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50259 "Liquidity Statement"
{
    RDLCLayout = 'Layouts/LiquidityStatement.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Company; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(Name; Company.Name)
            {
            }
            column(AsAt; AsAt)
            {
            }
            column(BeginDate; BeginDate)
            {
            }
            column(FinancialYear; FinancialYear)
            {
            }
            column(LocalNotes; LocalNotes)
            {
            }
            column(ForeignNotes; ForeignNotes)
            {
            }
            column(BalanceswithCommercialBanks; BalanceswithCommercialBanks)
            {
            }
            column(TimeDeposits; TimeDeposits)
            {
            }
            column(OverdraftsandMatured; OverdraftsandMatured)
            {
            }
            column(BalanceswithotherSaccoSocieties; BalanceswithotherSaccoSocieties)
            {
            }
            column(BalanceswithotherFinancialInstitutions; BalanceswithotherFinancialInstitutions)
            {
            }
            column(BalancesDuetootherSaccosocieties; BalancesDuetootherSaccosocieties)
            {
            }
            column(BalancesduetoFinanciaInstitutions; BalancesduetoFinanciaInstitutions)
            {
            }
            column(MaturedLoansandAdvances; MaturedLoansandAdvances)
            {
            }
            column(TreasuryBills; TreasuryBills)
            {
            }
            column(TreasuryBonds; TreasuryBonds)
            {
            }
            column(NETLIQUIDASSETS; NETLIQUIDASSETS)
            {
            }
            column(MaturedLiabilities; MaturedLiabilities)
            {
            }
            column(LiabilitiesMaturingwithin91Days; LiabilitiesMaturingwithin91Days)
            {
            }
            column(TotalOtherliabilities; TotalOtherliabilities)
            {
            }
            column(TotalOtherliabilitiesNew; TotalOtherliabilitiesNew)
            {
            }
            column(Ratio; Ratio)
            {
            }
            column(Minumholding; Minumholding)
            {
            }
            column(Excess; Excess)
            {
            }
            trigger OnAfterGetRecord();
            begin
                LocalNotes := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::LocalNotes);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            LocalNotes += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                BalanceswithCommercialBanks := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::BankBalances);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", '<=%1', AsAt);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithCommercialBanks += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gov securities
                TreasuryBills := 0;
                TreasuryBonds := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::GovSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", '<=%1', AsAt);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TreasuryBills += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //balances with other financial institution
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::balanceswithotherfinancialinsti);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", '<=%1', AsAt);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithotherFinancialInstitutions += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                    //time deposits
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TimeDeposits);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", '<=%1', AsAt);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TimeDeposits += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //total liabilities
                // GLAccount.RESET;
                // GLAccount.SETRANGE(GLAccount."No.",'20199');
                // IF GLAccount.FINDFIRST THEN BEGIN
                //  GLAccount.CALCFIELDS(Balance);
                //  TotalOtherliabilitiesNew:=GLAccount.Balance;
                // // MESSAGE('%1',TotalOtherliabilities);
                //  END;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TotalOtherliabilitiesNew);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", '<=%1', AsAt);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TotalOtherliabilitiesNew += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                NETLIQUIDASSETS :=
                LocalNotes + ForeignNotes + BalancesduetoFinanciaInstitutions + BalancesDuetootherSaccosocieties + BalanceswithCommercialBanks + BalanceswithotherFinancialInstitutions + BalanceswithotherSaccoSocieties + TreasuryBills + TreasuryBonds + TimeDeposits
                + OverdraftsandMatured;
                TotalOtherliabilities := MaturedLiabilities + LiabilitiesMaturingwithin91Days;
                Ratio := (NETLIQUIDASSETS / TotalOtherliabilitiesNew);
                Minumholding := 0.1;
                Excess := Ratio - Minumholding;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(AsAt; AsAt)
                {
                    ApplicationArea = Basic;
                    Caption = 'As At';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        BeginDate := CalcDate('-CY', AsAt);
        FinancialYear := Date2dmy(BeginDate, 3);
        DateFilter := '..' + Format(AsAt);
        ;
        ReportsForNavPre;
    end;

    var
        AsAt: Date;
        FinancialYear: Integer;
        BeginDate: Date;
        GLEntry: Record "G/L Entry";
        GLAccount: Record "G/L Account";
        LocalNotes: Decimal;
        ForeignNotes: Decimal;
        BalanceswithCommercialBanks: Decimal;
        TimeDeposits: Decimal;
        DateFilter: Text;
        OverdraftsandMatured: Decimal;
        BalanceswithotherSaccoSocieties: Decimal;
        BalanceswithotherFinancialInstitutions: Decimal;
        BalancesDuetootherSaccosocieties: Decimal;
        BalancesduetoFinanciaInstitutions: Decimal;
        MaturedLoansandAdvances: Decimal;
        TreasuryBills: Decimal;
        TreasuryBonds: Decimal;
        NETLIQUIDASSETS: Decimal;
        MaturedLiabilities: Decimal;
        LiabilitiesMaturingwithin91Days: Decimal;
        TotalOtherliabilities: Decimal;
        TotalOtherliabilitiesNew: Decimal;
        Ratio: Decimal;
        Minumholding: Decimal;
        Excess: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516259_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
