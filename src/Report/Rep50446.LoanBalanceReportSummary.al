#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516446_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50446 "Loan Balance -Report Summary"
{
    RDLCLayout = 'Layouts/LoanBalance-ReportSummary.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Loans2; "Loans Register")
        {
            DataItemTableView = where(Source = const(BOSA), Posted = filter(true));
            RequestFilterFields = "Loan Product Type", "Application Date", "Appraisal Status", "Loan Status", "Issued Date";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address2; Company."Address 2")
            {
            }
            column(Company_PhoneNo; Company."Phone No.")
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(AmountHK; AmountHK)
            {
            }
            column(AmountHADV; AmountHADV)
            {
            }
            column(AmountHOKOA; AmountHOKOA)
            {
            }
            column(AmountHSFADV; AmountHSFADV)
            {
            }
            column(AmountHSFDEF; AmountHSFDEF)
            {
            }
            column(AmountSpF; AmountSpF)
            {
            }
            column(ApprovedHK; ApprovedHK)
            {
            }
            column(ApprovedHADV; ApprovedHADV)
            {
            }
            column(ApprovedHOKOA; ApprovedHOKOA)
            {
            }
            column(ApprovedHSFADV; ApprovedHSFADV)
            {
            }
            column(ApprovedHSFDEF; ApprovedHSFDEF)
            {
            }
            column(ApprovedSPF; ApprovedSPF)
            {
            }
            column(NETHk; NETHk)
            {
            }
            column(NETHADV; NETHADV)
            {
            }
            column(NETHOKOA; NETHOKOA)
            {
            }
            column(NETHSFADV; NETHSFADV)
            {
            }
            column(NETHSFDEF; NETHSFDEF)
            {
            }
            column(NETSPF; NETSPF)
            {
            }
            dataitem("<Loans>"; "Loans Register")
            {
                DataItemTableView = sorting("Loan  No.") where(Source = const(BOSA), Posted = filter(true));
                RequestFilterFields = "Loan Product Type", "Application Date", "Appraisal Status", "Loan Status", "Issued Date";
                column(ReportForNavId_1000000019; 1000000019) { } // Autogenerated by ForNav - Do not delete
                column(S_No; Intcount)
                {
                }
                column(Month; MONTH)
                {
                }
                column(Employer; Lonning."Employer Code")
                {
                }
                column(Personal_No; Lonning."Staff No")
                {
                }
                column(Member_No; Lonning."Client Code")
                {
                }
                column(Member_Name; Lonning."Client Name")
                {
                }
                column(Loan_Prod_Type; Lonning."Loan Product Type Name")
                {
                }
                column(Loan_No; Lonning."Loan  No.")
                {
                }
                column(Cheque_No; Lonning."Cheque Number")
                {
                }
                column(Requested_Amount; Lonning."Requested Amount")
                {
                }
                column(Approved_Amount; Lonning."Approved Amount")
                {
                }
                column(Top_Up_Amount; Lonning."Loan Offset Amount")
                {
                }
                column(Installments; Lonning.Installments)
                {
                }
                trigger OnPreDataItem();
                begin
                    Loans.SetFilter(Loans."Issued Date", Datef);
                end;

                trigger OnAfterGetRecord();
                begin
                    //Loans.SETFILTER(Loans."Issued Date",Loans.GETFILTER(Loans2."Issued Date"));
                    //**************************kyalo comment****************
                    if MONTH = '' then
                        Error('You Must Specify the Month for the report');
                    RPeriod := Loans.Installments;
                    if (Loans."Outstanding Balance" > 0) and (Loans.Repayment > 0) then
                        RPeriod := Loans."Outstanding Balance" / Loans.Repayment;
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", "Client Code");
                    /*IF Cust.FIND('-') THEN BEGIN
					EmpCode:=Cust."Company Code";
					END;
					*/
                    Intcount += 1;
                    if LoanType.Get(Loans."Loan Product Type") then begin
                        Loancode := LoanType."Special Code";
                    end;
                    //Saccodeduct:=0;
                    /*
					IF "Loan Product Type"='NORM' THEN BEGIN
					REPEAT
					AmountN:=AmountN+"Requested Amount";
					ApprovedN:=ApprovedN+"Approved Amount";
					UNTIL Loans.NEXT=0;
					END;
					*/

                end;

            }
            trigger OnPreDataItem();
            begin
                Datef := Loans2.GetFilter(Loans2."Issued Date");
            end;

            trigger OnAfterGetRecord();
            begin
                repeat
                    if "Loan Product Type" = 'FOSAKARIBU' then begin
                        CalcFields("Loan Offset Amount");
                        AmountHK := AmountHK + "Requested Amount";
                        ApprovedHK := ApprovedHK + "Approved Amount";
                        NETHk := ROUND(NETHk + ("Approved Amount" - "Loan Offset Amount" - ("Loan Offset Amount" * 0.1)))
                    end else
                        if "Loan Product Type" = 'HISA ADV' then begin   //> HISA ADV
                            CalcFields("Loan Offset Amount");
                            AmountHADV := AmountHADV + "Requested Amount";
                            ApprovedHADV := ApprovedHADV + "Approved Amount";
                            NETHADV := ROUND(NETHADV + ("Approved Amount" - (("Loan Offset Amount" * 0.1) + "Loan Offset Amount")))
                        end else
                            if "Loan Product Type" = 'HSF OKOA' then begin
                                CalcFields("Loan Offset Amount");
                                AmountHOKOA := AmountHOKOA + "Requested Amount";
                                ApprovedHOKOA := ApprovedHOKOA + "Approved Amount";
                                NETHOKOA := ROUND(NETHOKOA + ("Approved Amount" - (("Loan Offset Amount" * 0.1) + "Loan Offset Amount")))
                            end else
                                if "Loan Product Type" = 'HSFADVANCE' then begin   //>
                                    CalcFields("Loan Offset Amount");
                                    AmountHSFADV := AmountHSFADV + "Requested Amount";
                                    ApprovedHSFADV := ApprovedHSFADV + "Approved Amount";
                                    NETHSFADV := ROUND(NETHSFADV + ("Approved Amount" - (("Loan Offset Amount" * 0.1) + "Loan Offset Amount")), 1, '=')
                                end else
                                    if "Loan Product Type" = 'HSFDEF' then begin       //>
                                        CalcFields("Loan Offset Amount");
                                        AmountHSFDEF := AmountHSFDEF + "Requested Amount";
                                        ApprovedHSFDEF := ApprovedHSFDEF + "Approved Amount";
                                        NETHSFDEF := ROUND(NETHSFDEF + ("Approved Amount" - (("Loan Offset Amount" * 0.1) + "Loan Offset Amount")), 1, '=')
                                    end else
                                        if "Loan Product Type" = 'HSFSPECIAL' then begin
                                            CalcFields("Loan Offset Amount");
                                            AmountSpF := AmountSpF + "Requested Amount";
                                            ApprovedSPF := ApprovedSPF + "Approved Amount";
                                            NETSPF := NETSPF + ("Approved Amount" - "Loan Offset Amount" - ("Loan Offset Amount" * 0.1))
                                        end;
                until Loans2.Next = 0;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(Month; MONTH)
                {
                    ApplicationArea = Basic;
                    Caption = 'Month';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Loans_RegisterCaptionLbl: label 'Approved Loans Report';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Client_No_CaptionLbl: label 'Client No.';
        Outstanding_LoanCaptionLbl: label 'Outstanding Loan';
        PeriodCaptionLbl: label 'Period';
        Approved_DateCaptionLbl: label 'Approved Date';
        Loan_TypeCaption_Control1102760043Lbl: label 'Loan Type';
        Verified_By__________________________________________________CaptionLbl: label 'Verified By..................................................';
        Confirmed_By__________________________________________________CaptionLbl: label 'Confirmed By..................................................';
        Sign________________________CaptionLbl: label 'Sign........................';
        Sign________________________Caption_Control1102755003Lbl: label 'Sign........................';
        Date________________________CaptionLbl: label 'Date........................';
        Date________________________Caption_Control1102755005Lbl: label 'Date........................';
        NameCreditOff: label 'Name......................................';
        NameCreditDate: label 'Date........................................';
        NameCreditSign: label 'Signature..................................';
        NameCreditMNG: label 'Name......................................';
        NameCreditMNGDate: label 'Date.....................................';
        NameCreditMNGSign: label 'Signature..................................';
        NameCEO: label 'Name........................................';
        NameCEOSign: label 'Signature...................................';
        NameCEODate: label 'Date.....................................';
        CreditCom1: label 'Name........................................';
        CreditCom1Sign: label 'Signature...................................';
        CreditCom1Date: label 'Date.........................................';
        CreditCom2: label 'Name........................................';
        CreditCom2Sign: label 'Signature....................................';
        CreditCom2Date: label 'Date..........................................';
        CreditCom3: label 'Name.........................................';
        CreditComDate3: label 'Date..........................................';
        CreditComSign3: label 'Signature..................................';
        Comment: label '....................';
        Loans: Record "Loans Register";
        Company: Record "Company Information";
        RPeriod: Decimal;
        Cust: Record "Members Register";
        EmpCode: Code[30];
        Intcount: Integer;
        LoanType: Record "Loan Products Setup";
        Loancode: Code[10];
        MONTH: Code[20];
        AmountHK: Decimal;
        ApprovedHK: Decimal;
        NETHk: Decimal;
        AmountHADV: Decimal;
        ApprovedHADV: Decimal;
        NETHADV: Decimal;
        AmountHOKOA: Decimal;
        ApprovedHOKOA: Decimal;
        NETHOKOA: Decimal;
        AmountHSFADV: Decimal;
        ApprovedHSFADV: Decimal;
        NETHSFADV: Decimal;
        AmountHSFDEF: Decimal;
        ApprovedHSFDEF: Decimal;
        NETHSFDEF: Decimal;
        ApprovedSPF: Decimal;
        AmountSpF: Decimal;
        NETSPF: Decimal;
        BEGINDATE: Date;
        ENDDATE: Date;
        Lonning: Record "Loans Register";
        Approved: Decimal;
        Datef: Text[30];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516446_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
