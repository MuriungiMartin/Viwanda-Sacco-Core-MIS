#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516350_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50350 "Pension Deduction"
{
    RDLCLayout = 'Layouts/PensionDeduction.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Employee."; "Payroll Employee.")
        {
            DataItemTableView = sorting("No.") where(Status = const(Active));
            column(ReportForNavId_8631; 8631) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(PeriodName; PeriodName)
            {
            }
            column(PayrollMode; PayrollMode)
            {
            }
            column(strEmpName; strEmpName)
            {
            }
            column(Period; SelectedPeriod)
            {
            }
            column(UserId; UserId)
            {
            }
            column(BasicPay; BasicPay)
            {
            }
            column(Grosspay; Grosspay)
            {
            }
            column(nonTaxAmount; nonTaxAmount)
            {
            }
            column(statutoryDed; statutoryDed)
            {
            }
            column(NetPay; NetPay)
            {
            }
            column(OtherAllow; OtherAllow)
            {
            }
            column(TotalDeductions; TotalDeductions)
            {
            }
            column(nonstatutoryDed; nonstatutoryDed)
            {
            }
            column(CummulativePension_PayrollEmployee; "Payroll Employee."."Cummulative Pension")
            {
            }
            column(CummEmployerPensionLCY_PayrollEmployee; "Payroll Employee."."Cumm Employer Pension(LCY)")
            {
            }
            column(CummulativeEmployerPension_PayrollEmployee; "Payroll Employee."."Cummulative Employer Pension")
            {
            }
            column(Pension; Pension)
            {
            }
            column(negNet; negNet)
            {
            }
            column(strCodes; strCodes)
            {
            }
            column(TotnegNet; TotnegNet)
            {
            }
            column(TotNetPay; TotNetPay)
            {
            }
            column(totTotalDeductions; totTotalDeductions)
            {
            }
            column(TotPension; TotPension)
            {
            }
            column(TotnonstatutoryDed; TotnonstatutoryDed)
            {
            }
            column(TotstatutoryDed; TotstatutoryDed)
            {
            }
            column(TotnonTaxAmount; TotnonTaxAmount)
            {
            }
            column(TotGrosspay; TotGrosspay)
            {
            }
            column(TotOtherAllow; TotOtherAllow)
            {
            }
            column(TotBasicPay; TotBasicPay)
            {
            }
            column(DATE____________________________________________________________; 'DATE...........................................................')
            {
            }
            column(NAME_________________________________________________________________________________________; 'NAME........................................................................................')
            {
            }
            column(DESIGNATION_____________________________________________________; 'DESIGNATION....................................................')
            {
            }
            column(SIGNATURE____________________________________________________; 'SIGNATURE...................................................')
            {
            }
            column(SIGNATURE_____________________________________________________Control1102756035; 'SIGNATURE...................................................')
            {
            }
            column(DATE_____________________________________________________________Control1102756042; 'DATE...........................................................')
            {
            }
            column(NAME__________________________________________________________________________________________Control1102756031; 'NAME........................................................................................')
            {
            }
            column(DESIGNATION______________________________________________________Control1102756034; 'DESIGNATION....................................................')
            {
            }
            column(Payroll_Summary_ListCaption; Payroll_Summary_ListCaptionLbl)
            {
            }
            column(Gross_Taxable_PayCaption; Gross_Taxable_PayCaptionLbl)
            {
            }
            column(Non_Taxable_AmountCaption; Non_Taxable_AmountCaptionLbl)
            {
            }
            column(Statutory_DeductionsCaption; Statutory_DeductionsCaptionLbl)
            {
            }
            column(Total_DeductionsCaption; Total_DeductionsCaptionLbl)
            {
            }
            column(Pension_Staff_Cont_Caption; Pension_Staff_Cont_CaptionLbl)
            {
            }
            column(Negative_Net_PayCaption; Negative_Net_PayCaptionLbl)
            {
            }
            column(Other_AllowancesCaption; Other_AllowancesCaptionLbl)
            {
            }
            column(Net_PayCaption; Net_PayCaptionLbl)
            {
            }
            column(Basic_PayCaption; Basic_PayCaptionLbl)
            {
            }
            column(Employee_Name_Caption; Employee_Name_CaptionLbl)
            {
            }
            column(Non_Statutory_DeductionsCaption; Non_Statutory_DeductionsCaptionLbl)
            {
            }
            column(Employee_Code_Caption; Employee_Code_CaptionLbl)
            {
            }
            column(Totals_Caption; Totals_CaptionLbl)
            {
            }
            column(Checked_byCaption; Checked_byCaptionLbl)
            {
            }
            column(HR_Employee_No_; "Payroll Employee."."No.")
            {
            }
            column(Paye_Ded; PAYEDed)
            {
            }
            column(Nssf_Ded; NSSFDed)
            {
            }
            column(Nhif_Ded; NHIFDed)
            {
            }
            column(TotPAYE; TotPAYEDed)
            {
            }
            column(TotNSSF; TotNSSFDed)
            {
            }
            column(TotNHIF; TotNHIFDed)
            {
            }
            column(HseAllow; HseAllow)
            {
            }
            column(HseTotAllow; HseTotAllow)
            {
            }
            column(TransAllow; TransAllow)
            {
            }
            column(TotalTransAllow; TotalTransAllow)
            {
            }
            column(overtime; overtime)
            {
            }
            column(OverTimeTotal; OverTimeTotal)
            {
            }
            column(Aggregate; Aggregate)
            {
            }
            column(TotalAgg; TotalAgg)
            {
            }
            column(SArrears; StaffBonus)
            {
            }
            column(TotalSArrears; TotalStaff)
            {
            }
            column(ShareCont; ShareCont)
            {
            }
            column(TotalShareCont; TotalShareCont)
            {
            }
            column(LoanRepay; LoanRepay)
            {
            }
            column(TotalLoanRepay; TotalLoanRepay)
            {
            }
            column(ADV12; ADV12)
            {
            }
            column(TotalADV12; TotalADV12)
            {
            }
            column(IntRepay; IntRepay)
            {
            }
            column(TotInt; TotInt)
            {
            }
            column(HseLoan; HseLoan)
            {
            }
            column(TotalHseLoan; TotalHseLoan)
            {
            }
            trigger OnPreDataItem();
            begin
                if PayrollMode <> Payrollmode::" " then begin
                    "Payroll Employee.".SetRange("Payroll Employee."."Payment Mode", PayrollMode);
                end;
            end;

            trigger OnAfterGetRecord();
            begin
                strEmpName := Lastname + ' ' + Firstname + ' ' + Surname;
                strCodes := "No.";
                BasicPay := 0;
                Allow := 0;
                //TotalStaff:=0;
                Grosspay := 0;
                PenGrat := 0;
                Nssf := 0;
                HseAllow := 0;
                statutoryDed := 0;
                nonstatutoryDed := 0;
                TaxablePay := 0;
                Reliefs := 0;
                OtherAllow := 0;
                TotalDeductions := 0;
                NetPay := 0;
                negNet := 0;
                nonTaxAmount := 0;
                Pension := 0;
                NSSFDed := 0;
                PAYEDed := 0;
                NHIFDed := 0;
                TransAllow := 0;
                ShareCont := 0;
                HseLoan := 0;
                LoanRepay := 0;
                IntRepay := 0;
                ADV12 := 0;
                overtime := 0;
                Aggregate := 0;
                PAYETaxDeduction := 0;
                SArrears := 0;
                StaffBonus := 0;
                //Loop through the Income/Earnings and deductions************************************************************************
                PeriodTrans.Reset;
                PeriodTrans.SetRange(PeriodTrans."Employee Code", "No.");
                PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                PeriodTrans.SetCurrentkey(PeriodTrans."Employee Code", PeriodTrans."Period Month", PeriodTrans."Period Year",
                PeriodTrans."Group Order", PeriodTrans."Sub Group Order");
                if PeriodTrans.Find('-') then
                    repeat
                        //Basic Pay************************START
                        if (PeriodTrans."Group Order" = 1) and (PeriodTrans."Sub Group Order" = 1) then begin
                            BasicPay := PeriodTrans.Amount;
                            TotBasicPay := TotBasicPay + BasicPay;
                        end;
                        // HOUSE ALLOWANCE
                        /*IF (PeriodTrans."Transaction Code"='E001') THEN
                        BEGIN
                           HseAllow:=HseAllow+PeriodTrans.Amount;
                           HseTotAllow:=HseTotAllow+PeriodTrans.Amount;
                        END;*/
                        // HOUSE ALLOWANCE
                        // TRANSPORT ALLOWANCE
                        /* IF (PeriodTrans."Transaction Code"='E002') THEN
                         BEGIN
                            TransAllow:=TransAllow+PeriodTrans.Amount;
                            TotalTransAllow:=TotalTransAllow+PeriodTrans.Amount;
                         END;*/
                        // TRANSPORT ALLOWANCE
                        //Other Allowances************************START
                        /*IF (PeriodTrans."Group Order"=3) AND (PeriodTrans."Sub Group Order"=0) THEN
                        BEGIN
                          OtherAllow:= OtherAllow+PeriodTrans.Amount;
                          TotOtherAllow:=TotOtherAllow+PeriodTrans.Amount;
                        END;
                        */
                        //Gross Pay************************START
                        /*IF (PeriodTrans."Group Order"=4) AND (PeriodTrans."Sub Group Order"=0) THEN
                        BEGIN
                          Grosspay:=Grosspay+PeriodTrans.Amount;
                          TotGrosspay:=TotGrosspay+PeriodTrans.Amount;
                        END;
                        */
                        //other non taxable*************START
                        /* TransCodes.RESET;
                         TransCodes.SETRANGE(TransCodes."Transaction Code",PeriodTrans."Transaction Code");
                         TransCodes.SETRANGE(TransCodes.Taxable,FALSE) ;
                         IF TransCodes.FINDFIRST  THEN
                          BEGIN
                            nonTaxAmount:=nonTaxAmount+PeriodTrans.Amount;
                            TotnonTaxAmount:=TotnonTaxAmount+PeriodTrans.Amount;
                           END;
                           */
                        //Statutory Deductions*************START
                        /*IF (PeriodTrans."Group Order"=7) THEN
                        BEGIN
                           statutoryDed:=statutoryDed+PeriodTrans.Amount;
                           TotstatutoryDed:=TotstatutoryDed+PeriodTrans.Amount;
                        END;
                    //NSSF
                        IF (PeriodTrans."Transaction Code"='NSSF') THEN
                        BEGIN
                           NSSFDed:=NSSFDed+PeriodTrans.Amount;
                           TotNSSFDed:=TotNSSFDed+PeriodTrans.Amount;
                        END;
                    //NHIF
                        IF (PeriodTrans."Transaction Code"='NHIF') THEN
                        BEGIN
                           NHIFDed:=NHIFDed+PeriodTrans.Amount;
                           TotNHIFDed:=TotNHIFDed+PeriodTrans.Amount;
                        END;
                    //PAYEE
                        IF (PeriodTrans."Transaction Code"='PAYE') THEN
                        BEGIN
                           PAYEDed:=PAYEDed+PeriodTrans.Amount;
                           TotPAYEDed:=TotPAYEDed+PeriodTrans.Amount;
                        END;
                        */
                        //Pension *************************** please redo this ;-) dennis tihihihi
                        if (PeriodTrans."Transaction Code" = 'D021') or (PeriodTrans."Transaction Code" = 'D021') then begin
                            Pension := Pension + PeriodTrans.Amount;
                            TotPension := TotPension + PeriodTrans.Amount;
                        end;
                        // Voluntary Pension
                        if (PeriodTrans."Transaction Code" = 'D028') then begin
                            ADV12 := ADV12 + PeriodTrans.Amount;
                            TotalADV12 := TotalADV12 + PeriodTrans.Amount;
                        end;
                        /*
                        IF (PeriodTrans."Transaction Code"='E005') OR (PeriodTrans."Transaction Code"='E007') THEN
                        BEGIN
                           overtime:=overtime+PeriodTrans.Amount;
                           OverTimeTotal:=OverTimeTotal+PeriodTrans.Amount;
                        END;
                      // OVERTIME
                      // AGGREGATION
                        IF (PeriodTrans."Transaction Code"='E006') THEN
                        BEGIN
                           Aggregate:=Aggregate+PeriodTrans.Amount;
                           TotalAgg:=TotalAgg+PeriodTrans.Amount;
                        END;
                      // AGGREGATION
                      // Staff Loan
                        IF (PeriodTrans."Transaction Code"='E003') THEN
                        BEGIN
                          StaffBonus:=StaffBonus+PeriodTrans.Amount;
                           TotalStaff:=TotalStaff+PeriodTrans.Amount;
                        END;
                      // Staff Loan
                      // BOSA LOAN REPAYMENT DEDUCTION
                        IF (PeriodTrans."Transaction Code"='D003') OR (PeriodTrans."Transaction Code"='D004')
                            OR (PeriodTrans."Transaction Code"='D005') OR (PeriodTrans."Transaction Code"='D007')
                            OR (PeriodTrans."Transaction Code"='D008') OR (PeriodTrans."Transaction Code"='D009')
                            OR (PeriodTrans."Transaction Code"='D013') OR (PeriodTrans."Transaction Code"='D014')
                            OR (PeriodTrans."Transaction Code"='D019')
                        THEN
                        BEGIN
                           LoanRepay:=LoanRepay+PeriodTrans.Amount;
                           TotalLoanRepay:=TotalLoanRepay+PeriodTrans.Amount;
                        END;
                      // BOSA LOAN REPAYMENT DEDUCTION
                    */
                        // FOSA ADVANCES REPAYMENT DEDUCTION
                        // FOSA ADVANCES REPAYMENT DEDUCTION
                        // STAFF HOUSE LOAN
                        if (PeriodTrans."Transaction Code" = 'D020') then begin
                            HseLoan := HseLoan + PeriodTrans.Amount;
                            TotalHseLoan := TotalHseLoan + PeriodTrans.Amount;
                        end;
                        // STAFF HOUSE LOAN
                        //Interest Deduction************************START
                        /* IF (PeriodTrans."Group Order"=8) AND (PeriodTrans."Sub Group Order"=1) THEN
                         BEGIN
                           IntRepay:= IntRepay+PeriodTrans.Amount;
                           TotInt:=TotInt+PeriodTrans.Amount;
                         END;
                       */
                        // SHARES  CONTRIBUTION
                        /*IF (PeriodTrans."Transaction Code"='D001') THEN
                        BEGIN
                           ShareCont:=ShareCont+PeriodTrans.Amount;
                           TotalShareCont:=TotalShareCont+PeriodTrans.Amount;
                        END;*/
                        // SHARES CONTRIBUTION
                        //Total Deductions***********************
                        if (PeriodTrans."Group Order" = 8) and (PeriodTrans."Sub Group Order" = 9) then begin
                            TotalDeductions := TotalDeductions + PeriodTrans.Amount + NHIFDed + NSSFDed + PAYEDed;
                            ;
                            totTotalDeductions := totTotalDeductions + PeriodTrans.Amount;
                        end;
                        //Net Pay************************START
                        if (PeriodTrans."Group Order" = 9) and (PeriodTrans."Sub Group Order" = 0) then begin
                            if PeriodTrans.Amount < 0 then begin
                                NetPay := NetPay + 0;
                                TotNetPay := TotNetPay + 0;
                                negNet := PeriodTrans.Amount;
                                TotnegNet := TotnegNet + PeriodTrans.Amount;
                            end
                            else begin
                                //other non taxable*************START
                                /*  TransCodes.RESET;
                                  TransCodes.SETRANGE(TransCodes."Transaction Code",PeriodTrans."Transaction Code");
                                  TransCodes.SETRANGE(TransCodes.Taxable,FALSE) ;
                                  IF TransCodes.FINDFIRST  THEN
                                   BEGIN
                                     nonTaxAmount:=nonTaxAmount+PeriodTrans.Amount;
                                     //TotnonTaxAmount:=TotnonTaxAmount+PeriodTrans.Amount;
                                     TotnonTaxAmount:=TotnonTaxAmount+nonTaxAmount;
                                    END;
                                    */
                                //Statutory Deductions*************START
                                /*IF (PeriodTrans."Group Order"=7) THEN
                                BEGIN
                                   statutoryDed:=statutoryDed+PeriodTrans.Amount;
                                   TotstatutoryDed:=TotstatutoryDed+PeriodTrans.Amount;
                                END;
                                */
                                //objEmp.RESET;
                                //objEmp.SETRANGE(objEmp."No.","No.");
                                //IF objEmp.FIND('-') THEN BEGIN
                                //IF objEmp."Full / Part Time"=objEmp."Full / Part Time"::"Full Time" THEN BEGIN
                                //  NetPay:=NetPay+PeriodTrans.Amount;
                                //TotNetPay:=TotNetPay+PeriodTrans.Amount;
                                //END
                                //ELSE
                                //IF objEmp."Full / Part Time"=objEmp."Full / Part Time"::Contract THEN BEGIN
                                //  NetPay:=NetPay+(PeriodTrans.Amount-(PeriodTrans.Amount*0.3));
                                //TotNetPay:=TotNetPay+PeriodTrans.Amount;
                                //END;
                                //END;
                                //TotNetPay:=TotNetPay+PeriodTrans.Amount;
                            end;
                        end;
                    until PeriodTrans.Next = 0
                else
                    CurrReport.Skip;

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(DateFilter; DateFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Payroll Period';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        SelectedPeriod := DateFilter;//"prPayroll Periods".GETRANGEMIN("Date Opened");
                                     //"prPeriod Transactions".GETRANGEMIN("Payroll Period");
                                     //MESSAGE('%1',SelectedPeriod);
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod."Date Opened", SelectedPeriod);
        if objPeriod.Find('-') then begin
            PeriodName := objPeriod."Period Name";
        end;
        if CompanyInfo.Get then
            CompanyInfo.CalcFields(CompanyInfo.Picture);
        ;
        ReportsForNavPre;
    end;

    var
        strEmpName: Text[100];
        BasicPay: Decimal;
        Allow: Decimal;
        Grosspay: Decimal;
        PenGrat: Decimal;
        Nssf: Decimal;
        subTotNssf: Decimal;
        TotBasicPay: Decimal;
        TotAllow: Decimal;
        TotGrosspay: Decimal;
        TotPenGrat: Decimal;
        TotNssf: Decimal;
        PeriodTrans: Record "prPeriod Transactions.";
        TransCodes: Record "Payroll Transaction Code.";
        objPeriod: Record "Payroll Calender.";
        SelectedPeriod: Date;
        PeriodName: Text[50];
        HseAllow: Decimal;
        HseTotAllow: Decimal;
        HREmployee: Record "Payroll Employee.";
        subTotNHIF: Decimal;
        TotNHIF: Decimal;
        NHIF: Decimal;
        statutoryDed: Decimal;
        TotstatutoryDed: Decimal;
        subTotstatutoryDed: Decimal;
        TaxablePay: Decimal;
        TotTaxablePay: Decimal;
        SubTotTaxablePay: Decimal;
        Reliefs: Decimal;
        TotReliefs: Decimal;
        TaxCharged: Decimal;
        TotTaxCharged: Decimal;
        UnusedRelief: Decimal;
        SubTotUnusedRelief: Decimal;
        TotUnusedRelief: Decimal;
        PersonalRelief: Decimal;
        SubTotPersonalRelief: Decimal;
        TotPersonalRelief: Decimal;
        PAYETaxDeduction: Decimal;
        TotPAYETaxDeduction: Decimal;
        OtherDeduction: Decimal;
        TotOtherDeduction: Decimal;
        NetPay: Decimal;
        subTotNetPay: Decimal;
        TotNetPay: Decimal;
        subTotBasicPay: Decimal;
        subTotHseAllow: Decimal;
        SubTotGrosspay: Decimal;
        OtherAllow: Decimal;
        TotOtherAllow: Decimal;
        SubTotOtherAllow: Decimal;
        subtotTotalDeductions: Decimal;
        totTotalDeductions: Decimal;
        TotalDeductions: Decimal;
        companyHousing: Decimal;
        TotcompanyHousing: Decimal;
        SubTotcompanyHousing: Decimal;
        subTotReliefs: Decimal;
        SubTotTaxCharged: Decimal;
        subtotPAYETaxDeduction: Decimal;
        subTotOtherDeductions: Decimal;
        nonTaxAmount: Decimal;
        TotnonTaxAmount: Decimal;
        subTotnonTaxAmount: Decimal;
        nonstatutoryDed: Decimal;
        TotnonstatutoryDed: Decimal;
        subTotnonstatutoryDed: Decimal;
        Pension: Decimal;
        TotPension: Decimal;
        subTotPension: Decimal;
        negNet: Decimal;
        TotnegNet: Decimal;
        subTotnegNet: Decimal;
        strCodes: Code[10];
        CompanyInfo: Record "Company Information";
        PayrollMode: Option " ","Bank Transfer",Cheque,Cash,SACCO;
        Payroll_Summary_ListCaptionLbl: label 'Payroll Summary-List';
        Gross_Taxable_PayCaptionLbl: label 'Gross Taxable Pay';
        Non_Taxable_AmountCaptionLbl: label 'Non-Taxable Amount';
        Statutory_DeductionsCaptionLbl: label 'Statutory Deductions';
        Total_DeductionsCaptionLbl: label 'Total Deductions';
        Pension_Staff_Cont_CaptionLbl: label 'Pension Staff Cont.';
        Negative_Net_PayCaptionLbl: label 'Negative Net Pay';
        Other_AllowancesCaptionLbl: label 'Other Allowances';
        Net_PayCaptionLbl: label 'Net Pay';
        Basic_PayCaptionLbl: label 'Basic Pay';
        Employee_Name_CaptionLbl: label 'Employee Name:';
        Non_Statutory_DeductionsCaptionLbl: label 'Non Statutory Deductions';
        Employee_Code_CaptionLbl: label 'Employee Code:';
        Totals_CaptionLbl: label 'Totals:';
        Checked_byCaptionLbl: label 'Checked by';
        DateFilter: Date;
        PAYEDed: Decimal;
        NSSFDed: Decimal;
        NHIFDed: Decimal;
        TotPAYEDed: Decimal;
        TotNSSFDed: Decimal;
        TotNHIFDed: Decimal;
        objEmp: Record "Payroll Employee.";
        net: Record "Payroll Employee P9.";
        overtime: Decimal;
        OverTimeTotal: Decimal;
        Aggregate: Decimal;
        TotalAgg: Decimal;
        IntRepay: Decimal;
        TotInt: Decimal;
        HseLoan: Decimal;
        TotalHseLoan: Decimal;
        ADV12: Decimal;
        TotalADV12: Decimal;
        LoanRepay: Decimal;
        TotalLoanRepay: Decimal;
        TransAllow: Decimal;
        TotalTransAllow: Decimal;
        TotalSArrears: Decimal;
        SArrears: Decimal;
        ShareCont: Decimal;
        TotalShareCont: Decimal;
        StaffBonus: Decimal;
        TotalStaff: Decimal;
        UserSetup: Record "User Setup";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516350_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
