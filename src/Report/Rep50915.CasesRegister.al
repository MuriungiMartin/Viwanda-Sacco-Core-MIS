#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516915_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50915 "Cases Register."
{
    RDLCLayout = 'Layouts/CasesRegister..rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Cases Management"; "Cases Management")
        {
            DataItemTableView = sorting("Case Number") where(Status = filter(<> Open));
            column(ReportForNavId_3182; 3182) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(Vendor__No__; "Cases Management"."Case Number")
            {
            }
            column(Vendor_Name; "Cases Management"."Type of cases")
            {
            }
            column(Vendor__Account_Type_; "Cases Management"."Responsibility Center")
            {
            }
            column(Vendor_Status; "Cases Management".Status)
            {
            }
            column(Vendor__Balance__LCY__; "Cases Management"."Member No.")
            {
            }
            column(Vendor__ID_No__; "Cases Management"."Resource Assigned")
            {
            }
            column(Rno; Rno)
            {
            }
            column(Vendor__Staff_No_; "Cases Management"."Case Description")
            {
            }
            column(Vendor__Balance__LCY___Control1102760019; "Cases Management"."Action Taken")
            {
            }
            column(Accounts_BalancesCaption; Accounts_BalancesCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            trigger OnPreDataItem();
            begin
                /*
				//Hide Balances
				IF UsersID.GET(USERID) THEN BEGIN
				IF UsersID."Show Hiden" = FALSE THEN
				Vendor.SETRANGE(Vendor.Hide,FALSE);
				END;
				//Hide Balances
				 NAVVSFOX.RESET;
				 NAVVSFOX.SETRANGE(NAVVSFOX."Account No.",Vendor."No.");
				 IF NAVVSFOX.FIND('-') THEN BEGIN
				NAVVSFOX."SBal - Navision":=Vendor."Balance (LCY)";
				NAVVSFOX."ABal-FOX":=Vendor."Fosa Loan Bal.";
				NAVVSFOX.MODIFY;
				END;
				*/

            end;

            trigger OnAfterGetRecord();
            begin
                /*
				{
				RCount:=RCount+1;
				{
				//Hide Balances
				 NAVVSFOX.RESET;
				 NAVVSFOX.SETRANGE(NAVVSFOX."Account No.",Vendor."No.");
				 IF NAVVSFOX.FIND('-') THEN BEGIN
				 REPEAT
				NAVVSFOX."SBal - Navision":=Vendor."Balance (LCY)";
				NAVVSFOX."ABal-Navision":=Vendor."Fosa Loan Bal.";
				NAVVSFOX.Variance:=NAVVSFOX."SBal - Navision"-NAVVSFOX."SBal - FOX";
				NAVVSFOX.MODIFY;
				UNTIL NAVVSFOX.NEXT=0;
				END;
				}
				}
				RCount:=RCount+1;
				//Hide Balances
				 NAVVSFOX.RESET;
				 NAVVSFOX.SETRANGE(NAVVSFOX."Account No.",Vendor."No.");
				 IF NAVVSFOX.FIND('-') THEN BEGIN
				 REPEAT
				{
				NAVVSFOX."SBal - Navision":=0;
				NAVVSFOX.Variance:=0;
				}
				NAVVSFOX."SBal - Navision":=Vendor."Balance (LCY)";
				NAVVSFOX."ABal-Navision":=Vendor."Fosa Loan Bal.";
				NAVVSFOX.Variance:=ROUND(NAVVSFOX."SBal - Navision"-NAVVSFOX."SBal - FOX",1);
				NAVVSFOX."Variance 2":=NAVVSFOX."ABal-Navision"-NAVVSFOX."ABal-FOX";
				IF NAVVSFOX.Variance>NAVVSFOX."Variance 2" THEN BEGIN
				NAVVSFOX.VARIANCE3:=NAVVSFOX."ABal-Navision"-NAVVSFOX."ABal-FOX";
				END;
				NAVVSFOX.MODIFY;
				UNTIL NAVVSFOX.NEXT=0;
				END;
				*/
                Rno := Rno + 1;

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        AccountType: Record "Account Types-Saving Products";
        UsersID: Record User;
        RCount: Integer;
        Rno: Integer;
        Accounts_BalancesCaptionLbl: label 'Accounts Balances';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Account_No_CaptionLbl: label 'Account No.';
        No_CaptionLbl: label 'No.';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516915_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
