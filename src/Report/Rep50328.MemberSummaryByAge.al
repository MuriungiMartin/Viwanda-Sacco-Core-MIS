#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516328_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50328 "Member Summary By Age"
{
    RDLCLayout = 'Layouts/MemberSummaryByAge.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Members Register"; "Members Register")
        {
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(CountLessthan18; "Var<18Count")
            {
            }
            column(Lessthan18Pec; "Var<18%")
            {
            }
            column(Count18to24; "Var18<24Count")
            {
            }
            column(Pec18to24; "Var18<24%")
            {
            }
            column(Count25to34; "Var25<34Count")
            {
            }
            column(Pec25to34; "Var25<34%")
            {
            }
            column(Count35to44; "Var35<44Count")
            {
            }
            column(Pec35to44; "Var35<44%")
            {
            }
            column(Count45to54; "Var45<54Count")
            {
            }
            column(Pec45to54; "Var45<54%")
            {
            }
            column(Count55to64; "Var55<64Count")
            {
            }
            column(Pec55to64; "Var55<64%")
            {
            }
            column(Count65to74; "Var65<74Count")
            {
            }
            column(Pec65to74; "Var65<74%")
            {
            }
            column(CountGreaterthan75; "Var>75Count")
            {
            }
            column(Greaterthan75Pec; "Var>75%")
            {
            }
            trigger OnPreDataItem();
            begin
                Company.Get();
                Company.CalcFields(Company.Picture);
                if AsAt = 0D then
                    Error('Specify the As At Date on the Report');
            end;

            trigger OnAfterGetRecord();
            begin
                ObjMemberII.Reset;
                ObjMemberII.SetRange(ObjMemberII."No.", "Members Register"."No.");
                ObjMemberII.SetFilter(ObjMemberII."Date of Birth", '<>%1', 0D);
                if ObjMemberII.FindSet then begin
                    VarAge := AsAt - ObjMemberII."Date of Birth"; //Returns number of days old
                    VarAge2 := ROUND((VarAge / 365.2364), 1, '<');  //Returns number of years old as Decimal - Takes into Account Leap Years
                    ObjMemberII.Age := VarAge2;
                    ObjMemberII.Modify;
                end;
                FnRunGetMemberAgeBracket;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("As At"; AsAt)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        AsAt: Date;
        Company: Record "Company Information";
        SFactory: Codeunit "SURESTEP Factory";
        ObjGensetup: Record "Sacco General Set-Up";
        "Var<18Count": Integer;
        "Var<18%": Decimal;
        "Var18<24Count": Integer;
        "Var18<24%": Decimal;
        "Var25<34Count": Integer;
        "Var25<34%": Decimal;
        "Var35<44Count": Integer;
        "Var35<44%": Decimal;
        "Var45<54Count": Integer;
        "Var45<54%": Decimal;
        "Var55<64Count": Integer;
        "Var55<64%": Decimal;
        "Var65<74Count": Integer;
        "Var65<74%": Decimal;
        "Var>75Count": Integer;
        "Var>75%": Decimal;
        ObjMembers: Record "Members Register";
        CurrReport_PAGENOCaptionLbl: label 'Page';
        RISK_CLASSIFICATION_OF_ASSETS_AND_PROVISIONINGCaptionLbl: label 'RISK CLASSIFICATION OF ASSETS AND PROVISIONING';
        FORM_4CaptionLbl: label 'FORM 4';
        SASRA_2_004CaptionLbl: label 'SASRA 2/004';
        R__46_CaptionLbl: label 'R.(46)';
        ObjMemberII: Record "Members Register";
        VarAge: Integer;
        VarAge2: Integer;

    local procedure FnRunGetMemberAgeBracket()
    begin
        ObjGensetup.Get();
        //======================================================== Less than 18
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '<%1', 18);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var<18Count" := ObjMembers.Count;
            "Var<18%" := ("Var<18Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================18 to 24
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 18, 24);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var18<24Count" := ObjMembers.Count;
            "Var18<24%" := ("Var18<24Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================25 to 34
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 25, 34);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var25<34Count" := ObjMembers.Count;
            "Var25<34%" := ("Var25<34Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================35 to 44
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 35, 44);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var35<44Count" := ObjMembers.Count;
            "Var35<44%" := ("Var35<44Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================45 to 54
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 45, 54);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var45<54Count" := ObjMembers.Count;
            "Var45<54%" := ("Var45<54Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================55 to 64
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 55, 64);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var55<64Count" := ObjMembers.Count;
            "Var55<64%" := ("Var55<64Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================65 to 74
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1&<=%2', 65, 74);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var65<74Count" := ObjMembers.Count;
            "Var65<74%" := ("Var65<74Count" / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================75 and Above
        ObjMembers.Reset;
        ObjMembers.SetFilter(ObjMembers.Age, '>=%1', 75);
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            "Var>75Count" := ObjMembers.Count;
            "Var>75%" := ("Var>75Count" / ObjGensetup."Total Membership") * 100;
        end;
    end;

    local procedure FnRunUpdateMemberAge()
    begin
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516328_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
