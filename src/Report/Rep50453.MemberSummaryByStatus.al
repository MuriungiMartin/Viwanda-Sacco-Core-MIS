#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
//51516453_v6_3_0_2259) { }
// Autogenerated code - do not delete or modify -->

Report 50453 "Member Summary By Status"
{
    RDLCLayout = 'Layouts/MemberSummaryByStatus.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "Date Filter";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }

            column(UserId; UserId)
            {
            }
            column(VarActiveCount; VarActiveCount)
            {
            }
            column(VarActivePercentage; VarActivePercentage)
            {
            }
            column(VarAwaitingExitCount; VarAwaitingExitCount)
            {
            }
            column(VarAwaitingExitPercentage; VarAwaitingExitPercentage)
            {
            }
            column(VarExitedCount; VarExitedCount)
            {
            }
            column(VarExitedPercentage; VarExitedPercentage)
            {
            }
            column(VarDormantCount; VarDormantCount)
            {
            }
            column(VarDormantPercentage; VarDormantPercentage)
            {
            }
            column(VarDeceasedCount; VarDeceasedCount)
            {
            }
            column(VarDeceasedPercentage; VarDeceasedPercentage)
            {
            }
            trigger OnPreDataItem();
            begin
                Company.Get();
                Company.CalcFields(Company.Picture);
                Customer.SetFilter(Customer."Registration Date", Customer.GetFilter("Date Filter"));
            end;

            trigger OnAfterGetRecord();
            begin
                FnRunGetStatusCategory;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            //:= false;
        end;
    }

    trigger OnInitReport()
    begin
        ;


    end;

    trigger OnPostReport()
    begin
        ;

    end;

    trigger OnPreReport()
    begin
        ;

    end;

    var
        AsAt: Date;
        Company: Record "Company Information";
        SFactory: Codeunit "SURESTEP Factory";
        ObjGensetup: Record "Sacco General Set-Up";
        CurrReport_PAGENOCaptionLbl: label 'Page';
        RISK_CLASSIFICATION_OF_ASSETS_AND_PROVISIONINGCaptionLbl: label 'RISK CLASSIFICATION OF ASSETS AND PROVISIONING';
        FORM_4CaptionLbl: label 'FORM 4';
        SASRA_2_004CaptionLbl: label 'SASRA 2/004';
        R__46_CaptionLbl: label 'R.(46)';
        ObjMembers: Record Customer;
        VarActiveCount: Integer;
        VarActivePercentage: Decimal;
        VarAwaitingExitCount: Integer;
        VarAwaitingExitPercentage: Decimal;
        VarExitedCount: Integer;
        VarExitedPercentage: Decimal;
        VarDormantCount: Integer;
        VarDormantPercentage: Decimal;
        VarDeceasedCount: Integer;
        VarDeceasedPercentage: Decimal;

    local procedure FnRunGetStatusCategory()
    begin
        ObjGensetup.Get();
        //======================================================== Active
        ObjMembers.Reset;
        ObjMembers.SetRange(ObjMembers.Status, ObjMembers.Status::Active);
        ObjMembers.SetFilter(ObjMembers."Registration Date", Customer.GetFilter(Customer."Date Filter"));
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            VarActiveCount := ObjMembers.Count;
            VarActivePercentage := (VarActiveCount / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================Awaiting Exit
        ObjMembers.Reset;
        ObjMembers.SetRange(ObjMembers.Status, ObjMembers.Status::"Awaiting Exit");
        ObjMembers.SetFilter(ObjMembers."Registration Date", Customer.GetFilter(Customer."Date Filter"));
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            VarAwaitingExitCount := ObjMembers.Count;
            VarAwaitingExitPercentage := (VarAwaitingExitCount / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================Exited
        ObjMembers.Reset;
        ObjMembers.SetRange(ObjMembers.Status, ObjMembers.Status::Exited);
        ObjMembers.SetFilter(ObjMembers."Registration Date", Customer.GetFilter(Customer."Date Filter"));
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            VarExitedCount := ObjMembers.Count;
            VarExitedPercentage := (VarExitedCount / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================Dormant
        ObjMembers.Reset;
        ObjMembers.SetRange(ObjMembers.Status, ObjMembers.Status::Dormant);
        ObjMembers.SetFilter(ObjMembers."Registration Date", Customer.GetFilter(Customer."Date Filter"));
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            VarDormantCount := ObjMembers.Count;
            VarDormantPercentage := (VarDormantCount / ObjGensetup."Total Membership") * 100;
        end;
        //========================================================Deceased
        ObjMembers.Reset;
        ObjMembers.SetRange(ObjMembers.Status, ObjMembers.Status::Deceased);
        ObjMembers.SetFilter(ObjMembers."Registration Date", Customer.GetFilter(Customer."Date Filter"));
        if ObjMembers.FindSet then begin
            ObjGensetup.CalcFields("Total Membership");
            VarDeceasedCount := ObjMembers.Count;
            VarDeceasedPercentage := (VarDeceasedCount / ObjGensetup."Total Membership") * 100;
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    //51516453_v6_3_0_2259;






    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
