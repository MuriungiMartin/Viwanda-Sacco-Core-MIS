#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516256_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50256 "Risk Class Of Assets & Prov"
{
    RDLCLayout = 'Layouts/RiskClassOfAssets&Prov.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Company; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; Company.Name)
            {
            }
            column(AsAt; AsAt)
            {
            }
            column(LoanCount; LoanCount)
            {
            }
            column(LoanCountSubstandard; LoanCountSubstandard)
            {
            }
            column(LoanCountDoubtful; LoanCountDoubtful)
            {
            }
            column(LoanCountWatch; LoanCountWatch)
            {
            }
            column(LoanCountLoss; LoanCountLoss)
            {
            }
            column(OutstandingLoanPer; OutstandingLoanPer)
            {
            }
            column(OutstandingLoanwatch; OutstandingLoanwatch)
            {
            }
            column(OutstandingLoandoubtful; OutstandingLoandoubtful)
            {
            }
            column(OutstandingLoanSub; OutstandingLoanSub)
            {
            }
            column(OutstandingLoanloss; OutstandingLoanloss)
            {
            }
            column(LoanCountResch; LoanCountResch)
            {
            }
            column(OutstandingLoanPerResc; OutstandingLoanPerResc)
            {
            }
            column(LoanCountWatchResc; LoanCountWatchResc)
            {
            }
            column(OutstandingLoanwatchResc; OutstandingLoanwatchResc)
            {
            }
            column(LoanCountDoubtfulResc; LoanCountDoubtfulResc)
            {
            }
            column(OutstandingLoandoubtfulResc; OutstandingLoandoubtfulResc)
            {
            }
            column(LoanCountSubstandardResc; LoanCountSubstandardResc)
            {
            }
            column(OutstandingLoanSubResc; OutstandingLoanSubResc)
            {
            }
            column(LoanCountLossRec; LoanCountLossRec)
            {
            }
            column(OutstandingLoanlossResc; OutstandingLoanlossResc)
            {
            }
            column(ClassifiedNonRescheduledper; ClassifiedNonRescheduledper)
            {
            }
            column(ClassifiedNonRescheduledDoubtful; ClassifiedNonRescheduledDoubtful)
            {
            }
            column(ClassifiedNonRescheduledLoss; ClassifiedNonRescheduledLoss)
            {
            }
            column(ClassifiedNonRescheduledsubstandard; ClassifiedNonRescheduledsubstandard)
            {
            }
            column(ClassifiedNonRescheduledWatch; ClassifiedNonRescheduledWatch)
            {
            }
            column(ClassifiedRescheduledLoss; ClassifiedRescheduledLoss)
            {
            }
            column(ClassifiedRescheduledPer; ClassifiedRescheduledPer)
            {
            }
            column(ClassifiedRescheduledSubstandard; ClassifiedRescheduledSubstandard)
            {
            }
            column(ClassifiedRescheduledWatch; ClassifiedRescheduledWatch)
            {
            }
            column(ClassifiedRescheduledDoubtful; ClassifiedRescheduledDoubtful)
            {
            }
            column(subtotal; subtotal)
            {
            }
            column(TotalClassffiedRecheduled; TotalClassffiedRecheduled)
            {
            }
            column(TotalClassffied; TotalClassffied)
            {
            }
            column(subtotalRescheduled; subtotalRescheduled)
            {
            }
            column(Subtotalcount; Subtotalcount)
            {
            }
            column(SubtotalcountResc; SubtotalcountResc)
            {
            }
            column(GRANDTOTAL; GRANDTOTAL)
            {
            }
            column(GRANDTOTALCOUNT; GRANDTOTALCOUNT)
            {
            }
            column(GRANDTOTALCLASSIF; GRANDTOTALCLASSIF)
            {
            }
            column(YearBeginDate; YearBeginDate)
            {
            }
            column(FinancialYear; FinancialYear)
            {
            }
            trigger OnAfterGetRecord();
            begin
                //DateFilter:='..'+FORMAT(CALCDATE('-CM-1D',AsAt));
                DateFilter := '..' + Format(AsAt);
                FinancialYear := Date2dmy(AsAt, 3);
                YearBeginDate := CalcDate('-CY', AsAt);
                //PrevMonthDate:=CUSurefactory.KnGetPreviousMonthLastDate(LoansRegister."Loan  No.",AsAt);
                //DateFilter:='..'+FORMAT(PrevMonthDate);
                //MESSAGE('%1',DateFilter);
                LoanCount := 0;
                OutstandingLoanPer := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, false);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Perfoming);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoansRegister.CalcFields("Outstanding Balance");
                        //IF LoansRegister."Outstanding Balance" <> 0 then
                        LoanCount := LoanCount + 1;
                        OutstandingLoanPer += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                // MESSAGE('%1',LoanCount);
                LoanCountWatch := 0;
                OutstandingLoanwatch := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, false);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Watch);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountWatch := LoanCountWatch + 1;
                        OutstandingLoanwatch += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountDoubtful := 0;
                OutstandingLoandoubtful := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, false);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Doubtful);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountDoubtful := LoanCountDoubtful + 1;
                        OutstandingLoandoubtful += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountSubstandard := 0;
                OutstandingLoanSub := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, false);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Substandard);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountSubstandard := LoanCountSubstandard + 1;
                        OutstandingLoanSub += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountLoss := 0;
                OutstandingLoanloss := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, false);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Loss);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountLoss := LoanCountLoss + 1;
                        OutstandingLoanloss += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                //rescheduled loans
                LoanCountResch := 0;
                OutstandingLoanPerResc := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, true);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Perfoming);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountResch := LoanCountResch + 1;
                        OutstandingLoanPerResc += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountWatchResc := 0;
                OutstandingLoanwatchResc := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, true);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Watch);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountWatchResc := LoanCountWatchResc + 1;
                        OutstandingLoanwatchResc += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountDoubtfulResc := 0;
                OutstandingLoandoubtfulResc := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, true);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Doubtful);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountDoubtfulResc := LoanCountDoubtfulResc + 1;
                        OutstandingLoandoubtfulResc += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountSubstandardResc := 0;
                OutstandingLoanSubResc := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, true);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Substandard);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountSubstandardResc := LoanCountSubstandardResc + 1;
                        OutstandingLoanSubResc += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                LoanCountLossRec := 0;
                OutstandingLoanlossResc := 0;
                LoansRegister.Reset;
                LoansRegister.SetRange(LoansRegister.Rescheduled, true);
                LoansRegister.SetFilter(LoansRegister."Date filter", DateFilter);
                LoansRegister.SetFilter(LoansRegister."Loans Category", '%1', LoansRegister."loans category"::Loss);
                LoansRegister.SetFilter(LoansRegister."Outstanding Balance", '<>%1', 0);
                LoansRegister.SetAutocalcFields("Outstanding Balance");
                if LoansRegister.FindSet then begin
                    repeat
                        LoanCountLossRec := LoanCountLossRec + 1;
                        OutstandingLoanlossResc += LoansRegister."Outstanding Balance";
                    until LoansRegister.Next = 0;
                end;
                ClassifiedNonRescheduledper := ROUND(OutstandingLoanPer * 1 / 100, 0.01, '<');
                ClassifiedNonRescheduledDoubtful := ROUND(OutstandingLoandoubtful * 50 / 100, 0.01, '<');
                ClassifiedNonRescheduledLoss := ROUND(OutstandingLoanloss * 100 / 100, 0.01, '<');
                ClassifiedNonRescheduledsubstandard := ROUND(OutstandingLoanSub * 25 / 100, 0.01, '<');
                ClassifiedNonRescheduledWatch := ROUND(OutstandingLoanwatch * 5 / 100, 0.01, '<');
                ClassifiedRescheduledLoss := ROUND(OutstandingLoanlossResc * 100 / 100, 0.01, '<');
                ClassifiedRescheduledPer := ROUND(OutstandingLoanPerResc * 1 / 100, 0.01, '<');
                ClassifiedRescheduledSubstandard := ROUND(OutstandingLoanSubResc * 25 / 100, 0.01, '<');
                ClassifiedRescheduledWatch := ROUND(OutstandingLoanwatchResc * 5 / 100, 0.01, '<');
                ClassifiedRescheduledDoubtful := ROUND(OutstandingLoandoubtfulResc * 50 / 100, 0.01, '<');
                subtotal := OutstandingLoandoubtful + OutstandingLoanloss + OutstandingLoanPer + OutstandingLoanSub + OutstandingLoanwatch;
                subtotalRescheduled := OutstandingLoandoubtfulResc + OutstandingLoanlossResc + OutstandingLoanPerResc + OutstandingLoanSubResc + OutstandingLoanwatchResc;
                TotalClassffied := ClassifiedNonRescheduledDoubtful + ClassifiedNonRescheduledLoss + ClassifiedNonRescheduledper + ClassifiedNonRescheduledsubstandard + ClassifiedNonRescheduledWatch;
                TotalClassffiedRecheduled := ClassifiedRescheduledDoubtful + ClassifiedRescheduledPer + ClassifiedRescheduledSubstandard + ClassifiedRescheduledWatch + ClassifiedRescheduledLoss;
                Subtotalcount := LoanCount + LoanCountDoubtful + LoanCountLoss + LoanCountSubstandard + LoanCountWatch;
                SubtotalcountResc := LoanCountDoubtfulResc + LoanCountLossRec + LoanCountResch + LoanCountSubstandardResc + LoanCountWatchResc;
                GRANDTOTAL := subtotal + subtotalRescheduled;
                GRANDTOTALCOUNT := Subtotalcount + SubtotalcountResc;
                GRANDTOTALCLASSIF := TotalClassffied + TotalClassffiedRecheduled;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(AsAt; AsAt)
                {
                    ApplicationArea = Basic;
                    Caption = 'AsAt';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        LoansRegister: Record "Loans Register";
        LoanCount: Integer;
        DateFilter: Text;
        AsAt: Date;
        LoanCountWatch: Integer;
        FinancialYear: Integer;
        YearBeginDate: Date;
        LoanCountDoubtful: Integer;
        LoanCountSubstandard: Integer;
        LoanCountLoss: Integer;
        OutstandingLoanPer: Decimal;
        OutstandingLoanwatch: Decimal;
        OutstandingLoanSub: Decimal;
        OutstandingLoanloss: Decimal;
        OutstandingLoandoubtful: Decimal;
        LoanCountResch: Integer;
        OutstandingLoanPerResc: Decimal;
        LoanCountWatchResc: Integer;
        OutstandingLoanwatchResc: Decimal;
        LoanCountDoubtfulResc: Integer;
        OutstandingLoandoubtfulResc: Decimal;
        LoanCountSubstandardResc: Integer;
        OutstandingLoanSubResc: Decimal;
        LoanCountLossRec: Integer;
        OutstandingLoanlossResc: Decimal;
        ClassifiedNonRescheduledper: Decimal;
        ClassifiedNonRescheduledWatch: Decimal;
        ClassifiedNonRescheduledDoubtful: Decimal;
        ClassifiedNonRescheduledsubstandard: Decimal;
        ClassifiedNonRescheduledLoss: Decimal;
        ClassifiedRescheduledPer: Decimal;
        ClassifiedRescheduledWatch: Decimal;
        ClassifiedRescheduledDoubtful: Decimal;
        ClassifiedRescheduledSubstandard: Decimal;
        ClassifiedRescheduledLoss: Decimal;
        subtotal: Decimal;
        subtotalRescheduled: Decimal;
        TotalClassffied: Decimal;
        TotalClassffiedRecheduled: Decimal;
        Subtotalcount: Integer;
        SubtotalcountResc: Integer;
        GRANDTOTALCLASSIF: Decimal;
        GRANDTOTAL: Decimal;
        GRANDTOTALCOUNT: Integer;
        CUSurefactory: Codeunit "SURESTEP Factory";
        PrevMonthDate: Date;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516256_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
