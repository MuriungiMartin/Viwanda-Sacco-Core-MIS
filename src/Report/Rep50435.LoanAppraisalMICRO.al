#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516435_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50435 "Loan Appraisal MICRO"
{
    RDLCLayout = 'Layouts/LoanAppraisalMICRO.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Loans; "Loans Register")
        {
            RequestFilterFields = "Loan  No.";
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(GroupCode_Loans; Loans."Group Code")
            {
            }
            column(IDNO_Loans; Loans."ID NO")
            {
            }
            column(ClientName_Loans; Loans."Client Name")
            {
            }
            column(LoanNo_Loans; Loans."Loan  No.")
            {
            }
            column(ApplicationDate_Loans; Loans."Application Date")
            {
            }
            column(LoanProductType_Loans; Loans."Loan Product Type")
            {
            }
            column(ClientCode_Loans; Loans."Client Code")
            {
            }
            column(GroupCode; Loans."Group Code")
            {
            }
            column(Savings_Loans; Loans.Savings)
            {
            }
            column(ExistingLoan_Loans; Loans."Existing Loan")
            {
            }
            column(RequestedAmount_Loans; Loans."Requested Amount")
            {
            }
            column(ApprovedAmount_Loans; Loans."Approved Amount")
            {
            }
            column(LoanType; Loans."Loan Product Type")
            {
            }
            column(BranchCode; Loans."Branch Code")
            {
            }
            column(Installments; Loans.Installments)
            {
            }
            column(OutstandingBalance_Loans; Loans."Outstanding Balance")
            {
            }
            column(IssuedDate_Loans; Loans."Issued Date")
            {
            }
            column(Repayment; Loans.Repayment)
            {
            }
            column(GrossProfit; GrossProfit)
            {
            }
            column(NetCome; NetCome)
            {
            }
            column(FamilyExpenses; FamilyExpenses)
            {
            }
            column(AvailableBal; AvailableBal)
            {
            }
            column(ApplicantBal; ApplicantBal)
            {
            }
            column(LnNo; "LnNo.")
            {
            }
            column(LoanBal; LoanBal)
            {
            }
            column(FOSALoanBal; FOSALoanBal)
            {
            }
            column(FOSALnNo; "FOSALnNo.")
            {
            }
            column(CompanyPicture; CompanyInfo.Picture)
            {
            }
            column(TotalSal; TotalSal)
            {
            }
            column(TotalSalCat; TotalSalCat)
            {
            }
            column(CompanyName; CompanyInfo.Name)
            {
            }
            column(TShares; TShares)
            {
            }
            column(DEpMultiplier; DEpMultiplier)
            {
            }
            dataitem("Appraisal Salary Details"; "Loan Appraisal Salary Details")
            {
                DataItemLink = "Client Code" = field("Client Code"), "Loan No" = field("Loan  No.");
                column(ReportForNavId_1000000086; 1000000086) { } // Autogenerated by ForNav - Do not delete
                column(AppraisalClientCode; "Appraisal Salary Details"."Client Code")
                {
                }
                column(AppraisalCode; "Appraisal Salary Details".Code)
                {
                }
                column(AppraisalDescription; "Appraisal Salary Details".Description)
                {
                }
                column(AppraisalTypes; "Appraisal Salary Details".Type)
                {
                }
                column(AppraisalAmount; "Appraisal Salary Details".Amount)
                {
                }
                column(AppraisalLoanNo; "Appraisal Salary Details"."Loan No")
                {
                }
            }
            dataitem(AppraisalSalaryDetails2; "Loan Appraisal Salary Details")
            {
                DataItemLink = "Client Code" = field("Client Code"), "Loan No" = field("Loan  No.");
                column(ReportForNavId_1000000077; 1000000077) { } // Autogenerated by ForNav - Do not delete
                column(ClientCode_AppraisalSalaryDetails2; AppraisalSalaryDetails2."Client Code")
                {
                }
                column(Code_AppraisalSalaryDetails2; AppraisalSalaryDetails2.Code)
                {
                }
                column(Description_AppraisalSalaryDetails2; AppraisalSalaryDetails2.Description)
                {
                }
                column(Type_AppraisalSalaryDetails2; AppraisalSalaryDetails2.Type)
                {
                }
                column(Amount_AppraisalSalaryDetails2; AppraisalSalaryDetails2.Amount)
                {
                }
                column(LoanNo_AppraisalSalaryDetails2; AppraisalSalaryDetails2."Loan No")
                {
                }
                column(SNo; SNo)
                {
                }
                column(NetCome2; NetCome)
                {
                }
                column(FamilyExpenses2; FamilyExpenses)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    SNo += 1;
                    RecAmount := NetCome + AppraisalSalaryDetails2.Amount - FamilyExpenses;
                    Message('This is NETCOME %1', NetCome);
                    Message('This is salary.amount %1', AppraisalSalaryDetails2.Amount);
                    Message('This is family exp. %1', FamilyExpenses);
                end;

            }
            dataitem("Micro Profitability Analysis"; "Micro Profitability Analysis")
            {
                DataItemLink = "Loan No." = field("Loan  No."), "Client Code" = field("Client Code");
                column(ReportForNavId_1000000068; 1000000068) { } // Autogenerated by ForNav - Do not delete
                column(MicroAverageMonthlySales_MicroProfitabilityAnalysis; "Micro Profitability Analysis"."Average Monthly Sales")
                {
                }
                column(MicroAverageMonthlyPurchase_MicroProfitabilityAnalysis; "Micro Profitability Analysis"."Average Monthly Purchase")
                {
                }
                column(MicroGrossProfit_MicroProfitabilityAnalysis; "Micro Profitability Analysis"."Gross Profit")
                {
                }
                column(MicroAmount_MicroProfitabilityAnalysis; "Micro Profitability Analysis".Amount)
                {
                }
                column(ProfDescription; "Micro Profitability Analysis".Description)
                {
                }
                column(CodeType; "Micro Profitability Analysis"."Code Type")
                {
                }
                column(MicroCode; "Micro Profitability Analysis".Code)
                {
                }
            }
            dataitem("Appraisal Expenses-Micro"; "Appraisal Expenses-Micro")
            {
                DataItemLink = "Client Code" = field("Client Code"), Loan = field("Loan  No.");
                column(ReportForNavId_1000000033; 1000000033) { } // Autogenerated by ForNav - Do not delete
                column(ExpenseCode_AppraisalExpensesMicro; "Appraisal Expenses-Micro".Code)
                {
                }
                column(ExpenseDescription_AppraisalExpensesMicro; "Appraisal Expenses-Micro".Description)
                {
                }
                column(ExpenseType_AppraisalExpensesMicro; "Appraisal Expenses-Micro".Type)
                {
                }
                column(ExpenseAmount_AppraisalExpensesMicro; "Appraisal Expenses-Micro".Amount)
                {
                }
            }
            dataitem(LoanApp; "Member Ledger Entry")
            {
                DataItemLink = "Customer No." = field("Client Code");
                column(ReportForNavId_1000000047; 1000000047) { } // Autogenerated by ForNav - Do not delete
                column(LedAmount_LoanApp; LoanApp.Amount)
                {
                }
                column(LedLoanNo_LoanApp; LoanApp."Loan No")
                {
                }
            }
            dataitem("Loans Guarantee Details"; "Loans Guarantee Details")
            {
                DataItemLink = "Loan No" = field("Loan  No.");
                column(ReportForNavId_5140; 5140) { } // Autogenerated by ForNav - Do not delete
                column(Amont_Guarant; "Loans Guarantee Details"."Loan No")
                {
                }
                column(Name; "Loans Guarantee Details".Name)
                {
                }
                column(AmontGuaranteed_LoansGuaranteeDetails; "Loans Guarantee Details"."Amont Guaranteed")
                {
                }
                column(Guarantor_Memb_No; "Loans Guarantee Details"."Member No")
                {
                }
                column(G_Shares; "Loans Guarantee Details".Shares)
                {
                }
                column(Loan_Guarant; "Loans Guarantee Details"."Loan No")
                {
                }
                column(Guarantor_Outstanding; "Loans Guarantee Details"."Guarantor Outstanding")
                {
                }
                column(Employer_code; "Loans Guarantee Details"."Employer Code")
                {
                }
                column(TShares2; TShares)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    if CustRecord.Get("Loans Guarantee Details"."Member No") then begin
                        //CustRecord.CALCFIELDS(CustRecord."Current Savings",CustRecord."Principal Balance");
                        TShares := TShares + CustRecord."Current Savings";
                        TLoans := TLoans + CustRecord."Principal Balance";
                    end;
                    //GuaranteedAmount:=0;
                    LoanG.Reset;
                    LoanG.SetRange(LoanG."Member No", "Member No");
                    if LoanG.Find('-') then begin
                        repeat
                            LoanG.CalcFields(LoanG."Outstanding Balance", LoanG."Guarantor Outstanding");
                            if LoanG."Outstanding Balance" > 0 then begin
                                GuaranteedAmount := GuaranteedAmount + LoanG."Amont Guaranteed";
                                GuarOutstanding := LoanG."Guarantor Outstanding";
                            end;
                        until LoanG.Next = 0;
                    end;
                    TGuaranteedAmount := TGuaranteedAmount + GuaranteedAmount;
                end;

            }
            dataitem("Loan Collateral Details"; "Loan Collateral Details")
            {
                DataItemLink = "Loan No" = field("Loan  No.");
                column(ReportForNavId_1000000099; 1000000099) { } // Autogenerated by ForNav - Do not delete
                column(LoanNo_LoanCollateralDetails; "Loan Collateral Details"."Loan No")
                {
                }
                column(Type_LoanCollateralDetails; "Loan Collateral Details".Type)
                {
                }
                column(SecurityDetails_LoanCollateralDetails; "Loan Collateral Details"."Security Details")
                {
                }
                column(Remarks_LoanCollateralDetails; "Loan Collateral Details".Remarks)
                {
                }
                column(LoanType_LoanCollateralDetails; "Loan Collateral Details"."Loan Type")
                {
                }
                column(Value_LoanCollateralDetails; "Loan Collateral Details".Value)
                {
                }
                column(GuaranteeValue_LoanCollateralDetails; "Loan Collateral Details"."Guarantee Value")
                {
                }
                column(Code_LoanCollateralDetails; "Loan Collateral Details".Code)
                {
                }
                column(Category_LoanCollateralDetails; "Loan Collateral Details".Category)
                {
                }
                column(CollateralMultiplier_LoanCollateralDetails; "Loan Collateral Details"."Collateral Multiplier")
                {
                }
                column(ViewDocument_LoanCollateralDetails; "Loan Collateral Details"."View Document")
                {
                }
                column(AssesmentDone_LoanCollateralDetails; "Loan Collateral Details"."Assesment Done")
                {
                }
                column(AccountNo_LoanCollateralDetails; "Loan Collateral Details"."Account No")
                {
                }
            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.Get;
                CompanyInfo.CalcFields(CompanyInfo.Picture);
            end;

            trigger OnAfterGetRecord();
            begin
                if Cust.Get(Loans."Client Code") then begin
                    Cust.CalcFields(Cust."Current Shares");
                    Cshares := Cust."Current Shares";
                    if LoanType.Get(Loans."Loan Product Type") then   //BEGIN
                                                                      //QUALIFICATION AS PER DEPOSITS
                                                                      //IF "Loan Product Type"='J/L' THEN BEGIN
                                                                      //DEpMultiplier:=LoanType."Shares Multiplier"*(Cshares+"Jaza Deposits"+"Deposit Reinstatement");
                                                                      //END ELSE BEGIN
                        DEpMultiplier := LoanType."Shares Multiplier" * Cshares;
                    //END;
                end;
                Message('recommended amount is %1', RecAmount);
                Loans."Recommended Amount" := DEpMultiplier;
                Modify;
                //NetCome:=0;
                //TotalSal:=0;
                //TotalSales:=0;
                //GrossProfit:=0;
                AppraisalSals.Reset;
                AppraisalSals.SetRange(AppraisalSals."Client Code", "Client Code");
                if AppraisalSals.FindFirst then begin
                    repeat
                        TotalSal := TotalSal + AppraisalSals.Amount;
                    until AppraisalSals.Next = 0;
                end;
                AppraisalSalDet.Reset;
                AppraisalSalDet.SetRange(AppraisalSalDet."Client Code", "Client Code");
                //AppraisalSalDet.SETRANGE(AppraisalSalDet."Appraisal Type",AppraisalSalDet."Appraisal Type"::Rental,AppraisalSalDet."Appraisal Type"::Farming);
                if AppraisalSalDet.FindFirst then begin
                    repeat
                        TotalSalCat := TotalSalCat + AppraisalSalDet.Amount;
                    until AppraisalSalDet.Next = 0;
                end;
                MicroProftAnalysis.Reset;
                MicroProftAnalysis.SetRange(MicroProftAnalysis."Loan No.", "Loan  No.");
                MicroProftAnalysis.SetRange(MicroProftAnalysis."Client Code", "Client Code");
                MicroProftAnalysis.SetRange(MicroProftAnalysis.Code, 'SALES');
                if MicroProftAnalysis.Find('-') then begin
                    TotalSales := MicroProftAnalysis.Amount;
                end;
                MicroProfitAnalysis.Reset;
                MicroProfitAnalysis.SetRange(MicroProfitAnalysis."Loan No.", "Loan  No.");
                MicroProfitAnalysis.SetRange(MicroProfitAnalysis."Client Code", "Client Code");
                MicroProfitAnalysis.SetRange(MicroProfitAnalysis.Code, 'PURCHASES');
                if MicroProfitAnalysis.Find('-') then begin
                    TotalPurchase := MicroProfitAnalysis.Amount;
                end;
                GrossProfit := TotalSales - TotalPurchase;
                BussExpenses.Reset;
                BussExpenses.SetRange(BussExpenses.Loan, "Loan  No.");
                BussExpenses.SetRange(BussExpenses."Client Code", "Client Code");
                BussExpenses.SetRange(BussExpenses.Type, BussExpenses.Type::"Business Expenses");
                if BussExpenses.Find('-') then begin
                    repeat
                        TotalBusExpenses := TotalBusExpenses + BussExpenses.Amount;
                    until BussExpenses.Next = 0;
                end;
                FamExpenses.Reset;
                FamExpenses.SetRange(FamExpenses.Loan, "Loan  No.");
                FamExpenses.SetRange(FamExpenses."Client Code", "Client Code");
                FamExpenses.SetRange(FamExpenses.Type, FamExpenses.Type::"Family Expenses");
                if FamExpenses.Find('-') then begin
                    repeat
                        TotalFamExpenses := TotalFamExpenses + FamExpenses.Amount;
                    until FamExpenses.Next = 0;
                end;
                NetCome := GrossProfit - TotalBusExpenses;
                FamilyExpenses := TotalFamExpenses;
                AvailableBal := NetCome + TotalSalCat;
                ApplicantBal := AvailableBal - Repayment;
                LoanApps.Reset;
                LoanApps.SetRange(LoanApps."ID NO", "ID NO");
                LoanApps.SetRange(LoanApps.Posted, true);
                LoanApps.SetRange(LoanApps.Source, LoanApps.Source::BOSA);
                if LoanApps.Find('-') then begin
                    LoanApps.CalcFields(LoanApps."Outstanding Balance");
                    "LnNo." := LoanApps."Loan  No.";
                    LoanBal := LoanApps."Outstanding Balance";
                end;
                LnApps.Reset;
                LnApps.SetRange(LnApps."ID NO", "ID NO");
                LnApps.SetRange(LnApps.Posted, true);
                LnApps.SetRange(LnApps.Source, LnApps.Source::FOSA);
                if LnApps.Find('-') then begin
                    LnApps.CalcFields(LnApps."Outstanding Balance");
                    if LnApps."Outstanding Balance" > 0 then begin
                        "FOSALnNo." := LnApps."Loan  No.";
                        FOSALoanBal := LnApps."Outstanding Balance";
                    end;
                end;
                Modify;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        TGuaranteedAmount: Decimal;
        GuarOutstanding: Decimal;
        GuaranteedAmount: Decimal;
        LoanG: Record "Loans Guarantee Details";
        TLoans: Decimal;
        TShares: Decimal;
        CustRecord: Record "Members Register";
        GrossProfit: Decimal;
        MicroProftAnalysis: Record "Micro Profitability Analysis";
        TotalPurchase: Decimal;
        TotalSales: Decimal;
        MicroProfitAnalysis: Record "Micro Profitability Analysis";
        BussExpenses: Record "Appraisal Expenses-Micro";
        TotalBusExpenses: Decimal;
        TotalFamExpenses: Decimal;
        FamExpenses: Record "Appraisal Expenses-Micro";
        TotalBussFamExpenses: Decimal;
        NetCome: Decimal;
        FamilyExpenses: Decimal;
        AvailableBal: Decimal;
        ApplicantBal: Decimal;
        LoanApps: Record "Loans Register";
        "LnNo.": Code[20];
        LoanBal: Decimal;
        LnApps: Record "Loans Register";
        FOSALoanBal: Decimal;
        "FOSALnNo.": Code[20];
        CompanyInfo: Record "Company Information";
        AppraisalSals: Record "Loan Appraisal Salary Details";
        TotalSal: Decimal;
        AppraisalSalDet: Record "Loan Appraisal Salary Details";
        TotalSalCat: Decimal;
        SNo: Integer;
        Cust: Record "Members Register";
        Cshares: Decimal;
        LoanType: Record "Loan Products Setup";
        DEpMultiplier: Decimal;
        RecAmount: Decimal;

    local procedure FnRecommendedAmount()
    var
        AppraisalSalaryDetails2: Record "Loan Appraisal Salary Details";
        AppraisalIncome: Decimal;
    begin
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516435_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
