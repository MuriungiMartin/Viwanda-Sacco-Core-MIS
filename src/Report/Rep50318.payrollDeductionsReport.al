#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516318_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50318 "payroll Deductions Report."
{
    RDLCLayout = 'Layouts/payrollDeductionsReport..rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("prPeriod Transactions."; "prPeriod Transactions.")
        {
            DataItemTableView = sorting("Group Order", "Transaction Code", "Period Month", "Period Year", Membership, "Reference No", "Department Code") where("Group Order" = filter(7 | 8));
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Transaction Code", "Employee Code", "Payroll Period";
            column(ReportForNavId_7769; 7769) { } // Autogenerated by ForNav - Do not delete
            column(UserId; UserId)
            {
            }
            column(Today; Today)
            {
            }
            column(PeriodName; PeriodName)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(prPeriod_Transactions__Group_Text_; "prPeriod Transactions."."Group Text")
            {
            }
            column(prPeriod_Transactions_Amount; "prPeriod Transactions.".Amount)
            {
            }
            column(prPeriod_Transactions__Transaction_Name_; "prPeriod Transactions."."Transaction Name")
            {
            }
            column(Allowances_ReportCaption; Allowances_ReportCaptionLbl)
            {
            }
            column(User_Name_Caption; User_Name_CaptionLbl)
            {
            }
            column(Print_Date_Caption; Print_Date_CaptionLbl)
            {
            }
            column(Period_Caption; Period_CaptionLbl)
            {
            }
            column(Page_No_Caption; Page_No_CaptionLbl)
            {
            }
            column(Transaction_Name_Caption; Transaction_Name_CaptionLbl)
            {
            }
            column(Period_Amount_Caption; Period_Amount_CaptionLbl)
            {
            }
            column(Prepared_by_______________________________________Date_________________Caption; Prepared_by_______________________________________Date_________________CaptionLbl)
            {
            }
            column(Checked_by________________________________________Date_________________Caption; Checked_by________________________________________Date_________________CaptionLbl)
            {
            }
            column(Authorized_by____________________________________Date_________________Caption; Authorized_by____________________________________Date_________________CaptionLbl)
            {
            }
            column(Approved_by______________________________________Date_________________Caption; Approved_by______________________________________Date_________________CaptionLbl)
            {
            }
            column(prPeriod_Transactions_Employee_Code; "prPeriod Transactions."."Employee Code")
            {
            }
            column(prPeriod_Transactions_Transaction_Code; "prPeriod Transactions."."Transaction Code")
            {
            }
            column(prPeriod_Transactions_Period_Month; "prPeriod Transactions."."Period Month")
            {
            }
            column(prPeriod_Transactions_Period_Year; "prPeriod Transactions."."Period Year")
            {
            }
            column(prPeriod_Transactions_Membership; "prPeriod Transactions.".Membership)
            {
            }
            column(prPeriod_Transactions_Reference_No; "prPeriod Transactions."."Reference No")
            {
            }
            column(prPeriod_Transactions_Group_Order; "prPeriod Transactions."."Group Order")
            {
            }
            column(prPeriod_Transactions_Department_Code; "prPeriod Transactions."."Department Code")
            {
            }
            column(Employee_Code; "prPeriod Transactions."."Employee Code")
            {
            }
            column(Employee_Name; EmployeeName)
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Period Year");
            end;

            trigger OnAfterGetRecord();
            begin
                HR.Reset;
                HR.SetRange(HR."No.", "prPeriod Transactions."."Employee Code");
                if HR.Find('-') then begin
                    EmployeeName := HR.Firstname + ' ' + HR.Lastname + ' ' + HR.Surname;
                end;
                "prPeriod Transactions.".SetRange("Payroll Period", SelectedPeriod);
                //"prPeriod Transactions".SETFILTER("Group Order",'=7|8');
                //"prPeriod Transactions".SETFILTER("prPeriod Transactions"."Sub Group Order",'=2');
                if (Amount <= 0) or ("prPeriod Transactions."."Transaction Code" = 'TOT-DED') or ("prPeriod Transactions."."Group Order" = 1) then begin
                    CurrReport.Skip;
                end;
                /*"prPeriod Transactions".SETRANGE("Payroll Period",SelectedPeriod);
				//"prPeriod Transactions".SETFILTER("Group Order",'=1|3');
				//"prPeriod Transactions".SETFILTER("prPeriod Transactions"."Sub Group Order",'=2');
				IF Amount<=0 THEN
				  CurrReport.SKIP;
				TotalsAllowances:=TotalsAllowances+"prPeriod Transactions".Amount;
				PrevMonth:=0;
				PeriodTrans2.RESET;
				PeriodTrans2.SETRANGE(PeriodTrans2."Period Year","prPeriod Transactions"."Period Year");
				IF "prPeriod Transactions"."Period Month"=1 THEN BEGIN
				PeriodTrans2.SETRANGE(PeriodTrans2."Period Month",12);
				PeriodTrans2.SETRANGE(PeriodTrans2."Period Year","prPeriod Transactions"."Period Year"-1);
				END ELSE BEGIN
				PeriodTrans2.SETRANGE(PeriodTrans2."Period Month","prPeriod Transactions"."Period Month"-1);
				END;
				//PeriodTrans2.SETFILTER(PeriodTrans2."Group Order",'=7|=8');
				PeriodTrans2.SETRANGE(PeriodTrans2."Transaction Code","prPeriod Transactions"."Transaction Code");
				PeriodTrans2.SETRANGE(PeriodTrans2."Employee Code","prPeriod Transactions"."Employee Code");
				IF PeriodTrans2.FIND('-') THEN
				PrevMonth:=PeriodTrans2.Amount;
					*/

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(DateFilter; DateFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Date Filter';
                    TableRelation = "Payroll Calender.";
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //SelectedPeriod:="prPeriod Transactions".GETRANGEMIN("Payroll Period");
        SelectedPeriod := DateFilter;
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod."Date Opened", SelectedPeriod);
        if objPeriod.Find('-') then begin
            PeriodName := objPeriod."Period Name";
        end;
        if CompanyInfo.Get() then
            CompanyInfo.CalcFields(CompanyInfo.Picture);
        ;
        ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        PeriodTrans: Record "prPeriod Transactions..";
        GroupOrder: label '3';
        objPeriod: Record "Payroll Calender.";
        SelectedPeriod: Date;
        PeriodName: Text[30];
        CompanyInfo: Record "Company Information";
        TotalsAllowances: Decimal;
        Dept: Boolean;
        PrevMonth: Decimal;
        PeriodTrans2: Record "Payroll Transaction Code.";
        Allowances_ReportCaptionLbl: label 'Deductions Report';
        User_Name_CaptionLbl: label 'User Name:';
        Print_Date_CaptionLbl: label 'Print Date:';
        Period_CaptionLbl: label 'Period:';
        Page_No_CaptionLbl: label 'Page No:';
        Transaction_Name_CaptionLbl: label 'Transaction Name:';
        Period_Amount_CaptionLbl: label 'Period Amount:';
        Prepared_by_______________________________________Date_________________CaptionLbl: label 'Prepared byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..			  DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Checked_by________________________________________Date_________________CaptionLbl: label 'Checked byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..				   DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Authorized_by____________________________________Date_________________CaptionLbl: label 'Authorized byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..			DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Approved_by______________________________________Date_________________CaptionLbl: label 'Approved byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..			  DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        DateFilter: Date;
        EmployeeName: Text[100];
        HR: Record "Payroll Employee.";
        UserSetup: Record "User Setup";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516318_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
