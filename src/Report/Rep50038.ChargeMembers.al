#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516038_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50038 "Charge Members"
{
    RDLCLayout = 'Layouts/ChargeMembers.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Salary Processing Lines"; "Salary Processing Lines")
        {
            DataItemTableView = sorting("No.") where(Processed = const(false));
            RequestFilterFields = "Account No.", "Date Filter", "Salary Header No.";
            column(ReportForNavId_7751; 7751) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(Salary_Processing_Buffer__No__; "Salary Processing Lines"."No.")
            {
            }
            column(Salary_Processing_Buffer__Account_No__; "Salary Processing Lines"."Account No.")
            {
            }
            column(Salary_Processing_Buffer__Staff_No__; "Salary Processing Lines"."Staff No.")
            {
            }
            column(Salary_Processing_Buffer_Name; "Salary Processing Lines".Name)
            {
            }
            column(Salary_Processing_Buffer_Amount; "Salary Processing Lines".Amount)
            {
            }
            column(Salary_Processing_Buffer__Account_Not_Found_; "Salary Processing Lines"."Account Not Found")
            {
            }
            column(Salary_Allowance_Processing_BufferCaption; Salary_Allowance_Processing_BufferCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Salary_Processing_Buffer__No__Caption; FieldCaption("No."))
            {
            }
            column(Salary_Processing_Buffer__Account_No__Caption; FieldCaption("Account No."))
            {
            }
            column(Salary_Processing_Buffer__Staff_No__Caption; FieldCaption("Staff No."))
            {
            }
            column(Salary_Processing_Buffer_NameCaption; FieldCaption(Name))
            {
            }
            column(Salary_Processing_Buffer_AmountCaption; FieldCaption(Amount))
            {
            }
            column(Salary_Processing_Buffer__Account_Not_Found_Caption; FieldCaption("Account Not Found"))
            {
            }
            trigger OnPreDataItem();
            begin
                /*
				IF DocNo = '' THEN
				ERROR('You must specify the Document No.');
				IF PDate = 0D THEN
				ERROR('You must specify the posting date.');
				IF IssueDate = 0D THEN
				ERROR('You must specify the last issue date.');
				IF SittingAll = TRUE THEN BEGIN
				IF Remarks = '' THEN
				ERROR('You must specify the remarks for other payments.');
				END;
				*/
                /*
				IF IssueDate = 0D THEN
				ERROR('You must specify the last Loan issue date.');
				STORegister.RESET;
				STORegister.SETRANGE(STORegister."Document No.",DocNo);
				STORegister.SETRANGE(STORegister.Date,PDate);
				STORegister.SETRANGE(STORegister."Transfered to EFT",FALSE);
				IF STORegister.FIND('-') THEN
				STORegister.DELETEALL;
				GenJournalLine.RESET;
				GenJournalLine.SETRANGE(GenJournalLine."Journal Template Name",'GENERAL');
				GenJournalLine.SETRANGE(GenJournalLine."Journal Batch Name",'SALARY');
				IF GenJournalLine.FIND('-') THEN
				GenJournalLine.DELETEALL;
				SalFee:=0;
				ExciseFee:=0;
				//IF SittingAll = FALSE THEN BEGIN
				IF Charges.GET('SALARYP') THEN BEGIN
				SalGLAccount:=Charges."GL Account";
				SalFee:=Charges."Charge Amount";
				END;
				IF Charges.GET('EXCEISE') THEN BEGIN
				ExciseGLAccount:=Charges."GL Account";
				ExciseFee:=SalFee*(Charges."Percentage of Amount"/100);
				END;
				//END;
				{
				IF UsersID.GET(USERID) THEN BEGIN
				//UsersID.TESTFIELD(UsersID.Branch);
				DActivity:='FOSA';
				DBranch:=UsersID."Branch Code";
				END;
				}
				*/

            end;

            trigger OnAfterGetRecord();
            begin
                if SalaryHeader.Get("Salary Header No.") then begin
                    SMSCharge := 0;
                    LineNo := LineNo + 10000;
                    if "Salary Processing Lines"."Account No." = '350010' then begin
                        LineNo := LineNo + 1000;
                        GenJournalLine.Init;
                        GenJournalLine."Journal Template Name" := 'GENERAL';
                        GenJournalLine."Journal Batch Name" := 'SALARY';
                        GenJournalLine."Line No." := LineNo;
                        GenJournalLine."Document No." := SalaryHeader."Document No";
                        GenJournalLine."External Document No." := "Salary Processing Lines"."Branch Reff.";
                        GenJournalLine."Posting Date" := SalaryHeader."Posting date";
                        GenJournalLine."Account Type" := GenJournalLine."account type"::"G/L Account";
                        GenJournalLine.Validate(GenJournalLine."Account No.", "Salary Processing Lines"."Account No.");
                        GenJournalLine.Description := "Salary Processing Lines".Name;
                        GenJournalLine.Validate(GenJournalLine.Amount, "Salary Processing Lines".Amount);
                        GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 1 Code", DActivity);
                        GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 2 Code", "Salary Processing Lines"."Global Dimension 2 Code");
                        if GenJournalLine.Amount <> 0 then
                            GenJournalLine.Insert;
                    end;
                    if Account.Get("Salary Processing Lines"."Account No.") then begin
                        DActivity2 := Account."Global Dimension 1 Code";
                        DBranch2 := Account."Global Dimension 2 Code";
                        //Check Account Bal
                        AvailableBal := 0;
                        Account.CalcFields(Account.Balance, Account."Uncleared Cheques", Account."ATM Transactions");
                        AvailableBal := (Account.Balance - (Account."Uncleared Cheques" + Account."ATM Transactions"));
                        if AccountTypeS.Get(Account."Account Type") then
                            AvailableBal := AvailableBal - AccountTypeS."Minimum Balance";
                        if AvailableBal < 0 then
                            AvailableBal := 0;
                        LineNo := LineNo + 1000;
                        GenJournalLine.Init;
                        GenJournalLine."Journal Template Name" := 'GENERAL';
                        GenJournalLine."Journal Batch Name" := 'SALARY';
                        GenJournalLine."Line No." := LineNo;
                        GenJournalLine."Document No." := SalaryHeader."Document No";
                        GenJournalLine."External Document No." := "Salary Processing Lines"."Branch Reff.";
                        GenJournalLine."Posting Date" := SalaryHeader."Posting date";
                        if "Salary Processing Lines"."Account No." = '350010' then
                            GenJournalLine."Account Type" := GenJournalLine."account type"::"G/L Account"
                        else
                            GenJournalLine."Account Type" := GenJournalLine."account type"::Vendor;
                        GenJournalLine.Validate(GenJournalLine."Account No.", "Salary Processing Lines"."Account No.");
                        //GenJournalLine."Salary SMS" := TRUE;-Surestep
                        if (Account."Account Category" = Account."account category"::Branch)
                        or ("Salary Processing Lines"."Account No." = '350010') then
                            GenJournalLine.Description := "Salary Processing Lines".Name
                        else
                            GenJournalLine.Description := 'Annual Charge';
                        if SittingAll = true then
                            GenJournalLine.Description := Remarks;
                        GenJournalLine.Validate(GenJournalLine.Amount, "Salary Processing Lines".Amount);
                        GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 1 Code", DActivity);
                        GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 2 Code", "Salary Processing Lines"."Global Dimension 2 Code");
                        if GenJournalLine.Amount <> 0 then
                            GenJournalLine.Insert;
                        /*
                        //Salary Processing Fee
                        IF (Account."Account Category" <> Account."Account Category"::Branch) AND
                           ("Salary Processing Lines"."Account No." <> '350010')  THEN BEGIN
                        LineNo:=LineNo+1000;
                        GenJournalLine.INIT;
                        GenJournalLine."Journal Template Name":='GENERAL';
                        GenJournalLine."Journal Batch Name":='SALARY';
                        GenJournalLine."Line No.":=LineNo;
                        GenJournalLine."Document No.":=SalaryHeader."Document No";
                        GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                        GenJournalLine."Account Type":=GenJournalLine."Account Type"::Vendor;
                        GenJournalLine.VALIDATE(GenJournalLine."Account No.","Salary Processing Lines"."Account No.");
                        IF SittingAll = TRUE THEN
                        GenJournalLine.Description:='Processing Fee'
                        ELSE
                        GenJournalLine.Description:='Salary Processing Fee';
                        GenJournalLine.Amount:=(SalFee+ExciseFee);
                        //GenJournalLine.VALIDATE(GenJournalLine.Amount,SalFee);
                        //GenJournalLine."Bal. Account Type":=GenJournalLine."Bal. Account Type"::"G/L Account";
                        //GenJournalLine.VALIDATE(GenJournalLine."Bal. Account No.",SalGLAccount);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                        IF GenJournalLine.Amount<>0 THEN
                        GenJournalLine.INSERT;
                        END;
                        //SALARY PROCESSING FEE
                        LineNo:=LineNo+1000;
                        GenJournalLine.INIT;
                        GenJournalLine."Journal Template Name":='GENERAL';
                        GenJournalLine."Journal Batch Name":='SALARY';
                        GenJournalLine."Line No.":=LineNo;
                        GenJournalLine."Document No.":=SalaryHeader."Document No";
                        GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                        GenJournalLine."Account Type":=GenJournalLine."Account Type"::"G/L Account";
                        GenJournalLine."Account No.":=SalGLAccount;
                        GenJournalLine.VALIDATE(GenJournalLine."Account No.",SalGLAccount);   //"Salary Processing Lines"."Account No.");
                        GenJournalLine.Description:='Salary Processing Fee';
                        GenJournalLine.Amount:=SalFee*-1;
                        //GenJournalLine."Bal. Account Type":=GenJournalLine."Bal. Account Type"::"G/L Account";
                        //GenJournalLine.VALIDATE(GenJournalLine."Bal. Account No.",ExciseGLAccount);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                        IF GenJournalLine.Amount<>0 THEN
                        GenJournalLine.INSERT;
                        //EXCISE DUTY ON SALARY FEE
                        LineNo:=LineNo+1000;
                        GenJournalLine.INIT;
                        GenJournalLine."Journal Template Name":='GENERAL';
                        GenJournalLine."Journal Batch Name":='SALARY';
                        GenJournalLine."Line No.":=LineNo;
                        GenJournalLine."Document No.":=SalaryHeader."Document No";
                        GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                        GenJournalLine."Account Type":=GenJournalLine."Account Type"::"G/L Account";
                        GenJournalLine.VALIDATE(GenJournalLine."Account No.",SalGLAccount);   //"Salary Processing Lines"."Account No.");
                        IF SittingAll = TRUE THEN
                        GenJournalLine.Description:=' 10% Excise Duty on Processing Fee'
                        ELSE
                        GenJournalLine.Description:='10% Excise Duty on Salary Processing Fee';
                        //GenJournalLine.VALIDATE(GenJournalLine.Amount,ExciseFee);
                        GenJournalLine.Amount:=ExciseFee*-1;
                        //GenJournalLine."Bal. Account Type":=GenJournalLine."Bal. Account Type"::"G/L Account";
                        //GenJournalLine.VALIDATE(GenJournalLine."Bal. Account No.",ExciseGLAccount);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                        IF GenJournalLine.Amount<>0 THEN
                        GenJournalLine.INSERT;
                        //EXCISE DUTY ON SALARY FEE
                        */
                        /*//SMS CHARGES
                        GenLedgerSetup.RESET;
                        GenLedgerSetup.GET;
                        IF GenLedgerSetup."Salary SMS Charge" <> '' THEN BEGIN
                        Charges1.RESET;
                        Charges1.SETRANGE(Charges1.Code,GenLedgerSetup."Salary SMS Charge");
                        IF Charges1.FIND('-') THEN BEGIN
                        Charges1.TESTFIELD(Charges1."GL Account");
                        SMSCharge := Charges1."Charge Amount";
                        Vend1.RESET;
                        Vend1.SETRANGE(Vend1."No.","Salary Processing Lines"."Account No.");
                        IF Vend1.FIND('-') THEN BEGIN
                        IF Vend1."Phone No." <> '' THEN BEGIN
                        LineNo:=LineNo+1000;
                        GenJournalLine.INIT;
                        GenJournalLine."Journal Template Name":='GENERAL';
                        GenJournalLine."Journal Batch Name":='SALARIES';
                        GenJournalLine."Line No.":=LineNo;
                        GenJournalLine."Document No.":=DocNo;
                        GenJournalLine."External Document No.":="Salary Processing Lines"."Branch Reff.";
                        GenJournalLine."Posting Date":=PDate;
                        GenJournalLine."Account Type":=GenJournalLine."Account Type"::"G/L Account";
                        GenJournalLine."Account No.":=Charges1."GL Account";
                        GenJournalLine.VALIDATE(GenJournalLine."Account No.");
                        GenJournalLine.Description:=Charges1.Description;
                        GenJournalLine.Amount:=-SMSCharge;
                        GenJournalLine."Shortcut Dimension 1 Code":=DActivity;
                        GenJournalLine."Shortcut Dimension 2 Code":=DBranch;
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code");
                        GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code");
                        GenJournalLine.VALIDATE(GenJournalLine.Amount);
                        IF GenJournalLine.Amount<>0 THEN
                        GenJournalLine.INSERT;
                        END;
                        END;
                        END;
                        END;*/
                        /*
                        //Loans Recovery
                        IF SalaryHeader."Exempt Loan Repayment" = FALSE THEN BEGIN
                        IF Account."Account Category" <> Account."Account Category"::Branch THEN
                        RunBal:=("Salary Processing Lines".Amount-SalFee-SMSCharge)+AvailableBal;
                        //Interest
                        Loans.RESET;
                        Loans.SETCURRENTKEY(Source,"Client Code","Loan Product Type","Issued Date");
                        //Loans.SETRANGE(Loans."Client Code","Salary Processing Lines"."Account No.");
                        Loans.SETRANGE(Loans."BOSA No","Salary Processing Lines"."BOSA No");
                        Loans.SETRANGE(Loans."Issued Date",0D,IssueDate);
                        Loans.SETFILTER(Loans."Period Date Filter",GETFILTER("Date Filter"));
                        //Loans.SETFILTER(Loans."Loan Product Type",'HSFSPECIAL|HSFADVANCE|FOSAKARIBU|HSF OKOA|HSFDEF|DEFAULTED|DEFAULTER1|DEFAULTED2');
                        Loans.SETFILTER(Loans.Source,'FOSA');
                        IF Loans.FIND('-') THEN BEGIN
                        REPEAT
                        IF LoanType.GET(Loans."Loan Product Type") THEN BEGIN
                          IF LoanType."Recovery Method"=LoanType."Recovery Method"::"Salary " THEN BEGIN
                          IF RunBal > 0 THEN BEGIN
                            Loans.CALCFIELDS(Loans."Outstanding Balance",Loans."Oustanding Interest");
                              //IF Loans."Outstanding Balance" > 0 THEN BEGIN
                            IF Loans."Oustanding Interest" > 0 THEN BEGIN
                              Interest:=0;
                              Interest:=Loans."Oustanding Interest";
                              IF Interest > 0 THEN BEGIN
                                LineNo:=LineNo+10000;
                                GenJournalLine.INIT;
                                GenJournalLine."Journal Template Name":='GENERAL';
                                GenJournalLine."Journal Batch Name":='SALARY';
                                GenJournalLine."Line No.":=LineNo;
                                GenJournalLine."Account Type":=GenJournalLine."Account Type"::Member;
                                //GenJournalLine.VALIDATE(GenJournalLine."Account No.","Salary Processing Lines"."Account No.");
                                IF Loans."Issued Date"<20160511D THEN BEGIN
                                GenJournalLine."Account No.":="Salary Processing Lines"."BOSA No"
                                END ELSE
                                GenJournalLine."Account No.":="Salary Processing Lines"."Account No.";
                                GenJournalLine."Document No.":=SalaryHeader."Document No";
                                GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                                GenJournalLine.Description:='Interest Paid';
                                IF RunBal > Interest THEN
                                  GenJournalLine.VALIDATE(GenJournalLine.Amount,Interest*-1)
                                ELSE
                                  GenJournalLine.VALIDATE(GenJournalLine.Amount,RunBal*-1);
                                GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Interest Paid";
                                GenJournalLine.VALIDATE(GenJournalLine."Loan No",Loans."Loan  No.");
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                                IF GenJournalLine.Amount<>0 THEN
                                  GenJournalLine.INSERT;
                                LineNo:=LineNo+10000;
                                GenJournalLine.INIT;
                                GenJournalLine."Journal Template Name":='GENERAL';
                                GenJournalLine."Journal Batch Name":='SALARY';
                                GenJournalLine."Line No.":=LineNo;
                                GenJournalLine."Account Type":=GenJournalLine."Account Type"::Vendor;
                                GenJournalLine.VALIDATE(GenJournalLine."Account No.","Salary Processing Lines"."Account No.");
                                GenJournalLine."Document No.":=SalaryHeader."Document No";
                                GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                                GenJournalLine.Description:='Interest Paid - ' + Loans."Loan Product Type";
                                IF RunBal > Interest THEN
                                  GenJournalLine.VALIDATE(GenJournalLine.Amount,Interest)
                                ELSE
                                  GenJournalLine.VALIDATE(GenJournalLine.Amount,RunBal);
                                GenJournalLine.VALIDATE(GenJournalLine."Loan No",Loans."Loan  No.");
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                                IF GenJournalLine.Amount<>0 THEN
                                  GenJournalLine.INSERT;
                                RunBal:=RunBal-ABS(GenJournalLine.Amount);
                              END;
                            END;
                          END;
                          END;
                          END;
                        UNTIL Loans.NEXT = 0;
                        END;
                        //Priciple
                        Loans.RESET;
                        Loans.SETCURRENTKEY(Source,"Client Code","Loan Product Type","Issued Date");
                        //Loans.SETRANGE(Loans."Client Code","Salary Processing Lines"."Account No.");
                        Loans.SETRANGE(Loans."BOSA No","Salary Processing Lines"."BOSA No");
                        Loans.SETRANGE(Loans."Issued Date",0D,IssueDate);
                        Loans.SETFILTER(Loans."Period Date Filter",GETFILTER("Date Filter"));
                        //Loans.SETFILTER(Loans."Loan Product Type",'HSFSPECIAL|HSFADVANCE|FOSAKARIBU|HSF OKOA|HSFDEF|DEFAULTED|DEFAULTER1|DEFAULTED2');
                        Loans.SETFILTER(Loans.Source,'FOSA');
                        IF Loans.FIND('-') THEN BEGIN
                        REPEAT
                        IF LoanType.GET(Loans."Loan Product Type") THEN BEGIN
                          IF LoanType."Recovery Method"=LoanType."Recovery Method"::"Salary " THEN BEGIN
                          IF RunBal > 0 THEN BEGIN
                            Loans.CALCFIELDS(Loans."Outstanding Balance",Loans."Interest Due");
                            IF Loans."Outstanding Balance" > 0 THEN BEGIN
                              TotalMRepay:=0;
                              LPrincipal:=0;
                              LInterest:=0;
                              InterestRate:=Loans.Interest;
                              LoanAmount:=Loans."Approved Amount";
                              RepayPeriod:=Loans.Installments;
                              LBalance:=Loans."Approved Amount";
                              IF Loans."Loan Product Type"='HSFDEF' THEN
                              LRepayment:=ROUND(Loans."Outstanding Balance"/Loans.Installments,0.05,'>')
                              ELSE BEGIN
                                  IF Loans."Adjted Repayment" <> 0 THEN
                                    LRepayment:=Loans."Adjted Repayment"-Loans."Interest Due"
                                  ELSE
                                    LRepayment:=Loans.Repayment-Loans."Interest Due";
                              END;
                              IF LRepayment=0 THEN
                              LRepayment:=Loans.Repayment;
                                LineNo:=LineNo+10000;
                                GenJournalLine.INIT;
                                GenJournalLine."Journal Template Name":='GENERAL';
                                GenJournalLine."Journal Batch Name":='SALARY';
                                GenJournalLine."Line No.":=LineNo;
                                GenJournalLine."Account Type":=GenJournalLine."Account Type"::Member;
                                //GenJournalLine.VALIDATE(GenJournalLine."Account No.","Salary Processing Lines"."Account No.");
                                IF Loans."Issued Date"<20160511D THEN BEGIN
                                GenJournalLine."Account No.":="Salary Processing Lines"."BOSA No"
                                END ELSE
                                GenJournalLine."Account No.":="Salary Processing Lines"."Account No.";
                                GenJournalLine."Document No.":=SalaryHeader."Document No";
                                GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                                GenJournalLine.Description:='Loan Repayment';
                                IF RunBal > LRepayment THEN
                                GenJournalLine.VALIDATE(GenJournalLine.Amount,LRepayment*-1)
                                ELSE
                                GenJournalLine.VALIDATE(GenJournalLine.Amount,RunBal*-1);
                                GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::Repayment;
                                GenJournalLine.VALIDATE(GenJournalLine."Loan No",Loans."Loan  No.");
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                                IF GenJournalLine.Amount<>0 THEN
                                GenJournalLine.INSERT;
                                LineNo:=LineNo+10000;
                                GenJournalLine.INIT;
                                GenJournalLine."Journal Template Name":='GENERAL';
                                GenJournalLine."Journal Batch Name":='SALARY';
                                GenJournalLine."Line No.":=LineNo;
                                GenJournalLine."Account Type":=GenJournalLine."Account Type"::Vendor;
                                GenJournalLine.VALIDATE(GenJournalLine."Account No.","Salary Processing Lines"."Account No.");
                                GenJournalLine."Document No.":=SalaryHeader."Document No";
                                GenJournalLine."Posting Date":=SalaryHeader."Posting date";
                                GenJournalLine.Description:='Loan Repayment - ' + Loans."Loan Product Type";
                                IF RunBal > LRepayment THEN
                                GenJournalLine.VALIDATE(GenJournalLine.Amount,LRepayment)
                                ELSE
                                GenJournalLine.VALIDATE(GenJournalLine.Amount,RunBal);
                                GenJournalLine.VALIDATE(GenJournalLine."Loan No",Loans."Loan  No.");
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 1 Code",DActivity2);
                                GenJournalLine.VALIDATE(GenJournalLine."Shortcut Dimension 2 Code",DBranch2);
                                IF GenJournalLine.Amount<>0 THEN
                                GenJournalLine.INSERT;
                                RunBal:=RunBal-ABS(GenJournalLine.Amount);
                            END;
                          END;
                          END;
                          END;
                        UNTIL Loans.NEXT = 0;
                        END;
                                END;
                                END ELSE BEGIN
                                "Salary Processing Lines"."Account Not Found":=TRUE;
                         END;*/
                    end;
                    "Salary Processing Lines"."Document No." := DocNo;
                    "Salary Processing Lines".Date := PDate;
                    "Salary Processing Lines".Modify;
                    //Mark Salaried Accounts
                    if Account.Get("Salary Processing Lines"."Account No.") then begin
                        Account."Salary Processing" := true;
                        Account.Modify;
                    end;
                end;

            end;

            trigger OnPostDataItem();
            begin
                //Balance With Employer--------------------------------------------------------------
                if SalaryHeader.Get("Salary Header No.") then begin
                    LineNo := LineNo + 10000;
                    GenJournalLine.Init;
                    GenJournalLine."Journal Template Name" := 'GENERAL';
                    GenJournalLine."Journal Batch Name" := 'SALARY';
                    GenJournalLine."Line No." := LineNo;
                    GenJournalLine."Account Type" := SalaryHeader."Account Type";
                    GenJournalLine."Account No." := SalaryHeader."Account No";
                    GenJournalLine."External Document No." := SalaryHeader."Cheque No.";
                    GenJournalLine."Document No." := SalaryHeader."Document No";
                    GenJournalLine."Posting Date" := SalaryHeader."Posting date";
                    GenJournalLine.Description := SalaryHeader.Remarks;
                    GenJournalLine.Amount := -SalaryHeader.Amount;
                    GenJournalLine.Validate(GenJournalLine.Amount);
                    GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 1 Code", DActivity2);
                    GenJournalLine.Validate(GenJournalLine."Shortcut Dimension 2 Code", DBranch2);
                    //IF GenJournalLine.Amount<>0 THEN
                    GenJournalLine.Insert;
                end;
                //End Balance With Employer--------------------------------------------------------------
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("Last Loan Issue Date"; IssueDate)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        GenJournalLine: Record "Gen. Journal Line";
        GLPosting: Codeunit "Gen. Jnl.-Post Line";
        Account: Record Vendor;
        AccountType: Record "Account Types-Saving Products";
        AvailableBal: Decimal;
        STORegister: Record "Standing Order Register";
        AmountDed: Decimal;
        DedStatus: Option Successfull,"Partial Deduction",Failed;
        Charges: Record Charges;
        LineNo: Integer;
        DocNo: Code[20];
        PDate: Date;
        SalFee: Decimal;
        SalGLAccount: Code[20];
        Loans: Record "Loans Register";
        LRepayment: Decimal;
        RunBal: Decimal;
        Interest: Decimal;
        SittingAll: Boolean;
        UsersID: Record User;
        DActivity: Code[20];
        DBranch: Code[20];
        AccountS: Record Vendor;
        AccountTypeS: Record "Account Types-Saving Products";
        IssueDate: Date;
        DActivity2: Code[20];
        DBranch2: Code[20];
        DActivity3: Code[20];
        DBranch3: Code[20];
        BOSABank: Code[20];
        ReceiptAllocations: Record "Receipt Allocation";
        STORunBal: Decimal;
        ReceiptAmount: Decimal;
        StandingOrders: Record "Standing Orders";
        AccountCard: Record Vendor;
        AccountCard2: Record Vendor;
        FlexContribution: Decimal;
        FlexAccountNo: Code[20];
        ActualSTO: Decimal;
        InsCont: Decimal;
        LoanType: Record "Loan Products Setup";
        Remarks: Text[50];
        DontEffect: Boolean;
        TotalMRepay: Decimal;
        InterestRate: Decimal;
        LPrincipal: Decimal;
        LInterest: Decimal;
        LoanAmount: Decimal;
        RepayPeriod: Integer;
        LBalance: Decimal;
        Schedule: Record "Loan Repayment Schedule";
        Salary_Allowance_Processing_BufferCaptionLbl: label 'Salary/Allowance Processing Buffer';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Vend1: Record Vendor;
        Charges1: Record Charges;
        SMSCharge: Decimal;
        GenLedgerSetup: Record "General Ledger Setup";
        ExciseGLAccount: Code[10];
        ExciseFee: Decimal;
        SalaryHeader: Record "Salary Processing Headerr";

    procedure PostBOSAEntries()
    var
        ReceiptAllocation: Record "Receipt Allocation";
    begin
        /*
		IF AmountDed > 0 THEN BEGIN
		STORunBal:=AmountDed;
		ReceiptAllocations.RESET;
		ReceiptAllocations.SETRANGE(ReceiptAllocations."Document No",StandingOrders."No.");
		//ReceiptAllocations.SETRANGE(ReceiptAllocations."Member No",StandingOrders."BOSA Account No.");
		IF ReceiptAllocations.FIND('-') THEN BEGIN
		  IF ReceiptAllocations.GET("Standing Orders"."BOSA Account No.") THEN BEGIN
		REPEAT
		ReceiptAllocations."Amount Balance":=0;
		ReceiptAllocations."Interest Balance":=0;
		ReceiptAmount:=ReceiptAllocations.Amount;//-ReceiptAllocations."Amount Balance";
		//Check Loan Balances
		{IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::Repayment THEN BEGIN
		Loans.RESET;
		Loans.SETRANGE(Loans."Loan  No.",ReceiptAllocations."Loan No.");
		IF Loans.FIND('-') THEN BEGIN
		Loans.CALCFIELDS(Loans."Outstanding Balance");
		IF ReceiptAmount > Loans."Outstanding Balance" THEN
		ReceiptAmount := Loans."Outstanding Balance";
		END ELSE
		ERROR('Loan No. %1 not Found. :- %2',ReceiptAllocations."Loan No.",ReceiptAllocations."Document No");
		END;}
		IF ReceiptAmount < 0 THEN
		ReceiptAmount:=0;
		IF STORunBal < 0 THEN
		STORunBal:=0;
		LineNo:=LineNo+10000;
		GenJournalLine.INIT;
		GenJournalLine."Journal Template Name":='GENERAL';
		GenJournalLine."Journal Batch Name":='SALARY';
		GenJournalLine."Line No.":=LineNo;
		GenJournalLine."Document No.":=SalaryHeader."Document No";
		GenJournalLine."External Document No.":=StandingOrders."No.";
		GenJournalLine."Posting Date":=SalaryHeader."Posting date";
		GenJournalLine."Account Type":=GenJournalLine."Bal. Account Type"::Member;
		GenJournalLine."Account No.":=ReceiptAllocations."Member No";
		GenJournalLine.VALIDATE(GenJournalLine."Account No.");
		GenJournalLine.Description:=FORMAT(ReceiptAllocations."Transaction Type");
		IF STORunBal > ReceiptAmount THEN
		GenJournalLine.Amount:=-ReceiptAmount
		ELSE
		GenJournalLine.Amount:=-STORunBal;
		IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Insurance Contribution" THEN BEGIN
		IF ABS(GenJournalLine.Amount) = 100 THEN
		InsCont:=100;
		GenJournalLine.Amount:=-25;
		END;
		GenJournalLine.VALIDATE(GenJournalLine.Amount);
		IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Security Fund" THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Security Fund"
		ELSE IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Deposit Contribution" THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Deposit Contribution"
		ELSE IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Risk Fund Paid" THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Risk Fund Paid"
		ELSE IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::Repayment THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::Repayment
		ELSE IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Registration Fee" THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Registration Fee"
		ELSE IF ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Shares Capital" THEN
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Shares Capital";
		GenJournalLine."Loan No":=ReceiptAllocations."Loan No.";
		//IF GenJournalLine.Amount<>0 THEN
		GenJournalLine.INSERT;
		ReceiptAllocations."Amount Balance":=ReceiptAllocations."Amount Balance" + (GenJournalLine.Amount * -1);
		STORunBal:=STORunBal+GenJournalLine.Amount;
		ActualSTO:=ActualSTO+(GenJournalLine.Amount*-1);
		IF (ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::"Insurance Contribution")
		   AND (InsCont = 100) THEN BEGIN
		LineNo:=LineNo+10000;
		GenJournalLine.INIT;
		GenJournalLine."Journal Template Name":='GENERAL';
		GenJournalLine."Journal Batch Name":='SALARY';
		GenJournalLine."Line No.":=LineNo;
		GenJournalLine."Document No.":=SalaryHeader."Document No";
		GenJournalLine."External Document No.":=StandingOrders."No.";
		GenJournalLine."Posting Date":=SalaryHeader."Posting date";
		GenJournalLine."Account Type":=GenJournalLine."Bal. Account Type"::Member;
		GenJournalLine."Account No.":=ReceiptAllocations."Member No";
		GenJournalLine.VALIDATE(GenJournalLine."Account No.");
		GenJournalLine.Description:=FORMAT(ReceiptAllocations."Transaction Type");
		GenJournalLine.Amount:=-75;
		GenJournalLine.VALIDATE(GenJournalLine.Amount);
		//GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::BOSAEXC;
		GenJournalLine."Loan No":=ReceiptAllocations."Loan No.";
		//IF GenJournalLine.Amount<>0 THEN
		GenJournalLine.INSERT;
		ReceiptAllocations."Amount Balance":=ReceiptAllocations."Amount Balance" + (GenJournalLine.Amount * -1);
		STORunBal:=STORunBal+GenJournalLine.Amount;
		ActualSTO:=ActualSTO+(GenJournalLine.Amount*-1);
		END;
		IF STORunBal < 0 THEN
		STORunBal:=0;
		IF (ReceiptAllocations."Transaction Type" = ReceiptAllocations."Transaction Type"::Repayment) AND
		   (ReceiptAllocations."Interest Amount" > 0) THEN BEGIN
		LineNo:=LineNo+10000;
		ReceiptAmount:=ReceiptAllocations."Interest Amount";
		//Check Outstanding Interest
		Loans.RESET;
		Loans.SETRANGE(Loans."Loan  No.",ReceiptAllocations."Loan No.");
		IF Loans.FIND('-') THEN BEGIN
		Loans.CALCFIELDS(Loans."Oustanding Interest");
		IF ReceiptAmount > Loans."Oustanding Interest" THEN
		ReceiptAmount := Loans."Oustanding Interest";
		END ELSE
		ERROR('Loan No. %1 not Found. :- %2',ReceiptAllocations."Loan No.",ReceiptAllocations."Document No");
		IF ReceiptAmount < 0 THEN
		ReceiptAmount:=0;
		IF ReceiptAmount > 0 THEN BEGIN
		GenJournalLine.INIT;
		GenJournalLine."Journal Template Name":='GENERAL';
		GenJournalLine."Journal Batch Name":='SALARY';
		GenJournalLine."Line No.":=LineNo;
		GenJournalLine."Document No.":=SalaryHeader."Document No";
		GenJournalLine."External Document No.":=StandingOrders."No.";
		GenJournalLine."Posting Date":=SalaryHeader."Posting date";
		GenJournalLine."Account Type":=GenJournalLine."Bal. Account Type"::Member;
		GenJournalLine."Account No.":=ReceiptAllocations."Member No";
		GenJournalLine.VALIDATE(GenJournalLine."Account No.");
		GenJournalLine.Description:='Interest Paid';
		IF STORunBal > ReceiptAmount THEN
		GenJournalLine.Amount:=-ReceiptAmount
		ELSE
		GenJournalLine.Amount:=-STORunBal;
		GenJournalLine.VALIDATE(GenJournalLine.Amount);
		GenJournalLine."Transaction Type":=GenJournalLine."Transaction Type"::"Interest Paid";
		GenJournalLine."Loan No":=ReceiptAllocations."Loan No.";
		//IF GenJournalLine.Amount<>0 THEN
		GenJournalLine.INSERT;
		ReceiptAllocations."Interest Balance":=ReceiptAllocations."Interest Balance" + (GenJournalLine.Amount * -1);
		STORunBal:=STORunBal+GenJournalLine.Amount;
		ActualSTO:=ActualSTO+(GenJournalLine.Amount*-1);
		END;
		END;
		ReceiptAllocations.MODIFY;
		UNTIL ReceiptAllocations.NEXT = 0;
		END;
		END;
		END;
		*/

    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516038_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
