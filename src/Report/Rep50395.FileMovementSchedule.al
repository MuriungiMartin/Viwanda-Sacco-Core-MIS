#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516395_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50395 "File Movement Schedule"
{
    RDLCLayout = 'Layouts/FileMovementSchedule.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Members Register"; "Members Register")
        {
            DataItemTableView = where("File MVT Time" = filter(<> ''));
            PrintOnlyIfDetail = false;
            RequestFilterFields = "No.", "File MVT Date";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address2; Company."Address 2")
            {
            }
            column(Company_PhoneNo; Company."Phone No.")
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(No; "Members Register"."No.")
            {
            }
            column(Name; "Members Register".Name)
            {
            }
            column(File_Movement_Remarks; "Members Register"."File Movement Remarks")
            {
            }
            column(Current_File_Location; "Members Register"."Current file location")
            {
            }
            column(Move_To; "Members Register"."Move to")
            {
            }
            column(File_Mvt_User_ID; "Members Register"."File MVT User ID")
            {
            }
            column(File_Mvt_Date; "Members Register"."File MVT Date")
            {
            }
            column(File_Mvt_Time; "Members Register"."File MVT Time")
            {
            }
            column(File_Received; "Members Register"."file Received")
            {
            }
            column(File_Previous_Location; "Members Register"."File Previous Location")
            {
            }
            column(User; "Members Register".User)
            {
            }
            trigger OnAfterGetRecord();
            begin
                /*
				BOSABal:=0;
				SuperBal:=0;
				Deposits:=0;
				LCount:=LCount+1;
				CompanyCode:='';
				LocationFilter:='';
				RPeriod:=Loans.Installments;
				IF (Loans."Outstanding Balance" > 0) AND (Loans.Repayment > 0) THEN
				RPeriod:=Loans."Outstanding Balance"/Loans.Repayment;
				BatchL:='';
				IF Batches.GET(Loans."Batch No.") THEN BEGIN
				Batches.CALCFIELDS(Batches."Currect Location");
				BatchL:=Batches."Currect Location";
				END;
				IF Loans.GETFILTER(Loans."Location Filter") <> '' THEN  BEGIN
				ApprovalSetup.RESET;
				ApprovalSetup.SETRANGE(ApprovalSetup."Approval Type",ApprovalSetup."Approval Type"::"File Movement");
				ApprovalSetup.SETFILTER(ApprovalSetup.Stage,Loans.GETFILTER(Loans."Location Filter"));
				IF ApprovalSetup.FIND('-') THEN
				LocationFilter:=ApprovalSetup.Station;
				END;
				IF LocationFilter = '' THEN
				TotalApproved:=TotalApproved+Loans."Approved Amount"
				ELSE BEGIN
				IF LocationFilter = BatchL THEN
				TotalApproved:=TotalApproved+Loans."Approved Amount"
				END;
				//Get balance of BOSA Loans + super loans
				IF (Loans.Source=Loans.Source::BOSA) OR (Loans."Loan Product Type"='SUPER') THEN BEGIN
				cust.RESET;
				cust.SETRANGE(cust."No.",Loans."Client Code");
				cust.SETRANGE(cust."Customer Type",cust."Customer Type"::Member);
				IF cust.FIND('-') THEN BEGIN
				cust.CALCFIELDS(cust."Outstanding Balance",cust."Current Shares");
				BOSABal:=cust."Outstanding Balance";
				Deposits:=ABS(cust."Current Shares");
				CompanyCode:=cust."Employer Code";
				END ELSE BEGIN
				cust.RESET;
				cust.SETRANGE(cust."No.",Loans."BOSA No");
				cust.SETRANGE(cust."Customer Type",cust."Customer Type"::Member);
				IF cust.FIND('-') THEN BEGIN
				cust.CALCFIELDS(cust."Outstanding Balance",cust."Current Shares");
				BOSABal:=cust."Outstanding Balance";
				Deposits:=ABS(cust."Current Shares");
				CompanyCode:=cust."Employer Code";
				END;
				END;
				LAppl.RESET;
				LAppl.SETRANGE(LAppl."Client Code",Loans."Account No");
				LAppl.SETRANGE(LAppl."Loan Product Type",'SUPER');
				LAppl.SETFILTER(LAppl."Outstanding Balance",'>0');
				LAppl.SETRANGE(LAppl.Posted,TRUE);
				IF LAppl.FIND('-') THEN BEGIN
				REPEAT
				LAppl.CALCFIELDS(LAppl."Outstanding Balance");
				SuperBal:=SuperBal+LAppl."Outstanding Balance";
				UNTIL LAppl.NEXT=0;
				END;
				END;
				//Loans."Net Amount":=Loans."Approved Amount"-Loans."Top Up Amount";
				//Get The Loan Type
				*/

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        //  Company.GET();
        // Company.CALCFIELDS(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        if Company.Get then begin
            Company.CalcFields(Company.Picture);
            Name := Company.Name;
        end;
        ;
        ReportsForNavPre;
    end;

    var
        Loans_RegisterCaptionLbl: label 'Approved Loans Report';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Client_No_CaptionLbl: label 'Client No.';
        Outstanding_LoanCaptionLbl: label 'Outstanding Loan';
        PeriodCaptionLbl: label 'Period';
        Approved_DateCaptionLbl: label 'Approved Date';
        Loan_TypeCaption_Control1102760043Lbl: label 'Loan Type';
        Verified_By__________________________________________________CaptionLbl: label 'Verified By..................................................';
        Confirmed_By__________________________________________________CaptionLbl: label 'Confirmed By..................................................';
        Sign________________________CaptionLbl: label 'Sign........................';
        Sign________________________Caption_Control1102755003Lbl: label 'Sign........................';
        Date________________________CaptionLbl: label 'Date........................';
        Date________________________Caption_Control1102755005Lbl: label 'Date........................';
        NameCreditOff: label 'Name......................................';
        NameCreditDate: label 'Date........................................';
        NameCreditSign: label 'Signature..................................';
        NameCreditMNG: label 'Name......................................';
        NameCreditMNGDate: label 'Date.....................................';
        NameCreditMNGSign: label 'Signature..................................';
        NameCEO: label 'Name........................................';
        NameCEOSign: label 'Signature...................................';
        NameCEODate: label 'Date.....................................';
        CreditCom1: label 'Name........................................';
        CreditCom1Sign: label 'Signature...................................';
        CreditCom1Date: label 'Date.........................................';
        CreditCom2: label 'Name........................................';
        CreditCom2Sign: label 'Signature....................................';
        CreditCom2Date: label 'Date..........................................';
        CreditCom3: label 'Name.........................................';
        CreditComDate3: label 'Date..........................................';
        CreditComSign3: label 'Signature..................................';
        Comment: label '....................';
        Company: Record "Company Information";
        Name: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516395_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
