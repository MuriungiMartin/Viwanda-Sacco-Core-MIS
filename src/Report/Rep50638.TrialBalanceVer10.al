#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516027_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50638 "Trial Balance_Ver1.0"
{
    Caption = 'Trial Balance';
    RDLCLayout = 'Layouts/TrialBalance_Ver1.0.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("G/L Account"; "G/L Account")
        {
            DataItemTableView = sorting("No.") where("Account Type" = const(Posting));
            RequestFilterFields = "No.", "Account Type", "Date Filter", "Global Dimension 1 Filter", "Global Dimension 2 Filter";
            column(ReportForNavId_6710; 6710) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(STRSUBSTNO_Text000_PeriodText_; StrSubstNo(Text000, PeriodText))
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(UserId; UserId)
            {
            }
            column(company_Picture; company.Picture)
            {
            }
            column(G_L_Account__TABLECAPTION__________GLFilter; "G/L Account".TableCaption + ': ' + GLFilter)
            {
            }
            column(EmptyString; '')
            {
            }
            column(Totaldebit; Totaldebit)
            {
            }
            column(Totalcredit; -Totalcredit)
            {
            }
            column(Trial_BalanceCaption; Trial_BalanceCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Net_ChangeCaption; Net_ChangeCaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaption; PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaptionLbl)
            {
            }
            column(G_L_Account___Net_Change_Caption; G_L_Account___Net_Change_CaptionLbl)
            {
            }
            column(G_L_Account___Net_Change__Control22Caption; G_L_Account___Net_Change__Control22CaptionLbl)
            {
            }
            column(TotalsCaption; TotalsCaptionLbl)
            {
            }
            column(G_L_Account_No_; "G/L Account"."No.")
            {
            }
            column(OldNo_GLAccount; "G/L Account"."Old No.")
            {
            }
            column(NetChange_GLAccount; "G/L Account"."Net Change")
            {
            }
            column(Balance_GLAccount; "G/L Account".Balance)
            {
            }
            column(StartBalance; StartBalance)
            {
            }
            column(VarGLTotalDebits; VarGLTotalDebits)
            {
            }
            column(VarGLTotalCredits; VarGLTotalCredits)
            {
            }
            column(VarGLClosingBalance; VarGLClosingBalance)
            {
            }
            dataitem(Integer; Integer)
            {
                DataItemTableView = sorting(Number) where(Number = const(1));
                column(ReportForNavId_5444; 5444) { } // Autogenerated by ForNav - Do not delete
                column(G_L_Account___No__; "G/L Account"."No.")
                {
                }
                column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__Name; "G/L Account".Name)
                {
                }
                column(G_L_Account___Net_Change_; "G/L Account"."Net Change")
                {
                }
                column(G_L_Account___Net_Change__Control22; -"G/L Account"."Net Change")
                {
                    AutoFormatType = 1;
                }
                column(G_L_Account___No___Control25; "G/L Account"."No.")
                {
                }
                column(PADSTR_____G_L_Account__Indentation___3___G_L_Account__Name_Control26; PadStr('', "G/L Account".Indentation * 3) + "G/L Account".Name)
                {
                }
                column(G_L_Account___Net_Change__Control27; "G/L Account"."Net Change")
                {
                }
                column(G_L_Account___Net_Change__Control28; -"G/L Account"."Net Change")
                {
                    AutoFormatType = 1;
                }
                column(Integer_Number; Integer.Number)
                {
                }
            }
            trigger OnPreDataItem();
            begin
                company.Get();
                company.CalcFields(company.Picture);
            end;

            trigger OnAfterGetRecord();
            begin
                //=====================================================================Balance B/F
                StartBalance := 0;
                if VarReportFilter <> '' then
                    if (VarReportFilter <> '..*') then begin
                        SetFilter("Date Filter", VarOpeningBalDateFilter);
                        CalcFields(Balance);
                        StartBalance := Balance;
                    end;
                GLAccBalance := StartBalance;
                //=====================================================================End Balance B/F
                //====================================================================GL Closing Balance
                SetFilter("Date Filter", VarClosingBalDateFilter);
                CalcFields(Balance);
                VarGLClosingBalance := Balance;
                //====================================================================GL Closing Balance
                if (GLAccBalance = 0) and (VarGLClosingBalance = 0) then
                    CurrReport.Skip;
                //=======================================================Get Total Debits & Credits
                VarGLTotalDebits := 0;
                VarGLTotalCredits := 0;
                ObjGLEntry.Reset;
                ObjGLEntry.SetRange(ObjGLEntry."G/L Account No.", "No.");
                ObjGLEntry.SetFilter(ObjGLEntry."Posting Date", VarReportFilter);
                if ObjGLEntry.FindSet then begin
                    ObjGLEntry.CalcSums(ObjGLEntry."Debit Amount", ObjGLEntry."Credit Amount");
                    VarGLTotalDebits := ObjGLEntry."Debit Amount";
                    VarGLTotalCredits := ObjGLEntry."Credit Amount";
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(PrintToExcel; PrintToExcel)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Print to Excel';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GLFilter := "G/L Account".GetFilters;
        PeriodText := "G/L Account".GetFilter("Date Filter");
        VarReportFilter := "G/L Account".GetFilter("G/L Account"."Date Filter");
        //VarMinDateDateFilter:=SFactory.FnRunGetStatementDateFilter(VarReportFilter);
        VarMinDateDateFilter := "G/L Account".GetRangeMin("G/L Account"."Date Filter") - 1;
        VarDateFilterMax := "G/L Account".GetRangemax("G/L Account"."Date Filter");
        VarOpeningBalDateFilter := '..' + Format(VarMinDateDateFilter);
        VarClosingBalDateFilter := '..' + Format(VarDateFilterMax);
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Period: %1';
        GLFilter: Text[250];
        PeriodText: Text[30];
        Totaldebit: Decimal;
        Totalcredit: Decimal;
        Totaldebitbal: Decimal;
        Totalcreditbal: Decimal;
        company: Record "Company Information";
        Trial_BalanceCaptionLbl: label 'Trial Balance';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Net_ChangeCaptionLbl: label 'Net Change';
        No_CaptionLbl: label 'No.';
        PADSTR_____G_L_Account__Indentation___3___G_L_Account__NameCaptionLbl: label 'Name';
        G_L_Account___Net_Change_CaptionLbl: label 'Debit';
        G_L_Account___Net_Change__Control22CaptionLbl: label 'Credit';
        TotalsCaptionLbl: label 'Totals';
        ExcelBuf: Record "Excel Buffer" temporary;
        PrintToExcel: Boolean;
        Text001: label 'Trial Balance';
        Text002: label 'Data';
        Text003: label 'Debit';
        Text004: label 'Credit';
        Text005: label 'Company Name';
        Text006: label 'Report No.';
        Text007: label 'Report Name';
        Text008: label 'User ID';
        Text009: label 'Date';
        Text010: label 'G/L Filter';
        Text011: label 'Period Filter';
        VarReportFilter: Text;
        VarMinDateDateFilter: Date;
        SFactory: Codeunit "SURESTEP Factory";
        StartBalance: Decimal;
        GLAccBalance: Decimal;
        ObjGLEntry: Record "G/L Entry";
        VarGLTotalDebits: Decimal;
        VarGLTotalCredits: Decimal;
        VarDateFilterMax: Date;
        VarClosingBalDateFilter: Text;
        VarGLClosingBalance: Decimal;
        VarOpeningBalDateFilter: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516027_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
