#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516316_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50316 "PayrollSummary List."
{
    RDLCLayout = 'Layouts/PayrollSummaryList..rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Payroll Employee."; "Payroll Employee.")
        {
            DataItemTableView = sorting("No.") where(Status = const(Active));
            column(ReportForNavId_8631; 8631) { } // Autogenerated by ForNav - Do not delete
            column(PayrollNo_PayrollEmployee; "Payroll Employee."."Payroll No")
            {
            }
            column(SaccoMembershipNo_PayrollEmployee; "Payroll Employee."."Sacco Membership No.")
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(PeriodName; PeriodName)
            {
            }
            column(PayrollMode; PayrollMode)
            {
            }
            column(strEmpName; strEmpName)
            {
            }
            column(Period; SelectedPeriod)
            {
            }
            column(UserId; UserId)
            {
            }
            column(BasicPay; BasicPay)
            {
            }
            column(Grosspay; Grosspay)
            {
            }
            column(HR_Employee_No_; "Payroll Employee."."No.")
            {
            }
            column(ActingAllowance; ActingAllowance)
            {
            }
            column(HouseAllowance; HouseAllowance)
            {
            }
            column(MedicalAllowance; MedicalAllowance)
            {
            }
            column(LeaveAllowance; LeaveAllowance)
            {
            }
            column(EntertainmentAllowance; EntertainmentAllowance)
            {
            }
            column(CarAllowance; CarAllowance)
            {
            }
            column(CommuterAllowance; CommuterAllowance)
            {
            }
            column(RiskAllowance; RiskAllowance)
            {
            }
            column(StatutoryDeductionsTotal; StatutoryDeductionsTotal)
            {
            }
            column(PersonalRelief; PersonalRelief)
            {
            }
            column(StaffPensionContribution; StaffPensionContribution)
            {
            }
            column(OtherDeductions; OtherDeductions)
            {
            }
            column(TotalDeductions; TotalDeductions)
            {
            }
            column(NetPay; NetPay)
            {
            }
            trigger OnPreDataItem();
            begin
                /* IF PayrollMode<>PayrollMode::" " THEN BEGIN
                     "Payroll Employee.".SETRANGE("Payroll Employee."."Payment Mode",PayrollMode);
                 END;
                 */

            end;

            trigger OnAfterGetRecord();
            begin
                strEmpName := Firstname + ' ' + Surname + ' ' + Lastname;
                //Loop through the Income/Earnings and deductions************************************************************************
                PeriodTrans.Reset;
                PeriodTrans.SetRange(PeriodTrans."Employee Code", "No.");
                PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                PeriodTrans.SetCurrentkey(PeriodTrans."Employee Code", PeriodTrans."Period Month", PeriodTrans."Period Year",
                PeriodTrans."Group Order", PeriodTrans."Sub Group Order");
                StatutoryDeductionsTotal := 0;
                LeaveAllowance := 0;
                MedicalAllowance := 0;
                HouseAllowance := 0;
                EntertainmentAllowance := 0;
                ActingAllowance := 0;
                RiskAllowance := 0;
                CommuterAllowance := 0;
                StaffPensionContribution := 0;
                Grosspay := 0;
                BasicPay := 0;
                PersonalRelief := 0;
                OtherDeductions := 0;
                TotalDeductions := 0;
                NetPay := 0;
                if PeriodTrans.Find('-') then
                    repeat
                        FnSimpleTransactionAmount(PeriodTrans);
                        FnGetAllowanceAmount(PeriodTrans);
                        FnTotalStatutoryDeductions(PeriodTrans);
                    until PeriodTrans.Next = 0
                else
                    CurrReport.Skip;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(DateFilter; DateFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Payroll Period';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        SelectedPeriod := DateFilter;
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod."Date Opened", SelectedPeriod);
        if objPeriod.Find('-') then begin
            PeriodName := objPeriod."Period Name";
        end;
        if CompanyInfo.Get then
            CompanyInfo.CalcFields(CompanyInfo.Picture);
        ;
        ReportsForNavPre;
    end;

    var
        strEmpName: Text[100];
        PeriodTrans: Record "prPeriod Transactions.";
        TransCodes: Record "Payroll Transaction Code.";
        objPeriod: Record "Payroll Calender.";
        HREmployee: Record "Payroll Employee.";
        ActingAllowance: Decimal;
        MedicalAllowance: Decimal;
        LeaveAllowance: Decimal;
        EntertainmentAllowance: Decimal;
        CarAllowance: Decimal;
        CommuterAllowance: Decimal;
        RiskAllowance: Decimal;
        HouseAllowance: Decimal;
        UserSetup: Record "User Setup";
        SelectedPeriod: Date;
        DateFilter: Date;
        PeriodName: Text;
        CompanyInfo: Record "Company Information";
        PayrollMode: Code[50];
        BasicPay: Decimal;
        Grosspay: Decimal;
        PersonalRelief: Decimal;
        StaffPensionContribution: Decimal;
        OtherDeductions: Decimal;
        TotalDeductions: Decimal;
        NetPay: Decimal;
        StatutoryDeductionsTotal: Decimal;

    local procedure FnGetAllowanceAmount(ObjTransactions: Record "prPeriod Transactions.")
    begin
        case ObjTransactions."Transaction Code" of
            'E0001':
                LeaveAllowance := ObjTransactions.Amount;//Leave Allowance
            'E0002':
                MedicalAllowance := ObjTransactions.Amount;//Medical Allowance
            'E0003':
                HouseAllowance := ObjTransactions.Amount;//House Allowance
            'E0004':
                CarAllowance := ObjTransactions.Amount;//Car Allowance
            'E0005':
                EntertainmentAllowance := ObjTransactions.Amount;//Entertainment Allowance
                                                                 /*//Not required in Reporting of this Client. Uncomment and Add the Necessary Globals on Need basis
                                                                 'E0006'::=ObjTransactions.Amount;//Overtime
                                                                 'E0007'::=ObjTransactions.Amount;//Duty Allowance
                                                                 'E0008'::=ObjTransactions.Amount;//Tax Refund
                                                                 'E0009'::=ObjTransactions.Amount;//Stacker's Allowance
                                                                 'E0010'::=ObjTransactions.Amount;//Heavy duty Allowance
                                                                 'E0011'::=ObjTransactions.Amount;//Hardship Allowance
                                                                 'E0012'::=ObjTransactions.Amount;//Salary Arrears
                                                                 'E0013'::=ObjTransactions.Amount;//Special Duty
                                                                 'E0014'::=ObjTransactions.Amount;//House Allowance Arrears
                                                                 'E0015'::=ObjTransactions.Amount;//Watchman Allowance
                                                                 'E0016'::=ObjTransactions.Amount;//Employee Staff Saving-5%
                                                                 'E0017'::=ObjTransactions.Amount;//Employer Staff Saving-10%
                                                                 'E0018'::=ObjTransactions.Amount;//Medical Allowance Arrears
                                                                 */
                                                                 //'E0019'::=ObjTransactions.Amount;//Entertainment Allowance Arrears
            'E0020':
                ActingAllowance := ObjTransactions.Amount;//Acting Allowance
                                                          //'E0021'::=ObjTransactions.Amount;//Salary Underpayment
            'E0022':
                RiskAllowance := ObjTransactions.Amount;//Risk Allowance
            'E0023':
                CommuterAllowance := ObjTransactions.Amount;//Commuter Allowance
        end;

    end;

    local procedure FnSimpleTransactionAmount(ObjTransactions: Record "prPeriod Transactions.")
    begin
        case ObjTransactions."Transaction Code" of
            'BPAY':
                BasicPay := ObjTransactions.Amount;
            'GPAY':
                Grosspay := ObjTransactions.Amount;
            'PNSR':
                StaffPensionContribution := ObjTransactions.Amount;
            'PSNR':
                PersonalRelief := ObjTransactions.Amount;
            'OTHER-DED':
                OtherDeductions := ObjTransactions.Amount;
            'TOT-DED':
                TotalDeductions := ObjTransactions.Amount;
            'NPAY':
                NetPay := ObjTransactions.Amount;
        end;
    end;

    local procedure FnTotalStatutoryDeductions(ObjTransactions: Record "prPeriod Transactions.")
    begin
        case ObjTransactions."Group Text" of
            'STATUTORIES':
                StatutoryDeductionsTotal := StatutoryDeductionsTotal + ObjTransactions.Amount;
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516316_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
