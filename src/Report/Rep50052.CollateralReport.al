#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516052_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50052 "Collateral  Report"
{
    RDLCLayout = 'Layouts/CollateralReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loan Collateral Register"; "Loan Collateral Register")
        {
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Member No.", "Collateral Code";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(EntryNo; EntryNo)
            {
            }
            column(DocumentNo_LoanCollateralRegister; "Loan Collateral Register"."Document No")
            {
            }
            column(RegisteredOwner_LoanCollateralRegister; "Loan Collateral Register"."Registered Owner")
            {
            }
            column(MemberNo_LoanCollateralRegister; "Loan Collateral Register"."Member No.")
            {
            }
            column(MemberName_LoanCollateralRegister; "Loan Collateral Register"."Member Name")
            {
            }
            column(IDNo_LoanCollateralRegister; "Loan Collateral Register"."ID No.")
            {
            }
            column(CollateralDescription_LoanCollateralRegister; "Loan Collateral Register"."Collateral Description")
            {
            }
            column(DateReceived_LoanCollateralRegister; "Loan Collateral Register"."Date Received")
            {
            }
            column(ReceivedBy_LoanCollateralRegister; "Loan Collateral Register"."Received By")
            {
            }
            column(DateReleased_LoanCollateralRegister; "Loan Collateral Register"."Date Released")
            {
            }
            column(ReleasedBy_LoanCollateralRegister; "Loan Collateral Register"."Released By")
            {
            }
            column(Picture_LoanCollateralRegister; "Loan Collateral Register".Picture)
            {
            }
            column(NoSeries_LoanCollateralRegister; "Loan Collateral Register"."No. Series")
            {
            }
            column(RegistrationReferenceNo_LoanCollateralRegister; "Loan Collateral Register"."Registration/Reference No")
            {
            }
            column(InsuranceEffectiveDate_LoanCollateralRegister; "Loan Collateral Register"."Insurance Effective Date")
            {
            }
            column(InsuranceExpirationDate_LoanCollateralRegister; Format("Loan Collateral Register"."Insurance Expiration Date", 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(InsurancePolicyNo_LoanCollateralRegister; "Loan Collateral Register"."Insurance Policy No.")
            {
            }
            column(InsuranceAnnualPremium_LoanCollateralRegister; "Loan Collateral Register"."Insurance Annual Premium")
            {
            }
            column(PolicyCoverage_LoanCollateralRegister; "Loan Collateral Register"."Policy Coverage")
            {
            }
            column(TotalValueInsured_LoanCollateralRegister; "Loan Collateral Register"."Total Value Insured")
            {
            }
            column(Comment_LoanCollateralRegister; "Loan Collateral Register".Comment)
            {
            }
            column(InsuranceType_LoanCollateralRegister; "Loan Collateral Register"."Insurance Type")
            {
            }
            column(InsuranceVendorNo_LoanCollateralRegister; "Loan Collateral Register"."Insurance Vendor No.")
            {
            }
            column(AssetValue_LoanCollateralRegister; "Loan Collateral Register"."Asset Value")
            {
            }
            column(DepreciationCompletionDate_LoanCollateralRegister; "Loan Collateral Register"."Depreciation Completion Date")
            {
            }
            column(AssetDepreciationAmount_LoanCollateralRegister; "Loan Collateral Register"."Asset Depreciation Amount")
            {
            }
            column(AssetValueLoanCompletion_LoanCollateralRegister; "Loan Collateral Register"."Asset Value @Loan Completion")
            {
            }
            column(DepreciationPercentage_LoanCollateralRegister; "Loan Collateral Register"."Depreciation Percentage")
            {
            }
            column(CollateralPostingGroup_LoanCollateralRegister; "Loan Collateral Register"."Collateral Posting Group")
            {
            }
            column(CollateralDepreciationMethod_LoanCollateralRegister; "Loan Collateral Register"."Collateral Depreciation Method")
            {
            }
            column(Action_LoanCollateralRegister; "Loan Collateral Register".Action)
            {
            }
            column(ReceivedtoHQBy_LoanCollateralRegister; "Loan Collateral Register"."Received to HQ By")
            {
            }
            column(ReceivedtoHQOn_LoanCollateralRegister; "Loan Collateral Register"."Received to HQ On")
            {
            }
            column(LodgedtoStrongRoomBy_LoanCollateralRegister; "Loan Collateral Register"."Lodged to Strong Room By")
            {
            }
            column(LodgedtoStrongRoomOn_LoanCollateralRegister; "Loan Collateral Register"."Lodged to Strong Room On")
            {
            }
            column(RetrievedFromStrongRoomBy_LoanCollateralRegister; "Loan Collateral Register"."Retrieved From Strong Room By")
            {
            }
            column(RetrievedFromStrongRoomOn_LoanCollateralRegister; "Loan Collateral Register"."Retrieved From Strong Room On")
            {
            }
            column(IssuedtoLawyerBy_LoanCollateralRegister; "Loan Collateral Register"."Issued to Lawyer By")
            {
            }
            column(IssuedtoLawyerOn_LoanCollateralRegister; "Loan Collateral Register"."Issued to Lawyer On")
            {
            }
            column(LawyerCode_LoanCollateralRegister; "Loan Collateral Register"."Lawyer Code")
            {
            }
            column(LawyerName_LoanCollateralRegister; "Loan Collateral Register"."Lawyer Name")
            {
            }
            column(IssuedtoInsuranceAgentBy_LoanCollateralRegister; "Loan Collateral Register"."Issued to Insurance Agent By")
            {
            }
            column(IssuedtoInsuranceAgentOn_LoanCollateralRegister; "Loan Collateral Register"."Issued to Insurance Agent On")
            {
            }
            column(InsuranceAgentCode_LoanCollateralRegister; "Loan Collateral Register"."Insurance Agent Code")
            {
            }
            column(InsuranceAgentName_LoanCollateralRegister; "Loan Collateral Register"."Insurance Agent Name")
            {
            }
            column(ReleasedtoMemberBy_LoanCollateralRegister; "Loan Collateral Register"."Released to Member By")
            {
            }
            column(ReleasedtoMemberon_LoanCollateralRegister; "Loan Collateral Register"."Released to Member on")
            {
            }
            column(DispatchedtoBranchBy_LoanCollateralRegister; "Loan Collateral Register"."Dispatched to Branch By")
            {
            }
            column(DispatchedtoBranchOn_LoanCollateralRegister; "Loan Collateral Register"."Dispatched to Branch On")
            {
            }
            column(DispatchtoBranch_LoanCollateralRegister; "Loan Collateral Register"."Dispatch to Branch")
            {
            }
            column(ReceivedatBranchBy_LoanCollateralRegister; "Loan Collateral Register"."Received at Branch By")
            {
            }
            column(ReceivedatBranchOn_LoanCollateralRegister; "Loan Collateral Register"."Received at Branch On")
            {
            }
            column(ReceivedFromLawyerBy_LoanCollateralRegister; "Loan Collateral Register"."Received From Lawyer By")
            {
            }
            column(ReceivedFromLawyerOn_LoanCollateralRegister; "Loan Collateral Register"."Received From Lawyer On")
            {
            }
            column(IssuedtoAuctioneerBy_LoanCollateralRegister; "Loan Collateral Register"."Issued to Auctioneer By")
            {
            }
            column(IssuedtoAuctioneerOn_LoanCollateralRegister; "Loan Collateral Register"."Issued to Auctioneer On")
            {
            }
            column(BookedtoSafeCustodyBy_LoanCollateralRegister; "Loan Collateral Register"."Booked to Safe Custody By")
            {
            }
            column(BookedtoSafeCustodyOn_LoanCollateralRegister; "Loan Collateral Register"."Booked to Safe Custody On")
            {
            }
            column(LastCollateralAction_LoanCollateralRegister; "Loan Collateral Register"."Last Collateral Action")
            {
            }
            column(LodgedByCustodian1_LoanCollateralRegister; "Loan Collateral Register"."Lodged By(Custodian 1)")
            {
            }
            column(LodgedByCustodian2_LoanCollateralRegister; "Loan Collateral Register"."Lodged By(Custodian 2)")
            {
            }
            column(DateLodged_LoanCollateralRegister; "Loan Collateral Register"."Date Lodged")
            {
            }
            column(TimeLodged_LoanCollateralRegister; "Loan Collateral Register"."Time Lodged")
            {
            }
            column(ReleasedByCustodian1_LoanCollateralRegister; "Loan Collateral Register"."Released By(Custodian 1)")
            {
            }
            column(ReleasedByCustodian2_LoanCollateralRegister; "Loan Collateral Register"."Released By(Custodian 2)")
            {
            }
            column(DateReleasedfromSafeCustody_LoanCollateralRegister; "Loan Collateral Register"."Date Released from SafeCustody")
            {
            }
            column(TimeReleasedfromSafeCustody_LoanCollateralRegister; "Loan Collateral Register"."Time Released from SafeCustody")
            {
            }
            column(ChargeAccount_LoanCollateralRegister; "Loan Collateral Register"."Charge Account")
            {
            }
            column(PackageType_LoanCollateralRegister; "Loan Collateral Register"."Package Type")
            {
            }
            column(LastCollateralActionEntry_LoanCollateralRegister; "Loan Collateral Register"."Last Collateral Action Entry")
            {
            }
            column(InsuranceVendorName_LoanCollateralRegister; "Loan Collateral Register"."Insurance Vendor Name")
            {
            }
            column(CollateralCode_LoanCollateralRegister; "Loan Collateral Register"."Collateral Code")
            {
            }
            column(CollateralType_LoanCollateralRegister; "Loan Collateral Register"."Collateral Type")
            {
            }
            column(CollateralSecurityDescription_LoanCollateralRegister; "Loan Collateral Register"."CollateralSecurity Description")
            {
            }
            column(CollateralCategory_LoanCollateralRegister; "Loan Collateral Register"."Collateral Category")
            {
            }
            column(CollateralMultiplier_LoanCollateralRegister; "Loan Collateral Register"."Collateral Multiplier")
            {
            }
            column(MarketValue_LoanCollateralRegister; "Loan Collateral Register"."Market Value")
            {
            }
            column(ForcedSaleValue_LoanCollateralRegister; "Loan Collateral Register"."Forced Sale Value")
            {
            }
            column(LastValuedOn_LoanCollateralRegister; Format("Loan Collateral Register"."Last Valued On", 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(FileNo_LoanCollateralRegister; "Loan Collateral Register"."File No")
            {
            }
            column(VarLoanIssueDate; Format(VarLoanIssueDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VarLoanIssued; VarLoanIssued)
            {
            }
            column(VarLoanBalance; VarLoanBalance)
            {
            }
            column(VarExpectedCompletionDate; Format(VarExpectedCompletionDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VarAmountinArrears; VarAmountinArrears)
            {
            }
            column(VarDaysinArrears; VarDaysinArrears)
            {
            }
            column(VarDateClosed; Format(VarDateClosed, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(Releasedto_LoanCollateralRegister; "Loan Collateral Register"."Released to")
            {
            }
            column(VarCustodian1; VarCustodian1)
            {
            }
            column(VarCustodian2; VarCustodian2)
            {
            }
            column(VarLastActionDate; Format(VarLastActionDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VarIssuedTo; VarIssuedTo)
            {
            }
            trigger OnAfterGetRecord();
            begin
                EntryNo := EntryNo + 1;
                ObjLoanCollateralDetails.Reset;
                ObjLoanCollateralDetails.SetRange(ObjLoanCollateralDetails."Collateral Registe Doc", "Document No");
                if ObjLoanCollateralDetails.FindSet then begin
                    if ObjLoans.Get(ObjLoanCollateralDetails."Loan No") then begin
                        ObjLoans.CalcFields(ObjLoans."Outstanding Balance");
                        VarLoanIssueDate := ObjLoans."Issued Date";
                        VarLoanIssued := ObjLoans."Approved Amount";
                        VarLoanBalance := ObjLoans."Outstanding Balance";
                        VarExpectedCompletionDate := ObjLoans."Expected Date of Completion";
                        VarAmountinArrears := ObjLoans."Amount in Arrears";
                        VarDaysinArrears := ObjLoans."Days In Arrears";
                        VarDateClosed := ObjLoans."Closed On";
                    end;
                end;
                CalcFields("Last Collateral Action Entry");
                if ObjCollateralMovementII.Get("Last Collateral Action Entry") then begin
                    "Last Collateral Action" := ObjCollateralMovementII."Action Type";
                    Modify;
                end;
                ObjCollateralMovementII.Reset;
                ObjCollateralMovementII.SetRange(ObjCollateralMovementII."Collateral ID", "Document No");
                if ObjCollateralMovementII.FindSet then begin
                    VarCustodian1 := ObjCollateralMovementII."Actioned By(Custodian 1)";
                    VarCustodian2 := ObjCollateralMovementII."Actioned By(Custodian 2)";
                    if ObjCollateralMovementII."Action Type" = 'ISSUE TO LAWYER' then
                        VarIssuedTo := ObjCollateralMovementII."Lawyer Name";
                    if ObjCollateralMovementII."Action Type" = 'DISPATCH TO BRANCH' then
                        VarIssuedTo := ObjCollateralMovementII."Action Branch";
                    if ObjCollateralMovementII."Action Type" = 'RELEASE TO MEMBER' then
                        VarIssuedTo := ObjCollateralMovementII."Released to Member";
                    if ObjCollateralMovementII."Action Type" = 'ISSUE TO AUCTIONEER' then
                        VarIssuedTo := ObjCollateralMovementII."Auctioneer Name";
                    if ObjCollateralMovementII."Action Type" = 'ISSUE TO INSURANCE AGENT' then
                        VarIssuedTo := ObjCollateralMovementII."Insurance Agent Name";
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Company: Record "Company Information";
        ClosingBalPreviousDay: Decimal;
        TotalDeposits: Decimal;
        TotalWithdrawals: Decimal;
        ClosingBalToday: Decimal;
        GLAccountNo: Code[20];
        VendorPostingGroups: Record "Vendor Posting Group";
        StartDate: Date;
        PreviousDay: Date;
        CurrDate: Date;
        GLAccounts: Record "G/L Account";
        CurrDateFilter: Text;
        PrevDateFilter: Text;
        GLEntry: Record "G/L Entry";
        ASAT: Date;
        TransactedAccounts: Integer;
        GLEntries: Record "G/L Entry";
        VarDepositLimit: Decimal;
        VarWithdrawalLimit: Decimal;
        VarCurrAccountBal: Decimal;
        VarAccountName: Code[50];
        VarAccountType: Code[20];
        ObjVendor: Record Vendor;
        VarDepositCriteriaTrue: Boolean;
        VarWithdrawalCriteriaTrue: Boolean;
        ObjVendorLedg: Record "Vendor Ledger Entry";
        VarDepCount: Integer;
        VarWithCount: Integer;
        EntryNo: Integer;
        ObjLoanCollateralDetails: Record "Loan Collateral Details";
        ObjCollateralReg: Record "Loan Collateral Register";
        VarLoanIssueDate: Date;
        VarLoanIssued: Decimal;
        VarLoanBalance: Decimal;
        VarExpectedCompletionDate: Date;
        VarAmountinArrears: Decimal;
        VarDaysinArrears: Integer;
        VarDateClosed: Date;
        ObjLoans: Record "Loans Register";
        ObjCollateralMovementII: Record "Collateral Movement  Register";
        VarCustodian1: Text;
        VarCustodian2: Text;
        VarLastActionDate: Date;
        VarIssuedTo: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516052_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
