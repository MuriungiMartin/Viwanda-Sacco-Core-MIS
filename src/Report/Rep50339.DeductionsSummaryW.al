#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516339_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50339 "Deductions Summary W.."
{
    RDLCLayout = 'Layouts/DeductionsSummaryW...rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("prPeriod Transactions"; "prPeriod Transactions")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102755015; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102756027; COMPANYNAME)
            {
            }
            column(COMPANYNAME_Control1102756028; COMPANYNAME)
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(CompanyInfo_Picture_Control1102756014; CompanyInfo.Picture)
            {
            }
            column(CompName; CompName)
            {
            }
            column(Addr1; Addr1)
            {
            }
            column(Addr2; Addr2)
            {
            }
            column(Email; Email)
            {
            }
            column(PayrollSummary; 'COMPANY PAYROLL SUMMARY')
            {
            }
            column(PeriodNamez; 'PERIOD:  ' + PeriodName)
            {
            }
            column(TransDesc; 'TRANSACTION DESC.')
            {
            }
            column(payments; 'PAYMENTS')
            {
            }
            column(deductions; 'DEDUCTIONS')
            {
            }
            column(kirinyagatitle; COMPANYNAME)
            {
            }
            column(abreviation; 'MUST')
            {
            }
            column(DetDate; DetDate)
            {
            }
            column(EmpNo; "prPeriod Transactions"."Employee Code")
            {
            }
            column(empName; empName)
            {
            }
            column(EmpAmount; "prPeriod Transactions".Amount)
            {
            }
            column("code"; "prPeriod Transactions"."Transaction Code")
            {
            }
            column(name; "prPeriod Transactions"."Transaction Name")
            {
            }
            column(Transaction; "prPeriod Transactions"."Transaction Code" + ': ' + "prPeriod Transactions"."Transaction Name")
            {
            }
            column(TotLabel; "prPeriod Transactions"."Transaction Code" + ': ' + "prPeriod Transactions"."Transaction Name")
            {
            }
            trigger OnPreDataItem();
            begin
                if CompanyInfo.Get() then
                    CompanyInfo.CalcFields(CompanyInfo.Picture);
                CompName := CompanyInfo.Name;
                Addr1 := CompanyInfo.Address;
                Addr2 := CompanyInfo.City;
                Email := CompanyInfo."E-Mail";
                //LastFieldNo := FIELDNO("Period Year");
                "prPeriod Transactions".SetFilter("prPeriod Transactions"."Payroll Period", '=%1', SelectedPeriod);
            end;

            trigger OnAfterGetRecord();
            begin
                //  IF NOT (((("prPeriod Transactions"."Group Order"=1) AND
                //   ("prPeriod Transactions"."Sub Group Order"<>1)) OR
                //  ("prPeriod Transactions"."Group Order"=3) OR
                //   (("prPeriod Transactions"."Group Order"=4) AND
                //	("prPeriod Transactions"."Sub Group Order"<>0)))) THEN
                "prPayroll Periods".Reset;
                "prPayroll Periods".SetRange("prPayroll Periods"."Date Opened", SelectedPeriod);
                if "prPayroll Periods".Find('-') then begin
                    Clear(DetDate);
                    DetDate := Format("prPayroll Periods"."Period Name");
                end;
                Clear(empName);
                if emps.Get("prPeriod Transactions"."Employee Code") then
                    empName := emps."First Name" + ' ' + emps."Middle Name" + ' ' + emps."Last Name";
                if not (((("prPeriod Transactions"."Group Order" = 7) and
                     (("prPeriod Transactions"."Sub Group Order" <> 6)
                    and ("prPeriod Transactions"."Sub Group Order" <> 5))) or
                    (("prPeriod Transactions"."Group Order" = 8) and
                     ("prPeriod Transactions"."Sub Group Order" <> 9)))) then begin
                    CurrReport.Skip;
                end;
                /*
              CLEAR(rows);
              CLEAR(rows2);
              "prPeriod Transactions".RESET;
              "prPeriod Transactions".SETRANGE("Payroll Period",SelectedPeriod);
              "prPeriod Transactions".SETFILTER("Group Order",'=1|3|4|7|8|9');
              //"prPeriod Transactions".SETFILTER("prPeriod Transactions"."Sub Group Order",'=2');
              "prPeriod Transactions".SETCURRENTKEY("Payroll Period","Group Order","Sub Group Order");
              IF "prPeriod Transactions".FIND('-') THEN BEGIN
              CLEAR(DetDate);
              DetDate:=FORMAT("prPayroll Periods"."Period Name");
              REPEAT
              BEGIN
              IF "prPeriod Transactions".Amount>0 THEN BEGIN
              IF (("prPeriod Transactions"."Group Order"=4) AND ("prPeriod Transactions"."Sub Group Order"=0)) THEN
                GPY:=GPY+"prPeriod Transactions".Amount;
              IF (("prPeriod Transactions"."Group Order"=7) AND
              (("prPeriod Transactions"."Sub Group Order"=3) OR ("prPeriod Transactions"."Sub Group Order"=1) OR
               ("prPeriod Transactions"."Sub Group Order"=2)))  THEN
                STAT:=STAT+"prPeriod Transactions".Amount;
              IF (("prPeriod Transactions"."Group Order"=8) AND
              (("prPeriod Transactions"."Sub Group Order"=1) OR ("prPeriod Transactions"."Sub Group Order"=0))) THEN
                 DED:=DED+"prPeriod Transactions".Amount;
              IF (("prPeriod Transactions"."Group Order"=9) AND ("prPeriod Transactions"."Sub Group Order"=0)) THEN
                NETS:=NETS+"prPeriod Transactions".Amount;
              //TotalsAllowances:=TotalsAllowances+"prPeriod Transactions".Amount;
                  IF ((("prPeriod Transactions"."Group Order"=1) AND
                   ("prPeriod Transactions"."Sub Group Order"<>1)) OR
                  ("prPeriod Transactions"."Group Order"=3) OR
                   (("prPeriod Transactions"."Group Order"=4) AND
                    ("prPeriod Transactions"."Sub Group Order"<>0))) THEN BEGIN // A Payment
                    CLEAR(countz);
                   // countz:=1;
                    CLEAR(found);
                    REPEAT
                   BEGIN
                     countz:=countz+1;
                     IF (PayTrans[countz])="prPeriod Transactions"."Transaction Name" THEN found:=TRUE;
                     END;
                    UNTIL ((countz=(ARRAYLEN(PayTransAmt))) OR ((PayTrans[countz])="prPeriod Transactions"."Transaction Name")
                    OR ((PayTrans[countz])=''));
                   rows:= countz;
                  PayTrans[rows]:="prPeriod Transactions"."Transaction Name";
                  PayTransAmt[rows]:=PayTransAmt[rows]+"prPeriod Transactions".Amount;
                  END ELSE IF ((("prPeriod Transactions"."Group Order"=7) AND
                   (("prPeriod Transactions"."Sub Group Order"<>6)
                  AND ("prPeriod Transactions"."Sub Group Order"<>5))) OR
                  (("prPeriod Transactions"."Group Order"=8) AND
                   ("prPeriod Transactions"."Sub Group Order"<>9))) THEN BEGIN
                    CLEAR(countz);
                   // countz:=1;
                    CLEAR(found);
                    REPEAT
                   BEGIN
                     countz:=countz+1;
                     IF (DedTrans[countz])="prPeriod Transactions"."Transaction Name" THEN found:=TRUE;
                     END;
                    UNTIL ((countz=(ARRAYLEN(DedTransAmt))) OR ((DedTrans[countz])="prPeriod Transactions"."Transaction Name")
                    OR ((DedTrans[countz])=''));
                   rows:= countz;
                  DedTrans[rows]:="prPeriod Transactions"."Transaction Name";
                  DedTransAmt[rows]:=DedTransAmt[rows]+"prPeriod Transactions".Amount;
                  END;
                  END; // If Amount >0;
              END;
              UNTIL "prPeriod Transactions".NEXT=0;
              END;// End prPeriod Transactions Repeat
              // MESSAGE('Heh'+FORMAT(rows)+', '+FORMAT(rows2));
                                    */

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(periodfilter; PeriodFilter)
                {
                    ApplicationArea = Basic;
                    Caption = 'Period Filter';
                    TableRelation = "prPayroll Periods"."Date Opened";
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod.Closed, false);
        if objPeriod.Find('-') then;
        PeriodFilter := objPeriod."Date Opened";
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end;
        SelectedPeriod := PeriodFilter;
        objPeriod.Reset;
        objPeriod.SetRange(objPeriod."Date Opened", SelectedPeriod);
        if objPeriod.Find('-') then begin
            PeriodName := objPeriod."Period Name";
        end;
        if CompanyInfo.Get() then
            CompanyInfo.CalcFields(CompanyInfo.Picture);
        Clear(rows);
        Clear(GPY);
        Clear(STAT);
        Clear(DED);
        Clear(NETS);
        ;
        ReportsForNavPre;
    end;

    var
        UserSetup: Record "User Setup";
        CompName: Text[50];
        Addr1: Text[50];
        Addr2: Text[50];
        Email: Text[50];
        empName: Text[250];
        DetDate: Text[100];
        found: Boolean;
        countz: Integer;
        PeriodFilter: Date;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        PeriodTrans: Record "prPeriod Transactions";
        objPeriod: Record "prPayroll Periods";
        SelectedPeriod: Date;
        PeriodName: Text[30];
        CompanyInfo: Record "Company Information";
        TotalsAllowances: Decimal;
        Dept: Boolean;
        PaymentDesc: Text[200];
        DeductionDesc: Text[200];
        GroupText1: Text[200];
        GroupText2: Text[200];
        PaymentAmount: Decimal;
        DeductAmount: Decimal;
        PayTrans: array[70] of Text[250];
        PayTransAmt: array[70] of Decimal;
        DedTrans: array[70] of Text[250];
        DedTransAmt: array[70] of Decimal;
        rows: Integer;
        rows2: Integer;
        GPY: Decimal;
        NETS: Decimal;
        STAT: Decimal;
        DED: Decimal;
        TotalFor: label 'Total for ';
        GroupOrder: label '3';
        TransBal: array[2, 60] of Text[250];
        Addr: array[2, 10] of Text[250];
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        emps: Record "HR Employees";
        "prPayroll Periods": Record "prPayroll Periods";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516339_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
