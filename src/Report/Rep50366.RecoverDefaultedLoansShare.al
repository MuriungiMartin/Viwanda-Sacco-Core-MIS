#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516366_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50366 "Recover Defaulted Loans-Share"
{
    RDLCLayout = 'Layouts/RecoverDefaultedLoans-Share.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Members Register"; "Members Register")
        {
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            trigger OnAfterGetRecord();
            begin
                GenLedgerSetup.Get;
                "Loan&int" := 0;
                if Cust.Get("Members Register"."No.") then begin
                    Cust.SetRange(Cust."No.", Loanapp."Client Code");
                    Cust.CalcFields(Cust."Current Shares", Cust."Outstanding Balance");
                    TOTALLOANS := Cust."Outstanding Balance";
                    SHARES := Cust."Current Shares" * -1;
                    Message('CUSTOMER %1', SHARES);
                    Message('LOAN BAL %1', TOTALLOANS);
                    RunBal := Cust."Current Shares" * -1;
                    Gnljnline.Init;
                    Gnljnline."Journal Template Name" := 'GENERAL';
                    Gnljnline."Journal Batch Name" := 'DAF';
                    Gnljnline."Line No." := LineN + 450;
                    Gnljnline."Account Type" := Gnljnline."account type"::Member;
                    Gnljnline."Account No." := Cust."No.";
                    Gnljnline.Validate(Gnljnline."Account No.");
                    Gnljnline."Document No." := '120';
                    Gnljnline."Posting Date" := Today;
                    Gnljnline.Description := 'Deposit-Loan Offset';
                    Gnljnline.Amount := SHARES;
                    Gnljnline.Validate(Gnljnline.Amount);
                    Gnljnline."Transaction Type" := Gnljnline."transaction type"::Loan;
                    Gnljnline."Loan No" := Loanapp."Loan  No.";
                    if Gnljnline.Amount <> 0 then
                        Gnljnline.Insert;
                end;
                Loanapp.Reset;
                Loanapp.SetRange(Loanapp."Client Code", "Members Register"."No.");
                if Loanapp.Find('-') then begin
                    repeat
                        Loanapp.CalcFields(Loanapp."Outstanding Balance");
                        if Loanapp."Outstanding Balance" > 200 then begin
                            appotbal := SHARES + instlnclr;
                            if (Loanapp."Outstanding Balance") > SHARES then begin
                                TOTALLOANS := SHARES
                            end else
                                TOTALLOANS := (Loanapp."Outstanding Balance");
                            if Loanapp."Loan Product Type" <> 'DEFAULTER1' then begin
                                if Loanapp."Loan Product Type" <> 'INTARR' then begin
                                    NETSHARES := SHARES - instlnclr;
                                    if (Loanapp."Outstanding Balance") > 0 then begin
                                        Message('runbal %1', TOTALLOANS);
                                        Gnljnline.Init;
                                        Gnljnline."Journal Template Name" := 'GENERAL';
                                        Gnljnline."Journal Batch Name" := 'DAF';
                                        Gnljnline."Line No." := LineN;
                                        Gnljnline."Account Type" := Gnljnline."bal. account type"::Employee;
                                        Gnljnline."Account No." := Cust."No.";
                                        Gnljnline.Validate(Gnljnline."Account No.");
                                        Gnljnline."Document No." := '120';
                                        Gnljnline."Posting Date" := Today;
                                        Gnljnline.Description := 'Loan Repayment';
                                        Gnljnline.Amount := TOTALLOANS * -1;
                                        //Gnljnline."External Document No.":=GenBatches."Slip/Rcpt No";
                                        Gnljnline.Validate(Gnljnline.Amount);
                                        Gnljnline."Transaction Type" := Gnljnline."transaction type"::"Interest Paid";
                                        Gnljnline."Loan No" := Loanapp."Loan  No.";
                                        if Gnljnline.Amount <> 0 then
                                            Gnljnline.Insert;
                                        LineN := LineN + 300;
                                    end;
                                end;
                            end;
                        end;
                    until Loanapp.Next = 0;
                end;
                LineN := LineN + 10000;
                if instlnclr <> 0 then begin
                    Gnljnline.Init;
                    Gnljnline."Journal Template Name" := 'GENERAL';
                    Gnljnline."Journal Batch Name" := 'DAF';
                    Gnljnline."Line No." := LineN;
                    Gnljnline."Account Type" := Gnljnline."bal. account type"::Employee;
                    Gnljnline."Account No." := Cust."No.";
                    Gnljnline.Validate(Gnljnline."Account No.");
                    Gnljnline."Document No." := '120';
                    Gnljnline."Posting Date" := Today;
                    Gnljnline.Description := 'Loan Repayment';
                    if SHARES > instlnclr then begin
                        Gnljnline.Amount := instlnclr * -1;
                    end else
                        if SHARES < instlnclr then
                            Gnljnline.Amount := SHARES * -1;
                    Gnljnline.Validate(Gnljnline.Amount);
                    Gnljnline."Transaction Type" := Gnljnline."transaction type"::"Interest Paid";
                    Gnljnline."Loan No" := Loanapp."Loan  No.";
                    if Gnljnline.Amount <> 0 then
                        Gnljnline.Insert;
                    LineN := LineN + 300;
                    LineN := LineN + 10000;
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        PDate: Date;
        Interest: Decimal;
        GenSetUp: Record "Sacco General Set-Up";
        TextDateFormula2: Text[30];
        TextDateFormula1: Text[30];
        DateFormula2: DateFormula;
        DateFormula1: DateFormula;
        Vend: Record Vendor;
        LoanGuar: Record "Loans Guarantee Details";
        Lbal: Decimal;
        Cust: Record "Members Register";
        GenJournalLine: Record "Gen. Journal Line";
        GenLedgerSetup: Record "General Ledger Setup";
        Hesabu: Integer;
        Loanapp: Record "Loans Register";
        "Loan&int": Decimal;
        TotDed: Decimal;
        LoanType: Record "Loan Products Setup";
        Available: Decimal;
        Distributed: Decimal;
        WINDOW: Dialog;
        PostingCode: Codeunit "Gen. Jnl.-Post Line";
        SHARES: Decimal;
        TOTALLOANS: Decimal;
        Gnljnline: Record "Gen. Journal Line";
        LineN: Integer;
        instlnclr: Decimal;
        appotbal: Decimal;
        LOANAMOUNT: Decimal;
        PRODATA: Decimal;
        LOANAMOUNT2: Decimal;
        TOTALLOANSB: Decimal;
        NETSHARES: Decimal;
        Tinst: Decimal;
        Finst: Decimal;
        Floans: Decimal;
        RunBal: Decimal;
        NEWRUNBAL: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516366_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
