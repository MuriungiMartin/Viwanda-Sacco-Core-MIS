#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516061_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50649 "Loan Porfolio Summary By Age"

{
    RDLCLayout = 'Layouts/LoanPorfolioSummaryByAge.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loan Portfolio Provision"; "Loan Portfolio Provision")
        {
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(AsAt; Format(AsAt, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(Var18to24Count; "Var18<24Count")
            {
            }
            column(Var18to24DefaultPercentage; "Var18<24Default%")
            {
            }
            column(Var18to24OutstandingBal; "Var18<24OutstandingBal")
            {
            }
            column(Var18to24Performing; "Var18<24Performing")
            {
            }
            column(Var18to24NonPerforming; "Var18<24NonPerforming")
            {
            }
            column(Var25to34Count; "Var25<34Count")
            {
            }
            column(Var25to34DefaultPercentage; "Var25<34Default%")
            {
            }
            column(Var25to34OutstandingBal; "Var25<34OutstandingBal")
            {
            }
            column(Var25to34Performing; "Var25<34Performing")
            {
            }
            column(Var25to34NonPerforming; "Var25<34NonPerforming")
            {
            }
            column(Var35to44Count; "Var35<44Count")
            {
            }
            column(Var35to44DefaultPercentage; "Var35<44Default%")
            {
            }
            column(Var35to44OutstandingBal; "Var35<44OutstandingBal")
            {
            }
            column(Var35to44Performing; "Var35<44Performing")
            {
            }
            column(Var35to44NonPerforming; "Var35<44NonPerforming")
            {
            }
            column(Var45to54Count; "Var45<54Count")
            {
            }
            column(Var45to54DefaultPercentage; "Var45<54Default%")
            {
            }
            column(Var45to54OutstandingBal; "Var45<54OutstandingBal")
            {
            }
            column(Var45to54Performing; "Var45<54Performing")
            {
            }
            column(Var45to54NonPerforming; "Var45<54NonPerforming")
            {
            }
            column(Var55to64Count; "Var55<64Count")
            {
            }
            column(Var55to64DefaultPercentage; "Var55<64Default%")
            {
            }
            column(Var55to64OutstandingBal; "Var55<64OutstandingBal")
            {
            }
            column(Var55to64Performing; "Var55<64Performing")
            {
            }
            column(Var55to64NonPerforming; "Var55<64NonPerforming")
            {
            }
            column(Var65to74Count; "Var65<74Count")
            {
            }
            column(Var65to74DefaultPercentage; "Var65<74Default%")
            {
            }
            column(Var65to74OutstandingBal; "Var65<74OutstandingBal")
            {
            }
            column(Var65to74Performing; "Var65<74Performing")
            {
            }
            column(Var65to74NonPerforming; "Var65<74NonPerforming")
            {
            }
            column(VarGreaterthan75Count; "Var>75Count")
            {
            }
            column(VarGreaterthan75DefaultPercentge; "Var>75Default%")
            {
            }
            column(VarGreaterthan75OutstandingBal; "Var>75OutstandingBal")
            {
            }
            column(VarGreaterthan75Performing; "Var>75Performing")
            {
            }
            column(VarGreaterthan75NonPerforming; "Var>75NonPerforming")
            {
            }
            column(VarTotalCount; VarTotalCount)
            {
            }
            column(VarTotalOutstandingBal; VarTotalOutstandingBal)
            {
            }
            column(VarTotalPerforming; VarTotalPerforming)
            {
            }
            column(VarTotalNonPerforming; VarTotalNonPerforming)
            {
            }
            trigger OnPreDataItem();
            begin
                Company.Get();
                Company.CalcFields(Company.Picture);
                if AsAt = 0D then
                    Error('Specify the As At Date on the Report');
                FnRunAnalysisByMemberAge;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("As At"; AsAt)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        AsAt: Date;
        Company: Record "Company Information";
        SFactory: Codeunit "SURESTEP Factory";
        ObjGensetup: Record "Sacco General Set-Up";
        "Var<18Count": Integer;
        "Var<18%": Decimal;
        "Var18<24Count": Integer;
        "Var18<24Default%": Decimal;
        "Var18<24OutstandingBal": Decimal;
        "Var18<24Performing": Decimal;
        "Var18<24NonPerforming": Decimal;
        "Var25<34Count": Integer;
        "Var25<34Default%": Decimal;
        "Var25<34OutstandingBal": Decimal;
        "Var25<34Performing": Decimal;
        "Var25<34NonPerforming": Decimal;
        "Var35<44Count": Integer;
        "Var35<44Default%": Decimal;
        "Var35<44OutstandingBal": Decimal;
        "Var35<44Performing": Decimal;
        "Var35<44NonPerforming": Decimal;
        "Var45<54Count": Integer;
        "Var45<54Default%": Decimal;
        "Var45<54OutstandingBal": Decimal;
        "Var45<54Performing": Decimal;
        "Var45<54NonPerforming": Decimal;
        "Var55<64Count": Integer;
        "Var55<64Default%": Decimal;
        "Var55<64OutstandingBal": Decimal;
        "Var55<64Performing": Decimal;
        "Var55<64NonPerforming": Decimal;
        "Var65<74Count": Decimal;
        "Var65<74Default%": Decimal;
        "Var65<74OutstandingBal": Decimal;
        "Var65<74Performing": Decimal;
        "Var65<74NonPerforming": Decimal;
        "Var>75Count": Integer;
        "Var>75Default%": Decimal;
        "Var>75OutstandingBal": Decimal;
        "Var>75Performing": Decimal;
        "Var>75NonPerforming": Decimal;
        ObjMembers: Record "Members Register";
        CurrReport_PAGENOCaptionLbl: label 'Page';
        RISK_CLASSIFICATION_OF_ASSETS_AND_PROVISIONINGCaptionLbl: label 'RISK CLASSIFICATION OF ASSETS AND PROVISIONING';
        FORM_4CaptionLbl: label 'FORM 4';
        SASRA_2_004CaptionLbl: label 'SASRA 2/004';
        R__46_CaptionLbl: label 'R.(46)';
        ObjMemberII: Record "Members Register";
        VarAge: Integer;
        VarAge2: Integer;
        ObjLoanPorfolioProvision: Record "Loan Portfolio Provision";
        VarTotalCount: Integer;
        VarTotalOutstandingBal: Decimal;
        VarTotalPerforming: Decimal;
        VarTotalNonPerforming: Decimal;

    local procedure FnRunAnalysisByMemberAge()
    begin
        ObjGensetup.Get();
        //========================================================18 to 24
        //==================================18 to 24 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 18, 24);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var18<24Count" := ObjLoanPorfolioProvision.Count;
            "Var18<24OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================18 to 24 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 18, 24);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var18<24Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================18 to 24 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 18, 24);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var18<24NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var18<24Default%" := ROUND(("Var18<24NonPerforming" / "Var18<24OutstandingBal") * 100, 1, '=');
        //========================================================25 to 34
        //==================================25 to 34 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 25, 34);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var25<34Count" := ObjLoanPorfolioProvision.Count;
            "Var25<34OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================25 to 34 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 25, 34);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var25<34Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================25 to 34 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 25, 34);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var25<34NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var25<34Default%" := ROUND(("Var25<34NonPerforming" / "Var25<34OutstandingBal") * 100, 1, '=');
        //========================================================35 to 44
        //==================================35 to 44 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 35, 44);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var35<44Count" := ObjLoanPorfolioProvision.Count;
            "Var35<44OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================35 to 44 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 35, 44);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var35<44Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================35 to 44 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 35, 44);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var35<44NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var35<44Default%" := ROUND(("Var35<44NonPerforming" / "Var35<44OutstandingBal") * 100, 1, '=');
        //========================================================45 to 54
        //==================================45 to 54 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 45, 54);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var45<54Count" := ObjLoanPorfolioProvision.Count;
            "Var45<54OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================45 to 54 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 45, 54);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var45<54Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================45 to 54 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 45, 54);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var45<54NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var45<54Default%" := ROUND(("Var45<54NonPerforming" / "Var45<54OutstandingBal") * 100, 1, '=');
        //========================================================55 to 64
        //==================================55 to 64 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 55, 64);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var55<64Count" := ObjLoanPorfolioProvision.Count;
            "Var55<64OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================55 to 64 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 55, 64);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var55<64Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================55 to 64 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 55, 64);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var55<64NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var55<64Default%" := ROUND(("Var55<64NonPerforming" / "Var55<64OutstandingBal") * 100, 1, '=');
        //========================================================65 to 74
        //==================================65 to 74 Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 65, 74);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var65<74Count" := ObjLoanPorfolioProvision.Count;
            "Var65<74OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================65 to 74 Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 65, 74);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var65<74Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================65 to 74 Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1&<=%2', 65, 74);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var65<74NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var65<74Default%" := ROUND(("Var65<74NonPerforming" / "Var65<74OutstandingBal") * 100, 1, '=');
        //========================================================75 and Above
        //==================================75 and Above Totals
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1', 75);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var>75Count" := ObjLoanPorfolioProvision.Count;
            "Var>75OutstandingBal" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================75 and Above Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetRange(ObjLoanPorfolioProvision.Classification, ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1', 75);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var>75Performing" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        //==================================75 and Above Non Performing
        ObjLoanPorfolioProvision.Reset;
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision.Classification, '<>%1', ObjLoanPorfolioProvision.Classification::Perfoming);
        ObjLoanPorfolioProvision.SetFilter(ObjLoanPorfolioProvision."Member Age", '>=%1', 75);
        if ObjLoanPorfolioProvision.FindSet then begin
            ObjLoanPorfolioProvision.CalcSums(ObjLoanPorfolioProvision."Outstanding Balance");
            "Var>75NonPerforming" := ObjLoanPorfolioProvision."Outstanding Balance";
        end;
        "Var>75Default%" := ROUND(("Var>75NonPerforming" / "Var>75OutstandingBal") * 100, 1, '=');
        //==================================================================================Totals
        VarTotalCount := "Var18<24Count" + "Var25<34Count" + "Var35<44Count" + "Var45<54Count" + "Var55<64Count" + "Var65<74Count" + "Var>75Count";
        VarTotalOutstandingBal := "Var18<24OutstandingBal" + "Var25<34OutstandingBal" + "Var35<44OutstandingBal" + "Var45<54OutstandingBal" + "Var55<64OutstandingBal" + "Var65<74OutstandingBal" + "Var>75OutstandingBal";
        VarTotalPerforming := "Var18<24Performing" + "Var25<34Performing" + "Var35<44Performing" + "Var45<54Performing" + "Var55<64Performing" + "Var65<74Performing" + "Var>75Performing";
        VarTotalNonPerforming := "Var18<24NonPerforming" + "Var25<34NonPerforming" + "Var35<44NonPerforming" + "Var45<54NonPerforming" + "Var55<64NonPerforming" + "Var65<74NonPerforming" + "Var>75NonPerforming";
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516061_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
