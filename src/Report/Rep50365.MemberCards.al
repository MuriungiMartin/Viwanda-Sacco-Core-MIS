#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516365_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50365 "Member Cards"
{
    Caption = 'Customer - Labels';
    RDLCLayout = 'Layouts/MemberCards.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Members Register"; "Members Register")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", Name;
            column(ReportForNavId_6836; 6836) { } // Autogenerated by ForNav - Do not delete
            column(CustAddr_1__1_; CustAddr[1] [1])
            {
            }
            column(CustAddr_1__2_; CustAddr[1] [2])
            {
            }
            column(CustAddr_1__3_; CustAddr[1] [3])
            {
            }
            column(CustAddr_1__4_; CustAddr[1] [4])
            {
            }
            column(CustAddr_1__5_; CustAddr[1] [5])
            {
            }
            column(CustAddr_1__6_; CustAddr[1] [6])
            {
            }
            column(CustAddr_2__1_; CustAddr[2] [1])
            {
            }
            column(CustAddr_2__2_; CustAddr[2] [2])
            {
            }
            column(CustAddr_2__3_; CustAddr[2] [3])
            {
            }
            column(CustAddr_2__4_; CustAddr[2] [4])
            {
            }
            column(CustAddr_2__5_; CustAddr[2] [5])
            {
            }
            column(CustAddr_2__6_; CustAddr[2] [6])
            {
            }
            column(CustAddr_3__1_; CustAddr[3] [1])
            {
            }
            column(CustAddr_3__2_; CustAddr[3] [2])
            {
            }
            column(CustAddr_3__3_; CustAddr[3] [3])
            {
            }
            column(CustAddr_3__4_; CustAddr[3] [4])
            {
            }
            column(CustAddr_3__5_; CustAddr[3] [5])
            {
            }
            column(CustAddr_3__6_; CustAddr[3] [6])
            {
            }
            column(CustAddr_1__7_; CustAddr[1] [7])
            {
            }
            column(CustAddr_1__8_; CustAddr[1] [8])
            {
            }
            column(CustAddr_2__7_; CustAddr[2] [7])
            {
            }
            column(CustAddr_2__8_; CustAddr[2] [8])
            {
            }
            column(CustAddr_3__7_; CustAddr[3] [7])
            {
            }
            column(CustAddr_3__8_; CustAddr[3] [8])
            {
            }
            column(ShowBody1; (ColumnNo = 0) and (LabelFormat = Labelformat::"36 x 70 mm (3 columns)"))
            {
            }
            column(GroupNo1; GroupNo)
            {
            }
            column(ShowBody2; (ColumnNo = 0) and (LabelFormat = Labelformat::"37 x 70 mm (3 columns)"))
            {
            }
            column(ShowBody3; (ColumnNo = 0) and (LabelFormat = Labelformat::"36 x 105 mm (2 columns)"))
            {
            }
            column(ShowBody4; (ColumnNo = 0) and (LabelFormat = Labelformat::"37 x 105 mm (2 columns)"))
            {
            }
            trigger OnPreDataItem();
            begin
                case LabelFormat of
                    Labelformat::"36 x 70 mm (3 columns)", Labelformat::"37 x 70 mm (3 columns)":
                        NoOfColumns := 3;
                    Labelformat::"36 x 105 mm (2 columns)", Labelformat::"37 x 105 mm (2 columns)":
                        NoOfColumns := 2;
                end;
                NoOfRecords := Count;
                RecordNo := 0;
            end;

            trigger OnAfterGetRecord();
            begin
                RecordNo := RecordNo + 1;
                ColumnNo := ColumnNo + 1;
                //FormatAddr.Customer(CustAddr[ColumnNo],"Members Register");
                //FormatAddr.
                if RecordNo = NoOfRecords then begin
                    for i := ColumnNo + 1 to NoOfColumns do
                        Clear(CustAddr[i]);
                    ColumnNo := 0;
                end else begin
                    if ColumnNo = NoOfColumns then
                        ColumnNo := 0;
                end;
                if ColumnNo = 0 then begin
                    if Counter = RecPerPageNum then begin
                        GroupNo := GroupNo + 1;
                        Counter := 0;
                    end;
                    Counter := Counter + 1;
                end;
            end;

        }
    }

    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(LabelFormat; LabelFormat)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Format';
                        OptionCaption = '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GroupNo := 1;
        RecPerPageNum := 5;
        ;
        ReportsForNavPre;
    end;

    var
        LabelFormat: Option "36 x 70 mm (3 columns)","37 x 70 mm (3 columns)","36 x 105 mm (2 columns)","37 x 105 mm (2 columns)";
        CustAddr: array[3, 8] of Text[50];
        NoOfRecords: Integer;
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        i: Integer;
        GroupNo: Integer;
        Counter: Integer;
        RecPerPageNum: Integer;
        FormatAddr: Codeunit "Format Address";
        Cust: Record "Members Register";

    procedure InitializeRequest(SetLabelFormat: Option)
    begin
        LabelFormat := SetLabelFormat;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516365_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
