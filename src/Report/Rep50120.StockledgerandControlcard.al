#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516120_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50120 "Stock ledger and Control card"
{
    RDLCLayout = 'Layouts/StockledgerandControlcard.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Item Ledger Entry"; "Item Ledger Entry")
        {
            RequestFilterFields = "Item No.", "Posting Date", "Source No.", "Location Code";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(Date; "Item Ledger Entry"."Posting Date")
            {
            }
            column(Document_No; "Item Ledger Entry"."Document No.")
            {
            }
            column(Supplier_Requisitioning_Office; "Item Ledger Entry"."Source No.")
            {
            }
            column(Quantity; "Item Ledger Entry".Quantity)
            {
            }
            column(Receipt; Receipt)
            {
            }
            column(InvoiceUnitPrice; InvoiceUnitPrice)
            {
            }
            column(Value; "Item Ledger Entry"."Cost Amount (Actual)")
            {
            }
            column(Issue; Issue)
            {
            }
            column(Balance; Balance)
            {
            }
            column(Item_Description; ItemDescription)
            {
            }
            column(Unit_of_Issue; UnitofIssue)
            {
            }
            column(Location; Location)
            {
            }
            column(ReceiptValue; ReceiptValue)
            {
            }
            column(IssueValue; IssueValue)
            {
            }
            column(Cost_Balance; ValueBal)
            {
            }
            column(AverageUnitPrice; AverageUnitPrice)
            {
            }
            trigger OnPreDataItem();
            begin
                //Get item details for header
                Location := "Item Ledger Entry".GetFilter("Item Ledger Entry"."Location Code");
                ItemNo := "Item Ledger Entry".GetFilter("Item Ledger Entry"."Item No.");
                Item.SetRange(Item."No.", ItemNo);
                if Item.Find('-') then begin
                    ItemDescription := Item.Description;
                    UnitofIssue := Item."Base Unit of Measure";
                end;
            end;

            trigger OnAfterGetRecord();
            begin
                Receipt := 0;
                Issue := 0;
                ReceiptValue := 0;
                IssueValue := 0;
                Balance := 0;
                InvoiceUnitPrice := 0;
                if "Item Ledger Entry".Positive = true then begin
                    Receipt := "Item Ledger Entry".Quantity;
                    ReceiptValue := "Item Ledger Entry"."Cost Amount (Actual)";
                    InvoiceUnitPrice := "Item Ledger Entry"."Cost Amount (Actual)" / "Item Ledger Entry".Quantity;
                    //IssueValue := FORMAT('');  //During receipts, issues should be null
                end else begin
                    Issue := 0 - "Item Ledger Entry".Quantity; //To register quantity as a positive
                    IssueValue := 0 - "Item Ledger Entry"."Cost Amount (Actual)";
                    AverageUnitPrice := "Item Ledger Entry"."Cost Amount (Actual)" / "Item Ledger Entry".Quantity;
                    // ReceiptValue := FORMAT(''); //During issues, receipts should be null
                end;
                //Keep track of running balances of total receipts and issues
                TotReceipt := TotReceipt + Receipt;
                TotIssue := TotIssue + Issue;
                Balance := TotReceipt - TotIssue;
                ValueBal := ValueBal + "Item Ledger Entry"."Cost Amount (Actual)";
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Receipt: Integer;
        Issue: Integer;
        Balance: Integer;
        TotReceipt: Integer;
        TotIssue: Integer;
        InvoiceUnitPrice: Decimal;
        ItemDescription: Text;
        UnitofIssue: Text;
        Location: Text;
        ItemNo: Text;
        Item: Record Item;
        ReceiptValue: Decimal;
        IssueValue: Decimal;
        ValueBal: Decimal;
        AverageUnitPrice: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516120_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
