#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516953_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50953 "Loans Batch Payments"
{
    RDLCLayout = 'Layouts/LoansBatchPayments.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loans Register"; "Loans Register")
        {
            DataItemTableView = sorting("Loan  No.") order(ascending);
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Loan  No.", Source, "Loan Product Type", "Date filter", "Application Date", "Loan Status", "Issued Date", Posted, "Batch No.", "Captured By", "Branch Code", "Outstanding Balance", "Date Approved", "Employer Code", "Loans Category", "Disbursed By", "Checked By";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(LoanType; LoanType)
            {
            }
            column(RFilters; RFilters)
            {
            }
            column(CompanyInfoName; CompanyInfo.Name)
            {
            }
            column(CompanyLetter_Head; CompanyInfo.Letter_Head)
            {
            }
            column(CompanyInfoPhone; CompanyInfo."Phone No.")
            {
            }
            column(CompanyInfoAddress; CompanyInfo.Address)
            {
            }
            column(CompanyInfo__E_Mail_; CompanyInfo."E-Mail")
            {
            }
            column(InterestUpfront_LoansRegister; "Loans Register"."Interest Upfront")
            {
            }
            column(CompanyInfoAddress2; CompanyInfo."Address 2")
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(Loans__Loan__No__; "Loans Register"."Loan  No.")
            {
            }
            column(ChequeNo_LoansRegister; "Loans Register"."Cheque No.")
            {
            }
            column(BatchNo_LoansRegister; "Loans Register"."Batch No.")
            {
            }
            column(LoanDisbursementDate_LoansRegister; "Loans Register"."Loan Disbursement Date")
            {
            }
            column(Loans__Client_Code_; "Loans Register"."Client Code")
            {
            }
            column(CapturedBy_LoansRegister; "Loans Register"."Captured By")
            {
            }
            column(CheckedBy_LoansRegister; "Loans Register"."Checked By")
            {
            }
            column(Loans__Client_Name_; "Loans Register"."Client Name")
            {
            }
            column(LoanOffsetAmount_LoansRegister; "Loans Register"."Loan Offset Amount")
            {
            }
            column(OffsetCommission_LoansRegister; "Loans Register"."Offset Commission")
            {
            }
            column(LoanProductTypeName_LoansRegister; "Loans Register"."Loan Product Type Name")
            {
            }
            column(Loans__Requested_Amount_; "Loans Register"."Requested Amount")
            {
            }
            column(TotalsLoanOutstanding_Loans; "Loans Register"."Total loan Outstanding")
            {
            }
            column(Loans__Approved_Amount_; "Loans Register"."Approved Amount")
            {
            }
            column(Upfronts; "Loans Register".Upfronts)
            {
            }
            column(Netdisbursed; Netdisbursed)
            {
            }
            column(CurrentShares_Loans; "Loans Register"."Current Shares")
            {
            }
            column(LoanInsurance_LoansRegister; "Loans Register"."Loan Insurance")
            {
            }
            column(EmployerName_Loans; "Loans Register"."Employer Name")
            {
            }
            column(LoansInsurance_LoansRegister; "Loans Register"."Loans Insurance")
            {
            }
            column(TotalUpfronts; TotalUpfronts)
            {
            }
            column(EmployerCode_Loans; "Loans Register"."Employer Code")
            {
            }
            column(TotalNetPay; TotalNetPay)
            {
            }
            column(NumberText_1_; NumberText[1])
            {
            }
            column(Loans_Installments; "Loans Register".Installments)
            {
            }
            column(DateApproved_Loans; Format("Loans Register"."Date Approved"))
            {
            }
            column(Loans__Loan_Status_; "Loans Register"."Loan Status")
            {
            }
            column(Loans_Loans__Outstanding_Balance_; "Loans Register"."Outstanding Balance")
            {
            }
            column(Loans__Application_Date_; "Loans Register"."Application Date")
            {
            }
            column(Loans__Issued_Date_; "Loans Register"."Issued Date")
            {
            }
            column(Loans__Oustanding_Interest_; "Loans Register"."Outstanding Interest")
            {
            }
            column(Loans_Loans__Loan_Product_Type_; "Loans Register"."Loan Product Type")
            {
            }
            column(Loans__Last_Pay_Date_; "Loans Register"."Last Pay Date")
            {
            }
            column(Loans__Top_Up_Amount_; "Loans Register"."Loan Offset Amount")
            {
            }
            column(PayingBankAccountNo_LoansRegister; "Loans Register"."Paying Bank Account No")
            {
            }
            column(BankName; BankAccount.Name)
            {
            }
            column(Loans__Approved_Amount__Control1102760017; "Loans Register"."Approved Amount")
            {
            }
            column(Loans__Requested_Amount__Control1102760038; "Loans Register"."Requested Amount")
            {
            }
            column(LCount; LCount)
            {
            }
            column(Loans_Loans__Outstanding_Balance__Control1102760040; "Loans Register"."Outstanding Balance")
            {
            }
            column(Loans__Oustanding_Interest__Control1102760041; "Loans Register"."Outstanding Interest")
            {
            }
            column(Loans__Top_Up_Amount__Control1000000001; "Loans Register"."Loan Offset Amount")
            {
            }
            column(Loans_RegisterCaption; Loans_RegisterCaptionLbl)
            {
            }
            column(PaymentMethod; PaymentMethod)
            {
            }
            column(Currency; Currency)
            {
            }
            column(DRAcc; DRAcc)
            {
            }
            column(MemAccNo; MemAccNo)
            {
            }
            column(BankCode; BankCode)
            {
            }
            column(Branchcode; Branchcode)
            {
            }
            column(Bankcode2; Bankcode2)
            {
            }
            column(StaffNo_LoansRegister; "Loans Register"."Staff No")
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Loan_TypeCaption; Loan_TypeCaptionLbl)
            {
            }
            column(Loans__Loan__No__Caption; FieldCaption("Loan  No."))
            {
            }
            column(Client_No_Caption; Client_No_CaptionLbl)
            {
            }
            column(Comment; Comment)
            {
            }
            column(Loans__Client_Name_Caption; FieldCaption("Client Name"))
            {
            }
            column(Loans__Requested_Amount_Caption; FieldCaption("Requested Amount"))
            {
            }
            column(Loans__Approved_Amount_Caption; FieldCaption("Approved Amount"))
            {
            }
            column(Loans__Loan_Status_Caption; FieldCaption("Loan Status"))
            {
            }
            column(Outstanding_LoanCaption; Outstanding_LoanCaptionLbl)
            {
            }
            column(PeriodCaption; PeriodCaptionLbl)
            {
            }
            column(Loans__Application_Date_Caption; FieldCaption("Application Date"))
            {
            }
            column(Approved_DateCaption; Approved_DateCaptionLbl)
            {
            }
            column(Loans__Oustanding_Interest_Caption; FieldCaption("Outstanding Interest"))
            {
            }
            column(Loan_TypeCaption_Control1102760043; Loan_TypeCaption_Control1102760043Lbl)
            {
            }
            column(Loans__Last_Pay_Date_Caption; FieldCaption("Last Pay Date"))
            {
            }
            column(Loans__Top_Up_Amount_Caption; FieldCaption("Loan Offset Amount"))
            {
            }
            column(Verified_By__________________________________________________Caption; Verified_By__________________________________________________CaptionLbl)
            {
            }
            column(Confirmed_By__________________________________________________Caption; Confirmed_By__________________________________________________CaptionLbl)
            {
            }
            column(Sign________________________Caption; Sign________________________CaptionLbl)
            {
            }
            column(Sign________________________Caption_Control1102755003; Sign________________________Caption_Control1102755003Lbl)
            {
            }
            column(Date________________________Caption; Date________________________CaptionLbl)
            {
            }
            column(Date________________________Caption_Control1102755005; Date________________________Caption_Control1102755005Lbl)
            {
            }
            column(NameCreditOff; NameCreditOff)
            {
            }
            column(NameCreditDate; NameCreditDate)
            {
            }
            column(NameCreditSign; NameCreditSign)
            {
            }
            column(NameCreditMNG; NameCreditMNG)
            {
            }
            column(NameCreditMNGDate; NameCreditMNGDate)
            {
            }
            column(NameCreditMNGSign; NameCreditMNGSign)
            {
            }
            column(NameCEO; NameCEO)
            {
            }
            column(NameCEOSign; NameCEOSign)
            {
            }
            column(NameCEODate; NameCEODate)
            {
            }
            column(CreditCom1; CreditCom1)
            {
            }
            column(CreditCom1Date; CreditCom1Date)
            {
            }
            column(CreditCom2; CreditCom2)
            {
            }
            column(CreditCom2Sign; CreditCom2Sign)
            {
            }
            column(CreditCom2Date; CreditCom2Date)
            {
            }
            column(CreditCom3; CreditCom3)
            {
            }
            column(CreditComDate3; CreditComDate3)
            {
            }
            column(CreditComSign3; CreditComSign3)
            {
            }
            column(COMPPIC; PICTURE)
            {
            }
            column(Name; Name)
            {
            }
            column(Category; "Loans Register"."Loans Category")
            {
            }
            column(TranchAmountDisbursed_LoansRegister; "Loans Register"."Tranch Amount Disbursed")
            {
            }
            dataitem("Loan trunch Disburesment"; "Loan trunch Disburesment")
            {
                CalcFields = "Total Loans Offset";
                DataItemLink = "Batch No" = field("Batch No.");
                RequestFilterFields = "Document No";
                column(ReportForNavId_16; 16) { } // Autogenerated by ForNav - Do not delete
                column(DocumentNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Document No")
                {
                }
                column(MemberNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Member No")
                {
                }
                column(MemberName_LoantrunchDisburesment; "Loan trunch Disburesment"."Member Name")
                {
                }
                column(LoanNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Loan No")
                {
                }
                column(IssueDate_LoantrunchDisburesment; "Loan trunch Disburesment"."Issue Date")
                {
                }
                column(ApprovedAmount_LoantrunchDisburesment; "Loan trunch Disburesment"."Approved Amount")
                {
                }
                column(DisbursedAmount_LoantrunchDisburesment; "Loan trunch Disburesment"."Disbursed Amount")
                {
                }
                column(BalanceOutstanding_LoantrunchDisburesment; "Loan trunch Disburesment"."Balance Outstanding")
                {
                }
                column(RequestedAmount_LoantrunchDisburesment; "Loan trunch Disburesment"."Requested Amount")
                {
                }
                column(AmounttoDisburse_LoantrunchDisburesment; "Loan trunch Disburesment"."Amount to Disburse")
                {
                }
                column(Status_LoantrunchDisburesment; "Loan trunch Disburesment".Status)
                {
                }
                column(UserID_LoantrunchDisburesment; "Loan trunch Disburesment"."User ID")
                {
                }
                column(FOSAAccount_LoantrunchDisburesment; "Loan trunch Disburesment"."FOSA Account")
                {
                }
                column(ModeofDisbursement_LoantrunchDisburesment; "Loan trunch Disburesment"."Mode of Disbursement")
                {
                }
                column(ChequeNoReferenceNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Cheque No/Reference No")
                {
                }
                column(Posted_LoantrunchDisburesment; "Loan trunch Disburesment".Posted)
                {
                }
                column(PostingDate_LoantrunchDisburesment; "Loan trunch Disburesment"."Posting Date")
                {
                }
                column(NoSeries_LoantrunchDisburesment; "Loan trunch Disburesment"."No. Series")
                {
                }
                column(BankAccount_LoantrunchDisburesment; "Loan trunch Disburesment"."Bank Account")
                {
                }
                column(Loantype_LoantrunchDisburesment; "Loan trunch Disburesment"."Loan type")
                {
                }
                column(ProductCharged_LoantrunchDisburesment; "Loan trunch Disburesment"."Product Charged")
                {
                }
                column(OffsetTrunch_LoantrunchDisburesment; "Loan trunch Disburesment"."Offset Trunch")
                {
                }
                column(OffsetAmount; OffsetAmount)
                {
                }
                column(ClearExternal_LoantrunchDisburesment; "Loan trunch Disburesment"."Clear External")
                {
                }
                column(BatchNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Batch No")
                {
                }
                column(VarTrunchNetDisbursed; VarTrunchNetDisbursed)
                {
                }
                column(MemberBankAccountNo_LoantrunchDisburesment; "Loan trunch Disburesment"."Member Bank Account No")
                {
                }
                column(VarstaffNo; VarstaffNo)
                {
                }
                column(EntryNo; EntryNo)
                {
                }
                column(BankCode1; BankCode1)
                {
                }
                column(MemAccNo1; MemAccNo1)
                {
                }
                column(varsum; varsum)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    EntryNo := 0;
                    cust.Reset;
                    cust.SetRange(cust."No.", ObjtrunchDisbursment."Member No");
                    if cust.Find('-') then begin
                        BankCode1 := cust."Bank Branch Code";
                        MemAccNo1 := cust."Bank Account No.";
                        VarstaffNo := cust."Payroll No";
                    end;
                    "Loans Register".CalcFields("Loans Register"."Offset Commission", "Loans Register"."Loan Offset Amount");
                    if ObjtrunchDisbursment."Offset Trunch" = true then
                        OffsetAmount := OffsetAmount + "Loans Register"."Loan Offset Amount" + "Loans Register"."Offset Commission"
                    else
                        OffsetAmount := 0;
                    OffsetAmount := "Loan trunch Disburesment"."Total Loans Offset";
                    ObjGensetup.Get;
                    if ObjLoanBatch.Get("Batch No") then begin
                        if ObjLoanBatch."Mode Of Disbursement" = ObjLoanBatch."mode of disbursement"::Cheque then
                            VarTrunchNetDisbursed := ("Amount to Disburse" - OffsetAmount - ObjGensetup."Loan Trasfer Fee-Cheque")
                        else
                            VarTrunchNetDisbursed := ("Amount to Disburse" - OffsetAmount - ObjGensetup."Loan Trasfer Fee-EFT");
                        /*REPEAT
                        varsum:=VarTrunchNetDisbursed
                        UNTIL ObjLoanBatch.NEXT=0;*/
                    end;
                    EntryNo := EntryNo + 1;

                end;

            }
            trigger OnPreDataItem();
            begin
                if LoanProdType.Get("Loans Register".GetFilter("Loans Register"."Loan Product Type")) then
                    LoanType := LoanProdType."Product Description";
                LCount := 0;
                if "Loans Register".GetFilter("Loans Register"."Branch Code") <> '' then begin
                    DValue.Reset;
                    DValue.SetRange(DValue."Global Dimension No.", 2);
                    DValue.SetRange(DValue.Code, "Loans Register".GetFilter("Loans Register"."Branch Code"));
                    if DValue.Find('-') then
                        RFilters := 'Branch: ' + DValue.Name;
                end;
            end;

            trigger OnAfterGetRecord();
            var
                CheckReport: Report Check;
            begin
                BankAccount.Get("Loans Register"."Paying Bank Account No");
                /*
                BOSABal:=0;
                SuperBal:=0;
                Deposits:=0;
                LCount:=LCount+1;
                CompanyCode:='';
                LocationFilter:='';
                RPeriod:=Loans.Installments;
                IF (Loans."Outstanding Balance" > 0) AND (Loans.Repayment > 0) THEN
                RPeriod:=Loans."Outstanding Balance"/Loans.Repayment;
                BatchL:='';
                IF Batches.GET(Loans."Batch No.") THEN BEGIN
                Batches.CALCFIELDS(Batches."Currect Location");
                BatchL:=Batches."Currect Location";
                END;
                IF Loans.GETFILTER(Loans."Location Filter") <> '' THEN  BEGIN
                ApprovalSetup.RESET;
                ApprovalSetup.SETRANGE(ApprovalSetup."Approval Type",ApprovalSetup."Approval Type"::"File Movement");
                ApprovalSetup.SETFILTER(ApprovalSetup.Stage,Loans.GETFILTER(Loans."Location Filter"));
                IF ApprovalSetup.FIND('-') THEN
                LocationFilter:=ApprovalSetup.Station;
                END;
                IF LocationFilter = '' THEN
                TotalApproved:=TotalApproved+Loans."Approved Amount"
                ELSE BEGIN
                IF LocationFilter = BatchL THEN
                TotalApproved:=TotalApproved+Loans."Approved Amount"
                END;
                Get balance of BOSA Loans + super loans
                IF (Loans.Source=Loans.Source::BOSA) OR (Loans."Loan Product Type"='SUPER') THEN BEGIN
                cust.RESET;
                cust.SETRANGE(cust."No.",Loans."Client Code");
                cust.SETRANGE(cust."Customer Type",cust."Customer Type"::Member);
                IF cust.FIND('-') THEN BEGIN
                cust.CALCFIELDS(cust."Outstanding Balance",cust."Current Shares");
                BOSABal:=cust."Outstanding Balance";
                Deposits:=ABS(cust."Current Shares");
                CompanyCode:=cust."Employer Code";
                END ELSE BEGIN
                cust.RESET;
                cust.SETRANGE(cust."No.",Loans."BOSA No");
                cust.SETRANGE(cust."Customer Type",cust."Customer Type"::Member);
                IF cust.FIND('-') THEN BEGIN
                cust.CALCFIELDS(cust."Outstanding Balance",cust."Current Shares");
                BOSABal:=cust."Outstanding Balance";
                Deposits:=ABS(cust."Current Shares");
                CompanyCode:=cust."Employer Code";
                END;
                END;
                LAppl.RESET;
                LAppl.SETRANGE(LAppl."Client Code",Loans."Account No");
                LAppl.SETRANGE(LAppl."Loan Product Type",'SUPER');
                LAppl.SETFILTER(LAppl."Outstanding Balance",'>0');
                LAppl.SETRANGE(LAppl.Posted,TRUE);
                IF LAppl.FIND('-') THEN BEGIN
                REPEAT
                LAppl.CALCFIELDS(LAppl."Outstanding Balance");
                SuperBal:=SuperBal+LAppl."Outstanding Balance";
                UNTIL LAppl.NEXT=0;
                END;
                END;
                Loans."Net Amount":=Loans."Approved Amount"-Loans."Top Up Amount";
                Get The Loan Type
                */
                cust.Reset;
                cust.SetRange(cust."No.", "Loans Register"."Client Code");
                if cust.Find('-') then begin
                    BankCode := cust."Bank Branch Code";
                    MemAccNo := cust."Bank Account No.";
                    Branchcode := cust."Bank Branch Code";
                    Bankcode2 := cust."Bank Code";
                end;
                PaymentMethod := 'Corporate salary transfer';
                Currency := 'KES';
                CompanyCode := '';
                if cust.Get("Loans Register"."BOSA No") then
                    CompanyCode := cust."Employer Code";
                BRIGEDAMOUNT := 0;
                Netdisbursed := 0;
                JazaLevy := 0;
                BridgeLevy := 0;
                BoostedSC := 0;
                Sharecap := 0;
                TotalUpfronts := 0;
                TotalNetPay := 0;
                BoostedSC := BoostedSC + "Loans Register"."Deposit Reinstatement";
                Sharecap := Sharecap + "Loans Register"."Share Capital Due";
                ProductChargesAmount := 0;
                EXDUTY := 0;
                /*IF ("Loans Register"."Loan Product Type"='OKOA') OR ("Loans Register"."Loan Product Type"='PATANISHA') THEN BEGIN
                ProductChargesAmount:=ProductChargesAmount+((1*"Loans Register"."Approved Amount")/100);
                END;*/
                ObjLoanProductCharges.Reset;
                ObjLoanProductCharges.SetRange(ObjLoanProductCharges."Product Code", "Loans Register"."Loan Product Type");
                if ObjLoanProductCharges.Find('-') then begin
                    if ObjLoanProductCharges."Use Perc" then begin
                        ProductChargesAmount := ProductChargesAmount + ((ObjLoanProductCharges.Percentage * "Loans Register"."Approved Amount") / 100);
                    end
                    else
                        ProductChargesAmount := ProductChargesAmount + ObjLoanProductCharges.Amount;
                end;
                LoanTopUp.Reset;
                LoanTopUp.SetRange(LoanTopUp."Loan No.", "Loans Register"."Loan  No.");
                LoanTopUp.SetRange(LoanTopUp."Client Code", "Loans Register"."Client Code");
                if LoanTopUp.Find('-') then begin
                    repeat
                        BRIGEDAMOUNT := BRIGEDAMOUNT + LoanTopUp."Principle Top Up";
                        BRIGEDAMOUNT := BRIGEDAMOUNT + LoanTopUp."Total Top Up";
                    until LoanTopUp.Next = 0;
                end;
                GenSetUp.Get();
                if LoanProdType.Get("Loan Product Type") then begin
                    JazaLevy := ROUND(("Jaza Deposits" * 0.15), 1, '>');
                    BridgeLevy := ROUND((BRIGEDAMOUNT * 0.06), 1, '>');
                    ;
                    //		DRAcc:=GenSetUp."Performing Required Provision%";
                    if "Loan Offset Amount" > 0 then begin
                        if BridgeLevy < 500 then begin
                            BridgeLevy := 500;
                        end else begin
                            BridgeLevy := ROUND(BridgeLevy, 1, '>');
                        end;
                    end;
                    "Loans Register".CalcFields("Loans Register"."Offset Commission", "Loans Register"."Partial Disbursed(Amount Due)");
                    if "Loans Register"."Mode of Disbursement" = "Loans Register"."mode of disbursement"::Cheque then
                        Upfronts := "Loans Register"."Loan Offset Amount" + "Loans Register"."Offset Commission" + GenSetUp."Loan Trasfer Fee-Cheque" + "Loans Register"."Boosted Amount" + BoostedSC + ProductChargesAmount + Sharecap
                    else
                        if "Loans Register"."Mode of Disbursement" = "Loans Register"."mode of disbursement"::"FOSA Account" then
                            Upfronts := "Loans Register"."Loan Offset Amount" + "Loans Register"."Offset Commission" + GenSetUp."Loan Trasfer Fee-EFT" + "Loans Register"."Boosted Amount" + BoostedSC + ProductChargesAmount + Sharecap;
                    /*ELSE
                    IF "Mode of Disbursement"="Mode of Disbursement"::EFT THEN
                    Upfronts:=BRIGEDAMOUNT+"Jaza Deposits"+"Deposit Reinstatement"+JazaLevy+BridgeLevy+ GenSetUp."Loan Trasfer Fee-FOSA";*/
                    Netdisbursed := "Approved Amount" - Upfronts - "Loans Register"."Loan Insurance";
                end;
                Netdisbursed := "Approved Amount" - Upfronts;
                //Netdisbursed:="Loans Register"."Loan Disbursed Amount";
                if ("Loans Register"."Disburesment Type" = "Loans Register"."disburesment type"::"Tranche/Multiple Disbursement") then begin
                    // Netdisbursed:="Loans Register"."Credit Officer II"-Upfronts+BRIGEDAMOUNT;
                end;
                TotalUpfronts := TotalUpfronts + Upfronts;
                TotalNetPay := TotalNetPay + Netdisbursed;
                LCount := LCount + 1;
                /* Netdisbursed := "Loans Register"."Approved Amount" - ("Loans Register"."Loan Offset Amount"+
                 "Loans Register"."Interest Upfront"+"Loans Register"."Loans Insurance");*/
                Netdisbursed := "Approved Amount" - Upfronts;
                CheckReport.InitTextVariable();
                CheckReport.FormatNoText(NumberText, (Netdisbursed), '');
                // CheckReport.FormatNoText(NumberText,(LoanApp."Approved Amount"-LoanApp."Loan Offset Amount"-LoanApp."Interest Upfront"-LoanApp."Loan Insurance");

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        /* IF "COMPY INFOR".GET THEN
         BEGIN
 "COMPY INFOR".CALCFIELDS("COMPY INFOR".Picture);
         NAME:="COMPY INFOR".Name;
         END;*/
        //***************kyalo************
        if CompanyInfo.Get then begin
            CompanyInfo.CalcFields(Picture, Letter_Head);
            //CompanyAddress:=CompanyInfo.Address;
            //CompanyEmail:=CompanyInfo."E-Mail";
        end
        ;
        ReportsForNavPre;

    end;

    var
        RPeriod: Decimal;
        BatchL: Code[100];
        Batches: Record "Loan Disburesment-Batching";
        ApprovalSetup: Codeunit "Approvals Mgmt.";
        LocationFilter: Code[20];
        TotalApproved: Decimal;
        cust: Record "Members Register";
        BOSABal: Decimal;
        SuperBal: Decimal;
        LAppl: Record "Loans Register";
        Deposits: Decimal;
        CompanyCode: Code[20];
        LoanType: Text[50];
        LoanProdType: Record "Loan Products Setup";
        LCount: Integer;
        RFilters: Text[250];
        DValue: Record "Dimension Value";
        VALREPAY: Record "Member Ledger Entry";
        Loans_RegisterCaptionLbl: label 'Approved Loans Report';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Client_No_CaptionLbl: label 'Client No.';
        Outstanding_LoanCaptionLbl: label 'Outstanding Loan';
        PeriodCaptionLbl: label 'Period';
        Approved_DateCaptionLbl: label 'Approved Date';
        Loan_TypeCaption_Control1102760043Lbl: label 'Loan Type';
        Verified_By__________________________________________________CaptionLbl: label 'Verified By..................................................';
        Confirmed_By__________________________________________________CaptionLbl: label 'Confirmed By..................................................';
        Sign________________________CaptionLbl: label 'Sign........................';
        Sign________________________Caption_Control1102755003Lbl: label 'Sign........................';
        Date________________________CaptionLbl: label 'Date........................';
        Date________________________Caption_Control1102755005Lbl: label 'Date........................';
        GenSetUp: Record "Sacco General Set-Up";
        LoanApp: Record "Loans Register";
        CustRec: Record "Members Register";
        CustRecord: Record "Members Register";
        TShares: Decimal;
        TLoans: Decimal;
        LoanShareRatio: Decimal;
        Eligibility: Decimal;
        TotalSec: Decimal;
        saccded: Decimal;
        saccded2: Decimal;
        grosspay: Decimal;
        Tdeduct: Decimal;
        Cshares: Decimal;
        "Cshares*3": Decimal;
        "Cshares*4": Decimal;
        QUALIFY_SHARES: Decimal;
        salary: Decimal;
        LoanG: Record "Loans Guarantee Details";
        GShares: Decimal;
        Recomm: Decimal;
        GShares1: Decimal;
        NETTAKEHOME: Decimal;
        Msalary: Decimal;
        RecPeriod: Integer;
        FOSARecomm: Decimal;
        FOSARecoPRD: Integer;
        "Asset Value": Decimal;
        InterestRate: Decimal;
        RepayPeriod: Decimal;
        LBalance: Decimal;
        TotalMRepay: Decimal;
        LInterest: Decimal;
        LPrincipal: Decimal;
        SecuredSal: Decimal;
        Linterest1: Integer;
        LOANBALANCE: Decimal;
        BRIDGEDLOANS: Record "Loan Offset Details";
        BRIDGEBAL: Decimal;
        LOANBALANCEFOSASEC: Decimal;
        TotalTopUp: Decimal;
        TotalIntPayable: Decimal;
        GTotals: Decimal;
        TempVal: Decimal;
        TempVal2: Decimal;
        "TempCshares*4": Decimal;
        "TempCshares*3": Decimal;
        InstallP: Decimal;
        RecomRemark: Text[150];
        InstallRecom: Decimal;
        TopUpComm: Decimal;
        TotalTopupComm: Decimal;
        LoanTopUp: Record "Loan Offset Details";
        "Interest Payable": Decimal;
        "general set-up": Record "Loan Products Setup";
        Days: Integer;
        EndMonthInt: Decimal;
        BRIDGEBAL2: Decimal;
        DefaultInfo: Text[80];
        TOTALBRIDGED: Decimal;
        DEpMultiplier: Decimal;
        MAXAvailable: Decimal;
        SalDetails: Record "Loan Appraisal Salary Details";
        Earnings: Decimal;
        Deductions: Decimal;
        BrTopUpCom: Decimal;
        LoanAmount: Decimal;
        CompanyInfo: Record "Company Information";
        CompanyAddress: Code[20];
        CompanyEmail: Text[30];
        CompanyTel: Code[20];
        CurrentAsset: Decimal;
        CurrentLiability: Decimal;
        FixedAsset: Decimal;
        Equity: Decimal;
        Sales: Decimal;
        SalesOnCredit: Decimal;
        AppraiseDeposits: Boolean;
        AppraiseShares: Boolean;
        AppraiseSalary: Boolean;
        AppraiseGuarantors: Boolean;
        AppraiseBusiness: Boolean;
        TLoan: Decimal;
        LoanBal: Decimal;
        GuaranteedAmount: Decimal;
        RunBal: Decimal;
        TGuaranteedAmount: Decimal;
        GuarantorQualification: Boolean;
        TotalLoanBalance: Decimal;
        TGAmount: Decimal;
        NetSalary: Decimal;
        Riskamount: Decimal;
        WarnBridged: Text;
        WarnSalary: Text;
        WarnDeposits: Text;
        WarnGuarantor: Text;
        WarnShare: Text;
        RiskGshares: Decimal;
        RiskDeposits: Decimal;
        BasicEarnings: Decimal;
        DepX: Decimal;
        LoanPrincipal: Decimal;
        loanInterest: Decimal;
        AmountGuaranteed: Decimal;
        StatDeductions: Decimal;
        GuarOutstanding: Decimal;
        TwoThirds: Decimal;
        Bridged_AmountCaption: Integer;
        LNumber: Code[20];
        TotalLoanDeductions: Decimal;
        TotalRepayments: Decimal;
        Totalinterest: Decimal;
        Band: Decimal;
        TotalOutstanding: Decimal;
        BANDING: Record "Deposit Tier Setup";
        NtTakeHome: Decimal;
        ATHIRD: Decimal;
        Psalary: Decimal;
        LoanApss: Record "Loans Register";
        TotalLoanBal: Decimal;
        TotalBand: Decimal;
        LoanAp: Record "Loans Register";
        TotalRepay: Decimal;
        TotalInt: Decimal;
        LastFieldNo: Integer;
        TotLoans: Decimal;
        JazaLevy: Decimal;
        BridgeLevy: Decimal;
        Upfronts: Decimal;
        Netdisbursed: Decimal;
        TotalLRepayments: Decimal;
        BridgedRepayment: Decimal;
        OutstandingLrepay: Decimal;
        Loantop: Record "Loan Offset Details";
        BRIGEDAMOUNT: Decimal;
        TOTALBRIGEDAMOUNT: Decimal;
        FinalInst: Decimal;
        NonRec: Decimal;
        TotalUpfronts: Decimal;
        TotalNetPay: Decimal;
        NameCreditOff: label 'Name......................................';
        NameCreditDate: label 'Date........................................';
        NameCreditSign: label 'Signature..................................';
        NameCreditMNG: label 'Name......................................';
        NameCreditMNGDate: label 'Date.....................................';
        NameCreditMNGSign: label 'Signature..................................';
        NameCEO: label 'Name........................................';
        NameCEOSign: label 'Signature...................................';
        NameCEODate: label 'Date.....................................';
        CreditCom1: label 'Name........................................';
        CreditCom1Sign: label 'Signature...................................';
        CreditCom1Date: label 'Date.........................................';
        CreditCom2: label 'Name........................................';
        CreditCom2Sign: label 'Signature....................................';
        CreditCom2Date: label 'Date..........................................';
        CreditCom3: label 'Name.........................................';
        CreditComDate3: label 'Date..........................................';
        CreditComSign3: label 'Signature..................................';
        Comment: label '....................';
        "COMPY INFOR": Record "Company Information";
        Name: Text;
        PICTURE: Text;
        BankCode: Code[20];
        MemAccNo: Code[30];
        PaymentMethod: Text;
        DRAcc: Code[30];
        Currency: Text;
        BoostedSC: Decimal;
        ProductChargesAmount: Decimal;
        ObjLoanProductCharges: Record "Loan Product Charges";
        VarTrunchNetDisbursed: Decimal;
        ObjLoanBatch: Record "Loan Disburesment-Batching";
        OffsetAmount: Decimal;
        ObjtrunchDisbursment: Record "Loan trunch Disburesment";
        VarstaffNo: Code[20];
        ObjGensetup: Record "Sacco General Set-Up";
        EntryNo: Integer;
        BankCode1: Code[10];
        MemAccNo1: Code[10];
        varsum: Decimal;
        Sharecap: Decimal;
        Branchcode: Code[10];
        Bankcode2: Code[10];
        EXDUTY: Decimal;
        BankAccount: Record "Bank Account";
        NumberText: array[2] of Text[80];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516953_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
