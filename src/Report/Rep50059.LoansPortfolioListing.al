#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516059_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50059 "Loans Portfolio Listing"
{
    RDLCLayout = 'Layouts/LoansPortfolioListing.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loan Portfolio Provision"; "Loan Portfolio Provision")
        {
            DataItemTableView = sorting("Arrears Days") order(ascending);
            RequestFilterFields = "Loan No", "Loan Product Code", "Member No", "Arrears Days", "Arrears Amount", Classification, Rescheduled, "Branch Code", "Group Code";
            column(ReportForNavId_17; 17) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(OutstandingBalance_LoanPortfolioProvision; "Loan Portfolio Provision"."Outstanding Balance")
            {
            }
            column(ArrearsAmount_LoanPortfolioProvision; "Loan Portfolio Provision"."Arrears Amount")
            {
            }
            column(ArrearsDays_LoanPortfolioProvision; "Loan Portfolio Provision"."Arrears Days")
            {
            }
            column(Classification_LoanPortfolioProvision; "Loan Portfolio Provision".Classification)
            {
            }
            column(Rescheduled_LoanPortfolioProvision; "Loan Portfolio Provision".Rescheduled)
            {
            }
            column(LoanNo_LoanPortfolioProvision; "Loan Portfolio Provision"."Loan No")
            {
            }
            column(MemberNo_LoanPortfolioProvision; "Loan Portfolio Provision"."Member No")
            {
            }
            column(MemberName_LoanPortfolioProvision; "Loan Portfolio Provision"."Member Name")
            {
            }
            column(LoanProductCode_LoanPortfolioProvision; "Loan Portfolio Provision"."Loan Product Code")
            {
            }
            column(VarMemberDeposits_OD; VarMemberDeposits_OD)
            {
            }
            column(VarLSABalance_OD; VarLSABalance_OD)
            {
            }
            column(VarUfalmeBalance_OD; VarUfalmeBalance_OD)
            {
            }
            column(VarFOSABalance_OD; VarFOSABalance_OD)
            {
            }
            column(VarMobilePhone_OD; VarMobilePhone_OD)
            {
            }
            column(VarMemberEmail_OD; VarMemberEmail_OD)
            {
            }
            column(VarSecurityType_OD; VarSecurityType_OD)
            {
            }
            column(VarSecurityDetails_OD; VarSecurityDetails_OD)
            {
            }
            column(VarMarketValue_OD; VarMarketValue_OD)
            {
            }
            column(VarForcedValue_OD; VarForcedValue_OD)
            {
            }
            column(VarLastValuation_OD; Format(VarLastValuation_OD, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VarProductName_OD; VarProductName_OD)
            {
            }
            column(VarODApplicationDate; Format(VarODApplicationDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VaODApprovedAmount; VaODApprovedAmount)
            {
            }
            dataitem("Loans Register"; "Loans Register")
            {
                CalcFields = "Total Loans Outstanding";
                DataItemLink = "Loan  No." = field("Loan No");
                PrintOnlyIfDetail = false;
                column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
                column(LoanNo_LoansRegister; "Loans Register"."Loan  No.")
                {
                }
                column(ClientName_LoansRegister; "Loans Register"."Client Name")
                {
                }
                column(ClientCode_LoansRegister; "Loans Register"."Client Code")
                {
                }
                column(LoanProductTypeName_LoansRegister; "Loans Register"."Loan Product Type Name")
                {
                }
                column(LoanProductType_LoansRegister; "Loans Register"."Loan Product Type")
                {
                }
                column(ApprovedAmount_LoansRegister; ROUND("Loans Register"."Approved Amount", 0.01, '='))
                {
                }
                column(IssuedDate_LoansRegister; Format("Loans Register"."Issued Date", 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(ApplicationDate_LoansRegister; Format("Loans Register"."Application Date", 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(AmountinArrears_LoansRegister; "Loans Register"."Amount in Arrears")
                {
                }
                column(Repayment_LoansRegister; "Loans Register".Repayment)
                {
                }
                column(OutstandingBalance_LoansRegister; "Loans Register"."Outstanding Balance")
                {
                }
                column(DaysInArrears_LoansRegister; "Loans Register"."Days In Arrears")
                {
                }
                column(LastPayDate_LoansRegister; Format("Loans Register"."Last Pay Date", 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(InsiderStatus_LoansRegister; "Loans Register"."Insider Status")
                {
                }
                column(MemberHouseGroup_LoansRegister; "Loans Register"."Member House Group")
                {
                }
                column(ClosedOn_LoansRegister; Format("Loans Register"."Closed On", 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(BranchCode_LoansRegister; "Loans Register"."Branch Code")
                {
                }
                column(Interest_LoansRegister; "Loans Register".Interest)
                {
                }
                column(Installments_LoansRegister; "Loans Register".Installments)
                {
                }
                column(LoansCategory_LoansRegister; "Loans Register"."Loans Category")
                {
                }
                column(CreditOfficer_LoansRegister; "Loans Register"."Credit Officer")
                {
                }
                column(ExpectedDateofCompletion_LoansRegister; Format("Loans Register"."Expected Date of Completion", 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(LoanReschedule_LoansRegister; "Loans Register"."Loan Reschedule")
                {
                }
                column(Rescheduled_LoansRegister; "Loans Register".Rescheduled)
                {
                }
                column(VarMemberDeposits; VarMemberDeposits)
                {
                }
                column(VarLSABalance; VarLSABalance)
                {
                }
                column(VarUfalmeBalance; VarUfalmeBalance)
                {
                }
                column(VarFOSABalance; VarFOSABalance)
                {
                }
                column(VarMobilePhone; VarMobilePhone)
                {
                }
                column(VarMemberEmail; VarMemberEmail)
                {
                }
                column(VarSecurityType; VarSecurityType)
                {
                }
                column(VarSecurityDetails; VarSecurityDetails)
                {
                }
                column(VarMarketValue; VarMarketValue)
                {
                }
                column(VarForcedValue; VarForcedValue)
                {
                }
                column(VarLastValuation; Format(VarLastValuation, 0, '<Day,2> <Month Text,3> <Year4>'))
                {
                }
                column(TotalLoansOutstanding_LoansRegister; "Loans Register"."Total Loans Outstanding")
                {
                }
                column(MemberAccountCategory_LoansRegister; "Loans Register"."Member Account Category")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    if "Loans Register"."Loan Product Type" <> '406' then begin
                        //=====================================================================================Member Deposits
                        ObjCust.Reset;
                        ObjCust.SetRange(ObjCust."No.", "Client Code");
                        ObjCust.SetFilter(ObjCust."Date Filter", VarReportFilter);
                        if ObjCust.FindSet then begin
                            ObjCust.CalcFields(ObjCust."Current Shares");
                            VarMemberDeposits := ObjCust."Current Shares";
                            VarMobilePhone := ObjCust."Mobile Phone No";
                            VarMemberEmail := ObjCust."E-Mail";
                        end;
                        //=====================================================================================FOSA Balances
                        //=================================================================LSA
                        ObjAccount.Reset;
                        ObjAccount.SetRange(ObjAccount."BOSA Account No", "Client Code");
                        ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                        ObjAccount.SetFilter(ObjAccount."Account Type", '%1', '507');
                        if ObjAccount.FindSet then begin
                            ObjAccount.CalcFields(ObjAccount.Balance);
                            VarLSABalance := ObjAccount.Balance;
                        end;
                        //=================================================================UFALME
                        ObjAccount.Reset;
                        ObjAccount.SetRange(ObjAccount."BOSA Account No", "Client Code");
                        ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                        ObjAccount.SetFilter(ObjAccount."Account Type", '%1', '508');
                        if ObjAccount.FindSet then begin
                            ObjAccount.CalcFields(ObjAccount.Balance);
                            VarUfalmeBalance := ObjAccount.Balance;
                        end;
                        //=================================================================FOSA BALANCES
                        VarFOSABalance := 0;
                        ObjAccount.Reset;
                        ObjAccount.SetRange(ObjAccount."BOSA Account No", "Client Code");
                        ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                        ObjAccount.SetFilter(ObjAccount."Account Type", '%1|%2|%3|%4|%5|%6|%7', '401', '402', '403', '404', '405', '406', '501');
                        if ObjAccount.FindSet then begin
                            repeat
                                ObjAccount.CalcFields(ObjAccount.Balance);
                                VarFOSABalance := VarFOSABalance + ObjAccount.Balance;
                            until ObjAccount.Next = 0;
                        end;
                        VarSecurityType := '';
                        VarSecurityDetails := '';
                        VarMarketValue := 0;
                        VarForcedValue := 0;
                        VarLastValuation := 0D;
                        //=============================================================Collateral Details
                        ObjLoanCollateral.Reset;
                        ObjLoanCollateral.SetRange(ObjLoanCollateral."Loan No", "Loan  No.");
                        if ObjLoanCollateral.FindSet then begin
                            VarSecurityType := ObjLoanCollateral.Code;
                            VarSecurityDetails := ObjLoanCollateral."Security Details";
                            VarMarketValue := ObjLoanCollateral."Market Value";
                            VarForcedValue := ObjLoanCollateral."Forced Sale Value";
                            if ObjCollateralRegister.Get(ObjLoanCollateral."Collateral Registe Doc") then begin
                                VarLastValuation := ObjCollateralRegister."Last Valued On";
                            end;
                        end;
                    end;
                end;

            }
            trigger OnPreDataItem();
            begin
                VarReportFilter := '..' + Format(VarReportDate);
                "Loan Portfolio Provision".SetFilter("Loan Portfolio Provision"."Report Date", '%1', VarReportDate);
            end;

            trigger OnAfterGetRecord();
            begin
                if ObjAccountII.Get("Loan No") then begin
                    //=====================================================================================Member Deposits
                    ObjCust.Reset;
                    ObjCust.SetRange(ObjCust."No.", ObjAccountII."BOSA Account No");
                    ObjCust.SetFilter(ObjCust."Date Filter", VarReportFilter);
                    if ObjCust.FindSet then begin
                        ObjCust.CalcFields(ObjCust."Current Shares");
                        VarMemberDeposits_OD := ObjCust."Current Shares";
                        VarMobilePhone_OD := ObjCust."Mobile Phone No";
                        VarMemberEmail_OD := ObjCust."E-Mail";
                    end;
                    //=====================================================================================FOSA Balances
                    //=================================================================LSA
                    ObjAccount.Reset;
                    ObjAccount.SetRange(ObjAccount."BOSA Account No", ObjAccountII."BOSA Account No");
                    ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                    ObjAccount.SetFilter(ObjAccount."Account Type", '%1', '507');
                    if ObjAccount.FindSet then begin
                        ObjAccount.CalcFields(ObjAccount.Balance);
                        VarLSABalance_OD := ObjAccount.Balance;
                    end;
                    //=================================================================UFALME
                    ObjAccount.Reset;
                    ObjAccount.SetRange(ObjAccount."BOSA Account No", ObjAccountII."BOSA Account No");
                    ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                    ObjAccount.SetFilter(ObjAccount."Account Type", '%1', '508');
                    if ObjAccount.FindSet then begin
                        ObjAccount.CalcFields(ObjAccount.Balance);
                        VarUfalmeBalance_OD := ObjAccount.Balance;
                    end;
                    //=================================================================FOSA BALANCES
                    VarFOSABalance := 0;
                    ObjAccount.Reset;
                    ObjAccount.SetRange(ObjAccount."BOSA Account No", ObjAccountII."BOSA Account No");
                    ObjAccount.SetFilter(ObjAccount."Date Filter", VarReportFilter);
                    ObjAccount.SetFilter(ObjAccount."Account Type", '%1|%2|%3|%4|%5|%6|%7', '401', '402', '403', '404', '405', '406', '501');
                    if ObjAccount.FindSet then begin
                        repeat
                            ObjAccount.CalcFields(ObjAccount.Balance);
                            VarFOSABalance_OD := VarFOSABalance + ObjAccount.Balance;
                        until ObjAccount.Next = 0;
                    end;
                    VarSecurityType_OD := '';
                    VarSecurityDetails_OD := '';
                    VarMarketValue_OD := 0;
                    VarForcedValue_OD := 0;
                    VarLastValuation_OD := 0D;
                end;
                if ObjProducttype.Get("Loan Portfolio Provision"."Loan Product Code") then
                    VarProductName_OD := ObjProducttype.Description;
                //======================================OD Application Details
                ObjODApplications.Reset;
                ObjODApplications.SetCurrentkey(ObjODApplications."Document No");
                ObjODApplications.SetRange(ObjODApplications."Over Draft Account", "Loan No");
                if ObjODApplications.FindLast then begin
                    VaODApprovedAmount := ObjODApplications."Qualifying Overdraft Amount";
                    VarODApplicationDate := ObjODApplications."Application Date";
                    //=============================================================Collateral Details
                    ObjLoanCollateral.Reset;
                    ObjLoanCollateral.SetRange(ObjLoanCollateral."Loan No", ObjODApplications."Document No");
                    if ObjLoanCollateral.FindSet then begin
                        VarSecurityType_OD := ObjLoanCollateral.Code;
                        VarSecurityDetails_OD := ObjLoanCollateral."Security Details";
                        VarMarketValue_OD := ObjLoanCollateral."Market Value";
                        VarForcedValue_OD := ObjLoanCollateral."Forced Sale Value";
                        if ObjCollateralRegister.Get(ObjLoanCollateral."Collateral Registe Doc") then begin
                            VarLastValuation_OD := ObjCollateralRegister."Last Valued On";
                        end;
                    end;
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("Report Date"; VarReportDate)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Loans_RegisterCaptionLbl: label 'Approved Loans Report';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Client_No_CaptionLbl: label 'Client No.';
        Outstanding_LoanCaptionLbl: label 'Outstanding Loan';
        PeriodCaptionLbl: label 'Period';
        Approved_DateCaptionLbl: label 'Approved Date';
        Loan_TypeCaption_Control1102760043Lbl: label 'Loan Type';
        Verified_By__________________________________________________CaptionLbl: label 'Verified By..................';
        Confirmed_By__________________________________________________CaptionLbl: label 'Confirmed By..................';
        Sign________________________CaptionLbl: label 'Sign...............';
        Sign________________________Caption_Control1102755003Lbl: label 'Sign...............';
        Date________________________CaptionLbl: label 'Date..............';
        Date________________________Caption_Control1102755005Lbl: label 'Date..............';
        NameCreditOff: label 'Name.......................';
        NameCreditDate: label 'Date........................';
        NameCreditSign: label 'Signature..................';
        NameCreditMNG: label 'Name.......................';
        NameCreditMNGDate: label 'Date........................';
        NameCreditMNGSign: label 'Signature..................';
        NameCEO: label 'Name......................';
        NameCEOSign: label 'Signature.................';
        NameCEODate: label 'Date.......................';
        CreditCom1: label 'Name......................';
        CreditCom1Sign: label 'Signature.................';
        CreditCom1Date: label 'Date.......................';
        CreditCom2: label 'Name......................';
        CreditCom2Sign: label 'Signature.................';
        CreditCom2Date: label 'Date......................';
        CreditCom3: label 'Name.....................';
        CreditComDate3: label 'Date......................';
        CreditComSign3: label 'Signature.................';
        Comment: label '....................';
        Company: Record "Company Information";
        ObjCust: Record "Members Register";
        ObjAccount: Record Vendor;
        VarMemberDeposits: Decimal;
        VarLSABalance: Decimal;
        VarUfalmeBalance: Decimal;
        VarFOSABalance: Decimal;
        VarMobilePhone: Code[100];
        VarMemberEmail: Text;
        ObjLoanCollateral: Record "Loan Collateral Details";
        VarSecurityType: Text;
        VarSecurityDetails: Text;
        VarMarketValue: Decimal;
        VarForcedValue: Decimal;
        VarLastValuation: Date;
        ObjCollateralRegister: Record "Loan Collateral Register";
        VarReportFilter: Text;
        VarReportDate: Date;
        ObjAccountII: Record Vendor;
        VarMemberDeposits_OD: Decimal;
        VarLSABalance_OD: Decimal;
        VarUfalmeBalance_OD: Decimal;
        VarFOSABalance_OD: Decimal;
        VarMobilePhone_OD: Code[100];
        VarMemberEmail_OD: Text;
        VarSecurityType_OD: Text;
        VarSecurityDetails_OD: Text;
        VarMarketValue_OD: Decimal;
        VarForcedValue_OD: Decimal;
        VarLastValuation_OD: Date;
        ObjProducttype: Record "Account Types-Saving Products";
        VarProductName_OD: Text;
        ObjODApplications: Record "OverDraft Application";
        VarODApplicationDate: Date;
        VaODApprovedAmount: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516059_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
