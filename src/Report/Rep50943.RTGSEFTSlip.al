#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516943_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50943 "RTGS/EFT Slip"
{
    RDLCLayout = 'Layouts/RTGSEFTSlip.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("EFT/RTGS Header"; "EFT/RTGS Header")
        {
            DataItemTableView = sorting("No. Series");
            RequestFilterFields = "No. Series";
            column(ReportForNavId_6437; 6437) { } // Autogenerated by ForNav - Do not delete
            column(CI_Name; CI.Name)
            {
                IncludeCaption = true;
            }
            column(CI_Address; CI.Address)
            {
                IncludeCaption = true;
            }
            column(CI_Address2; CI."Address 2")
            {
                IncludeCaption = true;
            }
            column(CI_PhoneNo; CI."Phone No.")
            {
                IncludeCaption = true;
            }
            column(CI_Picture; CI.Picture)
            {
                IncludeCaption = true;
            }
            column(CI_City; CI.City)
            {
                IncludeCaption = true;
            }
            column(DOCNAME; DOCNAME)
            {
            }
            column(VarApproverI; VarApproverI)
            {
            }
            column(VarApproverIDate; Format(VarApproverIDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(VarApproverII; VarApproverII)
            {
            }
            column(VarApproverIIDate; Format(VarApproverIIDate, 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(UserId; UserId)
            {
            }
            column(NumberText_1_; NumberText[1])
            {
            }
            column(TTotal; TTotal)
            {
            }
            column(TIME_PRINTED_____FORMAT_TIME_; 'TIME PRINTED:' + Format(Time))
            {
                AutoFormatType = 1;
            }
            column(DATE_PRINTED_____FORMAT_TODAY_0_4_; 'DATE PRINTED:' + Format(Today, 0, 4))
            {
                AutoFormatType = 1;
            }
            column(CurrCode_Control1102756010; CurrCode)
            {
            }
            column(CurrCode_Control1102756012; CurrCode)
            {
            }
            column(Approved_; 'Approved')
            {
                AutoFormatType = 1;
            }
            column(Approval_Status_____; 'Approval Status' + ':')
            {
                AutoFormatType = 1;
            }
            column(TIME_PRINTED_____FORMAT_TIME__Control1102755003; 'TIME PRINTED:' + Format(Time))
            {
                AutoFormatType = 1;
            }
            column(DATE_PRINTED_____FORMAT_TODAY_0_4__Control1102755004; 'DATE PRINTED:' + Format(Today, 0, 4))
            {
                AutoFormatType = 1;
            }
            column(USERID_Control1102755012; UserId)
            {
            }
            column(NumberText_1__Control1102755016; NumberText[1])
            {
            }
            column(CompanyInfoName; CompanyInfo.Name)
            {
            }
            column(CompanyInfoAddress; CompanyInfo.Address)
            {
            }
            column(CompanyInfoAddress2; CompanyInfo."Address 2")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)
            {
            }
            column(No_EFTRTGSHeader; "EFT/RTGS Header".No)
            {
            }
            column(NoSeries_EFTRTGSHeader; "EFT/RTGS Header"."No. Series")
            {
            }
            column(Transferred_EFTRTGSHeader; "EFT/RTGS Header".Transferred)
            {
            }
            column(DateTransferred_EFTRTGSHeader; Format("EFT/RTGS Header"."Date Transferred", 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(TimeTransferred_EFTRTGSHeader; Format("EFT/RTGS Header"."Time Transferred"))
            {
            }
            column(TransferredBy_EFTRTGSHeader; "EFT/RTGS Header"."Transferred By")
            {
            }
            column(DateEntered_EFTRTGSHeader; Format("EFT/RTGS Header"."Date Entered", 0, '<Day,2> <Month Text,3> <Year4>'))
            {
            }
            column(TimeEntered_EFTRTGSHeader; Format("EFT/RTGS Header"."Time Entered"))
            {
            }
            column(EnteredBy_EFTRTGSHeader; "EFT/RTGS Header"."Entered By")
            {
            }
            column(TransactionDescription_EFTRTGSHeader; "EFT/RTGS Header"."Transaction Description")
            {
            }
            column(PayeeBankName_EFTRTGSHeader; "EFT/RTGS Header"."Payee Bank Name")
            {
            }
            column(BankNo_EFTRTGSHeader; "EFT/RTGS Header"."Bank  No")
            {
            }
            column(SalaryProcessingNo_EFTRTGSHeader; "EFT/RTGS Header"."Salary Processing No.")
            {
            }
            column(SalaryOptions_EFTRTGSHeader; "EFT/RTGS Header"."Salary Options")
            {
            }
            column(Total_EFTRTGSHeader; "EFT/RTGS Header".Total)
            {
            }
            column(TotalCount_EFTRTGSHeader; "EFT/RTGS Header"."Total Count")
            {
            }
            column(RTGS_EFTRTGSHeader; "EFT/RTGS Header".RTGS)
            {
            }
            column(DocumentNoFilter_EFTRTGSHeader; "EFT/RTGS Header"."Document No. Filter")
            {
            }
            column(DateFilter_EFTRTGSHeader; "EFT/RTGS Header"."Date Filter")
            {
            }
            column(Bank_EFTRTGSHeader; "EFT/RTGS Header".Bank)
            {
            }
            column(Status_EFTRTGSHeader; "EFT/RTGS Header".Status)
            {
            }
            column(ChequeNo_EFTRTGSHeader; "EFT/RTGS Header"."Cheque No")
            {
            }
            dataitem("EFT/RTGS Details"; "EFT/RTGS Details")
            {
                DataItemLink = "Header No" = field(No);
                column(ReportForNavId_3474; 3474) { } // Autogenerated by ForNav - Do not delete
                column(No_EFTRTGSDetails; "EFT/RTGS Details".No)
                {
                }
                column(AccountNo_EFTRTGSDetails; "EFT/RTGS Details"."Account No")
                {
                }
                column(AccountName_EFTRTGSDetails; "EFT/RTGS Details"."Account Name")
                {
                }
                column(AccountType_EFTRTGSDetails; "EFT/RTGS Details"."Account Type")
                {
                }
                column(Amount_EFTRTGSDetails; "EFT/RTGS Details".Amount)
                {
                }
                column(NoSeries_EFTRTGSDetails; "EFT/RTGS Details"."No. Series")
                {
                }
                column(DestinationAccountNo_EFTRTGSDetails; "EFT/RTGS Details"."Destination Account No")
                {
                }
                column(DestinationAccountName_EFTRTGSDetails; "EFT/RTGS Details"."Destination Account Name")
                {
                }
                column(DestinationAccountType_EFTRTGSDetails; "EFT/RTGS Details"."Destination Account Type")
                {
                }
                column(Transferred_EFTRTGSDetails; "EFT/RTGS Details".Transferred)
                {
                }
                column(DateTransferred_EFTRTGSDetails; "EFT/RTGS Details"."Date Transferred")
                {
                }
                column(TimeTransferred_EFTRTGSDetails; "EFT/RTGS Details"."Time Transferred")
                {
                }
                column(TransferredBy_EFTRTGSDetails; "EFT/RTGS Details"."Transferred By")
                {
                }
                column(DateEntered_EFTRTGSDetails; "EFT/RTGS Details"."Date Entered")
                {
                }
                column(TimeEntered_EFTRTGSDetails; "EFT/RTGS Details"."Time Entered")
                {
                }
                column(EnteredBy_EFTRTGSDetails; "EFT/RTGS Details"."Entered By")
                {
                }
                column(TransactionDescription_EFTRTGSDetails; "EFT/RTGS Details"."Transaction Description")
                {
                }
                column(PayeeBankName_EFTRTGSDetails; "EFT/RTGS Details"."Payee Bank Name")
                {
                }
                column(BankNo_EFTRTGSDetails; "EFT/RTGS Details"."Bank No")
                {
                }
                column(Charges_EFTRTGSDetails; "EFT/RTGS Details".Charges)
                {
                }
                column(HeaderNo_EFTRTGSDetails; "EFT/RTGS Details"."Header No")
                {
                }
                column(MemberNo_EFTRTGSDetails; "EFT/RTGS Details"."Member No")
                {
                }
                column(AmountText_EFTRTGSDetails; "EFT/RTGS Details"."Amount Text")
                {
                }
                column(ExportFormat_EFTRTGSDetails; "EFT/RTGS Details".ExportFormat)
                {
                }
                column(EAccNo_EFTRTGSDetails; "EFT/RTGS Details".EAccNo)
                {
                }
                column(EBankCode_EFTRTGSDetails; "EFT/RTGS Details".EBankCode)
                {
                }
                column(EAccName_EFTRTGSDetails; "EFT/RTGS Details".EAccName)
                {
                }
                column(EAmount_EFTRTGSDetails; "EFT/RTGS Details".EAmount)
                {
                }
                column(EReff_EFTRTGSDetails; "EFT/RTGS Details".EReff)
                {
                }
                column(StaffNo_EFTRTGSDetails; "EFT/RTGS Details"."Staff No")
                {
                }
                column(OverDrawn_EFTRTGSDetails; "EFT/RTGS Details"."Over Drawn")
                {
                }
                column(Primary_EFTRTGSDetails; "EFT/RTGS Details".Primary)
                {
                }
                column(StandingOrderNo_EFTRTGSDetails; "EFT/RTGS Details"."Standing Order No")
                {
                }
                column(EFTType_EFTRTGSDetails; "EFT/RTGS Details"."EFT Type")
                {
                }
                column(EFTChargesAccount_EFTRTGSDetails; "EFT/RTGS Details"."EFT Charges Account")
                {
                }
                column(StandingOrderRegisterNo_EFTRTGSDetails; "EFT/RTGS Details"."Standing Order Register No")
                {
                }
                column(DontCharge_EFTRTGSDetails; "EFT/RTGS Details"."Don't Charge")
                {
                }
                column(PhoneNo_EFTRTGSDetails; "EFT/RTGS Details"."Phone No.")
                {
                }
                column(NotAvailable_EFTRTGSDetails; "EFT/RTGS Details"."Not Available")
                {
                }
                column(EFTRTGSType_EFTRTGSDetails; "EFT/RTGS Details"."EFT/RTGS Type")
                {
                }
                column(EFTRTGSTypeDescription_EFTRTGSDetails; "EFT/RTGS Details"."EFT/RTGS Type Description")
                {
                }
                column(DestinationCashBook_EFTRTGSDetails; "EFT/RTGS Details"."Destination Cash Book")
                {
                }
                column(DestinationCashBookName_EFTRTGSDetails; "EFT/RTGS Details"."Destination Cash Book Name")
                {
                }
            }
            trigger OnAfterGetRecord();
            begin
                DOCNAME := 'RTGS TRANSFER SLIP';
                ObjApprovalEntry.Reset;
                ObjApprovalEntry.SetRange(ObjApprovalEntry."Document No.", No);
                ObjApprovalEntry.SetRange(ObjApprovalEntry.Status, ObjApprovalEntry.Status::Approved);
                if ObjApprovalEntry.FindFirst then begin
                    VarApproverI := ObjApprovalEntry."Last Modified By User ID";
                    VarApproverIDate := ObjApprovalEntry."Last Date-Time Modified";
                end;
                /*ObjApprovalEntry.RESET;
				ObjApprovalEntry.SETRANGE(ObjApprovalEntry."Document No.",No);
				ObjApprovalEntry.SETRANGE(ObjApprovalEntry.Status,ObjApprovalEntry.Status::Approved);
				IF ObjApprovalEntry.FINDLAST THEN
				  BEGIN
					VarApproverII:=ObjApprovalEntry."Last Modified By User ID";
					VarApproverIIDate:=ObjApprovalEntry."Last Date-Time Modified";
					END;*/

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CI.Get();
        CI.CalcFields(CI.Picture);
        ;
        ReportsForNavPre;
    end;

    var
        StrCopyText: Text[30];
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        DimVal: Record "Dimension Value";
        DimValName: Text[30];
        TTotal: Decimal;
        CheckReport: Report Check;
        NumberText: array[2] of Text[80];
        STotal: Decimal;
        InvoiceCurrCode: Code[10];
        CurrCode: Code[10];
        GLSetup: Record "General Ledger Setup";
        DOCNAME: Text[30];
        VATCaptionLbl: label 'VAT';
        PAYMENT_DETAILSCaptionLbl: label 'PAYMENT DETAILS';
        AMOUNTCaptionLbl: label 'AMOUNT';
        NET_AMOUNTCaptionLbl: label 'AMOUNT';
        W_TAXCaptionLbl: label 'W/TAX';
        Document_No___CaptionLbl: label 'Document No. :';
        Currency_CaptionLbl: label 'Currency:';
        Payment_To_CaptionLbl: label 'Payment To:';
        Document_Date_CaptionLbl: label 'Document Date:';
        Cheque_No__CaptionLbl: label 'Cheque No.:';
        R_CENTERCaptionLbl: label 'R.CENTER CODE';
        PROJECTCaptionLbl: label 'PROJECT CODE';
        TotalCaptionLbl: label 'Total';
        Printed_By_CaptionLbl: label 'Printed By:';
        Amount_in_wordsCaptionLbl: label 'Amount in words';
        EmptyStringCaptionLbl: label '================================================================================================================================================================================================';
        EmptyStringCaption_Control1102755013Lbl: label '================================================================================================================================================================================================';
        Amount_in_wordsCaption_Control1102755021Lbl: label 'Amount in words';
        Printed_By_Caption_Control1102755026Lbl: label 'Printed By:';
        TotalCaption_Control1102755033Lbl: label 'Total';
        Signature_CaptionLbl: label 'Signature:';
        Date_CaptionLbl: label 'Date:';
        Name_CaptionLbl: label 'Name:';
        RecipientCaptionLbl: label 'Recipient';
        CompanyInfo: Record "Company Information";
        BudgetLbl: label 'Budget';
        CreationDoc: Boolean;
        DtldVendEntry: Record "Detailed Vendor Ledg. Entry";
        InvNo: Code[20];
        InvAmt: Decimal;
        ApplyEnt: Record "Vendor Ledger Entry";
        VendEnrty: Record "Vendor Ledger Entry";
        CI: Record "Company Information";
        ObjApprovalEntry: Record "Approval Entry";
        VarApproverI: Code[20];
        VarApproverIDate: DateTime;
        VarApproverII: Code[20];
        VarApproverIIDate: DateTime;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516943_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
