#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516093_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50093 "Bank Account Reconciliation"
{
    RDLCLayout = 'Layouts/BankAccountReconciliation.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Acc. Reconciliation"; "Bank Acc. Reconciliation")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(BankNo; "Bank Acc. Reconciliation"."Bank Account No.")
            {
            }
            column(StatementNo; "Bank Acc. Reconciliation"."Statement No.")
            {
            }
            column(StatementBalance; "Bank Acc. Reconciliation"."Statement Ending Balance")
            {
            }
            column(StatementDate; "Bank Acc. Reconciliation"."Statement Date")
            {
            }
            column(CName; CompanyInfo.Name)
            {
            }
            column(CAddress; CompanyInfo.Address)
            {
            }
            column(CPic; CompanyInfo.Picture)
            {
            }
            column(CashBal; CashBal)
            {
            }
            column(UnpresentedDepositSlips; UnpresentedDepositSlips)
            {
            }
            column(UnpresentedCheques; UnpresentedCheques)
            {
            }
            column(ReconcilledBalance; ReconcilledBalance)
            {
            }
            column(BankStmtBalance; BankStmtBalance)
            {
            }
            column(Differences; Difference)
            {
            }
            column(BankName; BankName)
            {
            }
            dataitem("Bank Acc. Reconciliation Line"; "Bank Acc. Reconciliation Line")
            {
                DataItemLink = "Bank Account No." = field("Bank Account No."), "Statement No." = field("Statement No.");
                column(ReportForNavId_6; 6) { } // Autogenerated by ForNav - Do not delete
                column(DocumentNo; "Bank Acc. Reconciliation Line"."Document No.")
                {
                }
                column(TransactionDate; "Bank Acc. Reconciliation Line"."Transaction Date")
                {
                }
                column(Description; "Bank Acc. Reconciliation Line".Description)
                {
                }
                column(StatementAmount; "Bank Acc. Reconciliation Line"."Statement Amount")
                {
                }
                column(AppliedAmount; "Bank Acc. Reconciliation Line"."Applied Amount")
                {
                }
                column(Difference; "Bank Acc. Reconciliation Line".Difference)
                {
                }
                column(CheckNo; "Bank Acc. Reconciliation Line"."Check No.")
                {
                }
                trigger OnPreDataItem();
                begin
                    SetFilter("Transaction Date", '<=%1', "Bank Acc. Reconciliation"."Statement Date");
                end;

            }
            dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
            {
                DataItemLink = "Bank Account No." = field("Bank Account No.");
                column(ReportForNavId_18; 18) { } // Autogenerated by ForNav - Do not delete
                column(DocumentNo2; "Bank Account Ledger Entry"."Document No.")
                {
                }
                column(TransactionDate2; "Bank Account Ledger Entry"."Posting Date")
                {
                }
                column(Description2; "Bank Account Ledger Entry".Description)
                {
                }
                column(Amount2; "Bank Account Ledger Entry".Amount)
                {
                }
                column(RemainingAmount2; "Bank Account Ledger Entry"."Remaining Amount")
                {
                }
                column(CheckNo2; "Bank Account Ledger Entry"."External Document No.")
                {
                }
                column(Status; "Bank Account Ledger Entry"."Statement Status")
                {
                }
                trigger OnPreDataItem();
                begin
                    SetFilter("Posting Date", '<=%1', "Bank Acc. Reconciliation"."Statement Date");
                end;

            }
            trigger OnAfterGetRecord();
            begin
                BankAcc.Reset;
                BankAcc.SetRange(BankAcc."No.", "Bank Acc. Reconciliation"."Bank Account No.");
                if BankAcc.FindFirst then begin
                    BankName := BankAcc.Name;
                end;
                BankAccLedger.Reset;
                BankAccLedger.SetRange(BankAccLedger."Bank Account No.", "Bank Acc. Reconciliation"."Bank Account No.");
                BankAccLedger.SetFilter(BankAccLedger."Posting Date", '<=%1', "Bank Acc. Reconciliation"."Statement Date");
                if BankAccLedger.FindSet then begin
                    repeat
                        CashBal := CashBal + BankAccLedger.Amount;
                        if (BankAccLedger."Statement Status" = BankAccLedger."statement status"::Open) and (BankAccLedger.Amount < 0) then begin
                            UnpresentedCheques := UnpresentedCheques + BankAccLedger.Amount;
                        end;
                    until BankAccLedger.Next = 0;
                end;
                BankRecLines.Reset;
                BankRecLines.SetRange(BankRecLines."Bank Account No.", "Bank Account No.");
                BankRecLines.SetRange(BankRecLines."Statement No.", "Statement No.");
                BankRecLines.SetFilter(BankRecLines."Transaction Date", '<=%1', "Bank Acc. Reconciliation"."Statement Date");
                BankRecLines.SetFilter(BankRecLines.Difference, '<>%1', 0);
                if BankRecLines.FindSet then begin
                    repeat
                        if BankRecLines.Difference > 0 then begin
                            UnpresentedDepositSlips := UnpresentedDepositSlips + BankRecLines."Statement Amount";
                        end;
                    until BankRecLines.Next = 0;
                end;
                ReconcilledBalance := CashBal + UnpresentedCheques + UnpresentedDepositSlips;
                BankStmtBalance := "Bank Acc. Reconciliation"."Statement Ending Balance";
                Difference := ReconcilledBalance - BankStmtBalance;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        CompanyInfo.CalcFields(CompanyInfo.Picture);
        ;
        ReportsForNavPre;
    end;

    var
        CompanyInfo: Record "Company Information";
        CashBal: Decimal;
        ReconcilledAmt: Decimal;
        BankAcc: Record "Bank Account";
        BankAccLedger: Record "Bank Account Ledger Entry";
        UnpresentedDepositSlips: Decimal;
        UnpresentedCheques: Decimal;
        ReconcilledBalance: Decimal;
        BankStmtBalance: Decimal;
        Difference: Decimal;
        BankRecLines: Record "Bank Acc. Reconciliation Line";
        BankName: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516093_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
