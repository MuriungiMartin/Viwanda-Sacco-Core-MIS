#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516958_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50958 "OverDraft Accounts"
{
    RDLCLayout = 'Layouts/OverDraftAccounts.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Vendor; Vendor)
        {
            DataItemTableView = where("Account Type" = filter(406));
            PrintOnlyIfDetail = false;
            RequestFilterFields = "No.", "BOSA Account No", "Account Type", "Global Dimension 2 Code", Balance;
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(AccountType_Vendor; Vendor."Account Type")
            {
            }
            column(IDNo_Vendor; Vendor."ID No.")
            {
            }
            column(No_Vendor; Vendor."No.")
            {
            }
            column(Name_Vendor; Vendor.Name)
            {
            }
            column(Balance_Vendor; Vendor.Balance)
            {
            }
            column(OverDraftLimitAmount_Vendor; Vendor."Over Draft Limit Amount")
            {
            }
            column(OverDraftLimitExpiryDate_Vendor; Format(Vendor."Over Draft Limit Expiry Date"))
            {
            }
            column(GlobalDimension2Code_Vendor; Vendor."Global Dimension 2 Code")
            {
            }
            column(MobilePhoneNo_Vendor; Vendor."Mobile Phone No")
            {
            }
            column(VarCount; VarCount)
            {
            }
            trigger OnAfterGetRecord();
            begin
                VarAmountinArrears := 0;
                VarCount := VarCount + 1;
                //SFactory.FnGetLoanArrearsAmountII("Loans Register"."Loan  No.");
                //FnRunOverdraftSweeping;
                //FnRunTransferOverdrawAmounttoOD;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Company: Record "Company Information";
        SFactory: Codeunit "SURESTEP Factory";
        VarAmountinArrears: Decimal;
        ObjRepaymentSchedule: Record "Loan Repayment Schedule";
        VarCount: Integer;

    local procedure FnRunOverdraftSweeping()
    var
        ObjAccounts: Record Vendor;
        ObjAccountsII: Record Vendor;
        VarODBalance: Decimal;
        VarAvailableOtherFOSAAccounts: Decimal;
        ObjAccTypes: Record "Account Types-Saving Products";
        VarAmountDeducted: Decimal;
        GenJournalLine: Record "Gen. Journal Line";
        BATCH_TEMPLATE: Code[30];
        BATCH_NAME: Code[30];
        LineNo: Integer;
        DOCUMENT_NO: Code[30];
    begin
        ObjAccountsII.CalcFields(ObjAccountsII."Balance (LCY)");
        ObjAccountsII.Reset;
        ObjAccountsII.SetRange(ObjAccountsII."No.", Vendor."No.");
        ObjAccountsII.SetFilter(ObjAccountsII."Account Type", '%1', '406');
        ObjAccountsII.SetFilter(ObjAccountsII."Balance (LCY)", '<%1', 0);
        if ObjAccountsII.FindSet then begin
            VarODBalance := ObjAccountsII."Balance (LCY)";
            VarAvailableOtherFOSAAccounts := 0;
            ObjAccounts.Reset;
            ObjAccounts.SetRange(ObjAccounts."BOSA Account No", Vendor."BOSA Account No");
            ObjAccounts.SetFilter(ObjAccounts."Account Type", '%1|%2|%3|%4|%5', '401', '402', '403', '404', '501');
            if ObjAccounts.FindSet then begin
                repeat
                    ObjAccounts.CalcFields(ObjAccounts.Balance, ObjAccounts."Uncleared Cheques");
                    VarAvailableOtherFOSAAccounts := ((ObjAccounts.Balance + ObjAccounts."Over Draft Limit Amount") - ObjAccounts."Uncleared Cheques");
                    ObjAccTypes.Reset;
                    ObjAccTypes.SetRange(ObjAccTypes.Code, ObjAccounts."Account Type");
                    if ObjAccTypes.Find('-') then
                        VarAvailableOtherFOSAAccounts := VarAvailableOtherFOSAAccounts - ObjAccTypes."Minimum Balance";
                    ObjAccountsII.CalcFields(ObjAccountsII."Balance (LCY)");
                    VarODBalance := ObjAccountsII."Balance (LCY)";
                    if (VarAvailableOtherFOSAAccounts > 0) and (VarODBalance < 0) then begin
                        if (VarODBalance * -1) > VarAvailableOtherFOSAAccounts then begin
                            VarAmountDeducted := VarAvailableOtherFOSAAccounts
                        end else
                            VarAmountDeducted := (VarODBalance * -1);
                        GenJournalLine.Reset;
                        GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                        GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                        GenJournalLine.DeleteAll;
                        //------------------------------------1. Debit FOSA Account---------------------------------------------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::" ",
                        GenJournalLine."account type"::Vendor, ObjAccounts."No.", WorkDate, VarAmountDeducted, 'FOSA', '',
                        'Overdraft Sweeping to - ' + ObjAccountsII."No.", '', GenJournalLine."application source"::CBS);
                        //------------------------------------2. Credit OD Account---------------------------------------------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::" ",
                        GenJournalLine."account type"::Vendor, ObjAccountsII."No.", WorkDate, VarAmountDeducted * -1, 'FOSA', '',
                        'Overdraft Sweeping From - ' + ObjAccounts."No.", '', GenJournalLine."application source"::CBS);
                        //--------------------------------(Credit OD Account)---------------------------------------------
                        //CU posting
                        GenJournalLine.Reset;
                        GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                        GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                        if GenJournalLine.Find('-') then
                            Codeunit.Run(Codeunit::"Gen. Jnl.-Post Sacco", GenJournalLine);
                    end;
                until ObjAccounts.Next = 0;
            end;
        end;
    end;

    local procedure FnRunTransferOverdrawAmounttoOD()
    var
        ObjAccounts: Record Vendor;
        ObjAccountsII: Record Vendor;
        VarODBalance: Decimal;
        VarAvailableOtherFOSAAccounts: Decimal;
        ObjAccTypes: Record "Account Types-Saving Products";
        VarAmountDeducted: Decimal;
        GenJournalLine: Record "Gen. Journal Line";
        BATCH_TEMPLATE: Code[30];
        BATCH_NAME: Code[30];
        LineNo: Integer;
        DOCUMENT_NO: Code[30];
    begin
        ObjAccountsII.Reset;
        ObjAccountsII.SetRange(ObjAccountsII."No.", Vendor."No.");
        ObjAccountsII.SetFilter(ObjAccountsII."Account Type", '%1', '406');
        if ObjAccountsII.FindSet then begin
            VarODBalance := ObjAccountsII."Balance (LCY)";
            VarAvailableOtherFOSAAccounts := 0;
            ObjAccounts.CalcFields(ObjAccounts."Balance (LCY)");
            ObjAccounts.Reset;
            ObjAccounts.SetRange(ObjAccounts."BOSA Account No", Vendor."BOSA Account No");
            ObjAccounts.SetFilter(ObjAccounts."Account Type", '%1|%2|%3|%4|%5', '401', '402', '403', '404', '501');
            if ObjAccounts.FindSet then begin
                repeat
                    ObjAccounts.CalcFields(ObjAccounts.Balance, ObjAccounts."Uncleared Cheques");
                    VarAvailableOtherFOSAAccounts := ((ObjAccounts.Balance + ObjAccounts."Over Draft Limit Amount") - ObjAccounts."Uncleared Cheques");
                    ObjAccTypes.Reset;
                    ObjAccTypes.SetRange(ObjAccTypes.Code, ObjAccounts."Account Type");
                    if ObjAccTypes.Find('-') then
                        VarAvailableOtherFOSAAccounts := VarAvailableOtherFOSAAccounts - ObjAccTypes."Minimum Balance";
                    if VarAvailableOtherFOSAAccounts < 0 then begin
                        GenJournalLine.Reset;
                        GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                        GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                        GenJournalLine.DeleteAll;
                        //------------------------------------1. Debit OD Account---------------------------------------------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::" ",
                        GenJournalLine."account type"::Vendor, ObjAccountsII."No.", WorkDate, VarAvailableOtherFOSAAccounts * -1, 'FOSA', '',
                        'Overdraft Sweeping to - ' + ObjAccounts."No.", '', GenJournalLine."application source"::CBS);
                        //------------------------------------2. Credit FOSA Account---------------------------------------------------------------------------------------------
                        LineNo := LineNo + 10000;
                        SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE, BATCH_NAME, DOCUMENT_NO, LineNo, GenJournalLine."transaction type"::" ",
                        GenJournalLine."account type"::Vendor, ObjAccounts."No.", WorkDate, VarAvailableOtherFOSAAccounts, 'FOSA', '',
                        'Overdraft Sweeping From - ' + ObjAccountsII."No.", '', GenJournalLine."application source"::CBS);
                        //--------------------------------(Credit OD Account)---------------------------------------------
                        //CU posting
                        GenJournalLine.Reset;
                        GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                        GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                        if GenJournalLine.Find('-') then
                            Codeunit.Run(Codeunit::"Gen. Jnl.-Post Sacco", GenJournalLine);
                    end;
                until ObjAccounts.Next = 0;
            end;
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516958_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
