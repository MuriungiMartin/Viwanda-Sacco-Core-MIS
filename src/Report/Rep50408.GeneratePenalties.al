#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516408_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50408 "Generate Penalties"
{
    RDLCLayout = 'Layouts/GeneratePenalties.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loans Register"; "Loans Register")
        {
            DataItemTableView = sorting("Loan  No.") where("Loan Product Type" = filter(<> 'BRIDGING'), Posted = const(true), "Outstanding Balance to Date" = filter(> 0));
            RequestFilterFields = "Loan  No.", "Loan Product Type", "Date filter";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(Loans__Loan__No__; "Loans Register"."Loan  No.")
            {
            }
            column(Loans__Loan_Product_Type_; "Loans Register"."Loan Product Type")
            {
            }
            column(Loans__Client_Code_; "Loans Register"."Client Code")
            {
            }
            column(Loans__Client_Name_; "Loans Register"."Client Name")
            {
            }
            column(Loans__Outstanding_Balance_; "Loans Register"."Outstanding Balance")
            {
            }
            column(Loans__Schedule_Repayments_; "Loans Register"."Schedule Repayments")
            {
            }
            column(Loans__Loan_Repayment_; "Loans Register"."Loan Repayment")
            {
            }
            column(Schedule_Repayments___Loan_Repayment_; "Schedule Repayments" + "Loan Repayment")
            {
            }
            column(LoansCaption; LoansCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Loans__Loan__No__Caption; FieldCaption("Loan  No."))
            {
            }
            column(Loans__Loan_Product_Type_Caption; FieldCaption("Loan Product Type"))
            {
            }
            column(Loans__Client_Code_Caption; FieldCaption("Client Code"))
            {
            }
            column(Loans__Client_Name_Caption; FieldCaption("Client Name"))
            {
            }
            column(Loans__Outstanding_Balance_Caption; FieldCaption("Outstanding Balance"))
            {
            }
            column(Loans__Schedule_Repayments_Caption; FieldCaption("Schedule Repayments"))
            {
            }
            column(Loans__Loan_Repayment_Caption; FieldCaption("Loan Repayment"))
            {
            }
            column(VarienceCaption; VarienceCaptionLbl)
            {
            }
            trigger OnPreDataItem();
            begin
                Gnljnline.Reset;
                Gnljnline.SetRange(Gnljnline."Journal Template Name", 'GENERAL');
                Gnljnline.SetRange(Gnljnline."Journal Batch Name", 'PENALTY');
                if Gnljnline.Find('-') then
                    Gnljnline.DeleteAll;
            end;

            trigger OnAfterGetRecord();
            begin
                if "Loans Register"."Outstanding Balance" > 0 then begin
                    if "Loans Register"."Schedule Repayments" > ("Loans Register"."Loan Repayment" * -1) then begin
                        LoanType.Get("Loans Register"."Loan Product Type");
                        LineNo := LineNo + 10000;
                        Gnljnline.Init;
                        Gnljnline."Journal Template Name" := 'GENERAL';
                        Gnljnline."Journal Batch Name" := 'PENALTY';
                        Gnljnline."Line No." := LineNo;
                        Gnljnline."Account Type" := Gnljnline."account type"::Member;
                        Gnljnline."Account No." := "Loans Register"."Client Code";
                        Gnljnline."Transaction Type" := Gnljnline."transaction type"::"Unallocated Funds";
                        Gnljnline.Validate(Gnljnline."Account No.");
                        Gnljnline."Document No." := DocNo;
                        Gnljnline."Posting Date" := PDate;
                        Gnljnline.Description := 'Late Payment Penalty';
                        Gnljnline.Amount := ROUND(("Loans Register"."Schedule Repayments" + "Loans Register"."Loan Repayment") * (LoanType."Penalty Percentage" / 100), 0.05, '>');
                        if Gnljnline.Amount < 200 then
                            Gnljnline.Amount := 200;
                        Gnljnline.Validate(Gnljnline.Amount);
                        Gnljnline."Bal. Account Type" := Gnljnline."bal. account type"::"G/L Account";
                        Gnljnline."Bal. Account No." := LoanType."Penalty Paid Account";
                        Gnljnline.Validate(Gnljnline."Bal. Account No.");
                        Gnljnline."Loan No" := "Loans Register"."Loan  No.";
                        //IF Gnljnline.Amount<>0 THEN
                        Gnljnline.Insert;
                    end;
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        LoanType: Record "Loan Products Setup";
        Gnljnline: Record "Gen. Journal Line";
        LineNo: Integer;
        DocNo: Code[20];
        PDate: Date;
        LoansCaptionLbl: label 'Loans';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        VarienceCaptionLbl: label 'Varience';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516408_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
