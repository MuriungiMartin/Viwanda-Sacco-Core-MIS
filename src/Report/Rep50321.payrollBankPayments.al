#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516321_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50321 "payroll Bank Payments."
{
    RDLCLayout = 'Layouts/payrollBankPayments..rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Banks; Banks)
        {
            RequestFilterFields = "Branch Code", "Bank Code";
            column(ReportForNavId_4233; 4233) { } // Autogenerated by ForNav - Do not delete
            column(UserId; UserId)
            {
            }
            column(Today; Today)
            {
            }
            column(PeriodName; PeriodName)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(companyinfo_Picture; companyinfo.Picture)
            {
            }
            column(TotTaxablePay; TotTaxablePay)
            {
            }
            column(User_Name_Caption; User_Name_CaptionLbl)
            {
            }
            column(Print_Date_Caption; Print_Date_CaptionLbl)
            {
            }
            column(BANK_PAYMENT_REPORTCaption; BANK_PAYMENT_REPORTCaptionLbl)
            {
            }
            column(Period_Caption; Period_CaptionLbl)
            {
            }
            column(Page_No_Caption; Page_No_CaptionLbl)
            {
            }
            column(Net_Amount_Caption; Net_Amount_CaptionLbl)
            {
            }
            column(Account_Number_Caption; Account_Number_CaptionLbl)
            {
            }
            column(Employee_NameCaption; Employee_NameCaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(Employee_BankCaption; Employee_BankCaptionLbl)
            {
            }
            column(Bank_Branch_Caption; Bank_Branch_CaptionLbl)
            {
            }
            column(Prepared_by_______________________________________Date_________________Caption; Prepared_by_______________________________________Date_________________CaptionLbl)
            {
            }
            column(Checked_by________________________________________Date_________________Caption; Checked_by________________________________________Date_________________CaptionLbl)
            {
            }
            column(Authorized_by____________________________________Date_________________Caption; Authorized_by____________________________________Date_________________CaptionLbl)
            {
            }
            column(Approved_by______________________________________Date_________________Caption; Approved_by______________________________________Date_________________CaptionLbl)
            {
            }
            column(Total_Caption; Total_CaptionLbl)
            {
            }
            column(prBank_Structure_Bank_Code; Banks."Branch Code")
            {
            }
            column(prBank_Structure_Branch_Code; Banks.Branch)
            {
            }
            dataitem("Payroll Employee."; "Payroll Employee.")
            {
                DataItemLink = "Bank Code" = field("Branch Code"), "Branch Code" = field("Bank Code");
                DataItemTableView = sorting("No.") order(ascending);
                column(ReportForNavId_8631; 8631) { } // Autogenerated by ForNav - Do not delete
                column(HR_Employee__Main_Bank_; "Payroll Employee."."Bank Code")
                {
                }
                column(HR_Employee__Branch_Bank_; "Payroll Employee."."Branch Code")
                {
                }
                column(HR_Employee__Main_Bank_Caption; FieldCaption("Bank Code"))
                {
                }
                column(HR_Employee__Branch_Bank_Caption; FieldCaption("Branch Code"))
                {
                }
                column(HR_Employee_No_; "Payroll Employee."."No.")
                {
                }
                dataitem("prSalary Card"; "Payroll Employee.")
                {
                    DataItemLink = "No." = field("No.");
                    RequestFilterFields = "No.";
                    column(ReportForNavId_6207; 6207) { } // Autogenerated by ForNav - Do not delete
                    column(prSalary_Card__prSalary_Card___Employee_Code_; "prSalary Card"."No.")
                    {
                    }
                    column(EmployeeName; EmployeeName)
                    {
                    }
                    column(TaxablePay; TaxablePay)
                    {
                    }
                    column(bankAcc; bankAcc)
                    {
                    }
                    column(mainBankNM; mainBankNM)
                    {
                    }
                    column(BranchBankNM; BranchBankNM)
                    {
                    }
                    column(TotTaxablePay2; TotTaxablePay)
                    {
                    }
                    trigger OnAfterGetRecord();
                    begin
                        //  bankAcc:='';
                        //  mainBankNM:='';
                        //  BranchBankNM:='';
                        objEmp.Reset;
                        objEmp.SetRange(objEmp."No.", "No.");
                        if objEmp.Find('-') then
                            EmployeeName := objEmp.Firstname + ' ' + objEmp.Surname + ' ' + objEmp.Lastname;
                        //Bank Details
                        bankAcc := objEmp."Bank Account No";
                        bankStruct.Reset;
                        bankStruct.SetRange(bankStruct."Branch Code", objEmp."Bank Code");
                        bankStruct.SetRange(bankStruct."Bank Code", objEmp."Branch Code");
                        if bankStruct.Find('-') then begin
                            mainBankNM := bankStruct."Bank Name";
                            BranchBankNM := bankStruct.Branch;
                        end;
                        PeriodTrans.Reset;
                        PeriodTrans.SetRange(PeriodTrans."Employee Code", "No.");
                        PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                        TaxablePay := 0;
                        if PeriodTrans.Find('-') then
                            repeat
                                //TXBP Taxable Pay -  BY DENNIS
                                if (PeriodTrans."Transaction Code" = 'NPAY') then begin
                                    TaxablePay := PeriodTrans.Amount;
                                end;
                            until PeriodTrans.Next = 0;
                        TotTaxablePay := TotTaxablePay + TaxablePay;
                        TotPayeAmount := TotPayeAmount + PayeAmount;
                    end;

                }
            }
        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("Payroll Period"; SelectedPeriod)
                {
                    ApplicationArea = Basic;
                    //TableRelation = "HR Job Qualifications".Field10;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        if UserSetup.Get(UserId) then begin
            if UserSetup."View Payroll" = false then Error('You dont have permissions for payroll, Contact your system administrator! ')
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        /*PeriodFilter:="prSalary Card".GETFILTER("Period Filter");
		IF PeriodFilter='' THEN ERROR('You must specify the period filter');
		SelectedPeriod:="prSalary Card".GETRANGEMIN("Period Filter");
		*/
        if SelectedPeriod = 0D then Error('You must specify the period filter');
        objPeriod.Reset;
        if objPeriod.Get(SelectedPeriod) then PeriodName := objPeriod."Period Name";
        if companyinfo.Get() then
            companyinfo.CalcFields(companyinfo.Picture);
        ;
        ReportsForNavPre;

    end;

    var
        PeriodTrans: Record "prPeriod Transactions.";
        PayeAmount: Decimal;
        TotPayeAmount: Decimal;
        TaxablePay: Decimal;
        TotTaxablePay: Decimal;
        EmployeeName: Text[30];
        PinNumber: Text[30];
        objPeriod: Record "Payroll Calender.";
        objEmp: Record "Payroll Employee.";
        SelectedPeriod: Date;
        PeriodName: Text[30];
        PeriodFilter: Text[30];
        companyinfo: Record "Company Information";
        bankStruct: Record Banks;
        bankAcc: Text[50];
        BranchBankNM: Text[100];
        mainBankNM: Text[100];
        User_Name_CaptionLbl: label 'User Name:';
        Print_Date_CaptionLbl: label 'Print Date:';
        BANK_PAYMENT_REPORTCaptionLbl: label 'BANK PAYMENT REPORT';
        Period_CaptionLbl: label 'Period:';
        Page_No_CaptionLbl: label 'Page No:';
        Net_Amount_CaptionLbl: label 'Net Amount:';
        Account_Number_CaptionLbl: label 'Account Number:';
        Employee_NameCaptionLbl: label 'Employee Name';
        No_CaptionLbl: label 'No:';
        Employee_BankCaptionLbl: label 'Employee Bank';
        Bank_Branch_CaptionLbl: label 'Bank Branch:';
        Prepared_by_______________________________________Date_________________CaptionLbl: label 'Prepared byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..				 DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Checked_by________________________________________Date_________________CaptionLbl: label 'Checked byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..				   DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Authorized_by____________________________________Date_________________CaptionLbl: label 'Authorized byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..			  DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Approved_by______________________________________Date_________________CaptionLbl: label 'Approved byÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ..				DateÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ';
        Total_CaptionLbl: label 'Total:';
        UserSetup: Record "User Setup";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516321_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
