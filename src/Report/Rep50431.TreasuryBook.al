#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516431_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50431 "Treasury Book"
{
    RDLCLayout = 'Layouts/TreasuryBook.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account"; "Bank Account")
        {
            DataItemTableView = where("Account Type" = filter(Treasury));
            RequestFilterFields = "No.", "Search Name", "Bank Acc. Posting Group", "Date Filter";
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address2; Company."Address 2")
            {
            }
            column(Company_PhoneNo; Company."Phone No.")
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(S_No; SN)
            {
            }
            column(No; "Bank Account"."No.")
            {
            }
            column(Name; "Bank Account".Name)
            {
            }
            column(Current_Code; "Bank Account"."Currency Code")
            {
            }
            column(StartBalance; StartBalance)
            {
            }
            dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
            {
                DataItemLink = "Bank Account No." = field("No."), "Posting Date" = field("Date Filter");
                DataItemTableView = sorting("Entry No.") where("Document No." = filter(<> 'TR-045'));
                column(ReportForNavId_1000000004; 1000000004) { } // Autogenerated by ForNav - Do not delete
                column(Posting_Date; "Bank Account Ledger Entry"."Posting Date")
                {
                }
                column(Document_No; "Bank Account Ledger Entry"."Document No.")
                {
                }
                column(Bal_Account_No; "Bank Account Ledger Entry"."Bal. Account No.")
                {
                }
                column(Bal_Account_Type; "Bank Account Ledger Entry"."Bal. Account Type")
                {
                }
                column(Description; "Bank Account Ledger Entry".Description)
                {
                }
                column(Debit_Amount; "Bank Account Ledger Entry"."Debit Amount")
                {
                }
                column(Credit_Amount; "Bank Account Ledger Entry"."Credit Amount")
                {
                }
                column(BankAccBalance; BankAccBalance)
                {
                }
                column(Entry_No; "Bank Account Ledger Entry"."Entry No.")
                {
                }
                trigger OnPreDataItem();
                begin
                    BankAccLedgEntryExists := false;

                end;

                trigger OnAfterGetRecord();
                begin
                    if not PrintReversedEntries and Reversed then
                        CurrReport.Skip;
                    BankAccLedgEntryExists := true;
                    BankAccBalance := BankAccBalance + Amount;
                    BankAccBalanceLCY := BankAccBalanceLCY + "Amount (LCY)";
                    Names := '';
                    if "Bank Account Ledger Entry"."Bal. Account Type" = "Bank Account Ledger Entry"."bal. account type"::Customer then begin
                        if Cust.Get("Bank Account Ledger Entry"."Bal. Account No.") then
                            Names := Cust.Name;
                    end else
                        if "Bank Account Ledger Entry"."Bal. Account Type" = "Bank Account Ledger Entry"."bal. account type"::Vendor then begin
                            if Vend.Get("Bank Account Ledger Entry"."Bal. Account No.") then
                                Names := Vend.Name;
                        end
                        else
                            if "Bank Account Ledger Entry"."Bal. Account Type" = "Bank Account Ledger Entry"."bal. account type"::"Bank Account" then begin
                                if Bank.Get("Bank Account Ledger Entry"."Bal. Account No.") then
                                    Names := Bank.Name;
                            end;
                    TCredit := TCredit + "Bank Account Ledger Entry"."Credit Amount";
                    TDebit := TDebit + "Bank Account Ledger Entry"."Debit Amount";
                end;

            }
            dataitem(Integer; Integer)
            {
                DataItemTableView = sorting(Number) where(Number = const(1));
                column(ReportForNavId_1000000016; 1000000016) { } // Autogenerated by ForNav - Do not delete
                column(Bank_Account_Name; "Bank Account".Name)
                {
                }
                column(TDebit; TDebit)
                {
                }
                column(TCredit; TCredit)
                {
                }
                column(Bank_Account_L_E_Amount; "Bank Account Ledger Entry".Amount)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    if not BankAccLedgEntryExists and ((StartBalance = 0) or ExcludeBalanceOnly) then begin
                        StartBalanceLCY := 0;
                        CurrReport.Skip;
                    end;
                end;

            }
            dataitem(Transactions; Transactions)
            {
                DataItemLink = "Transaction Date" = field("Date Filter"), Cashier = field("Creditor No.");
                DataItemTableView = sorting(No) where(Type = const('Cheque Deposit'), Posted = const(true));
                column(ReportForNavId_1000000021; 1000000021) { } // Autogenerated by ForNav - Do not delete
                column("Not"; Transactions.No)
                {
                }
                column(Account_Not; Transactions."Account No")
                {
                }
                column(Account_Namet; Transactions."Account Name")
                {
                }
                column(Cheque_Typet; Transactions."Cheque Type")
                {
                }
                column(Cheque_Not; Transactions."Cheque No")
                {
                }
                column(Cheque_Datet; Transactions."Cheque Date")
                {
                }
                column(Cheque_MaturityDatet; Transactions."Expected Maturity Date")
                {
                }
                column(Amountt; Transactions.Amount)
                {
                }
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.GetDataItem('BankAccount').NewPagePerRecord := PrintOnlyOnePerPage;

                if Company.Get() then
                    Company.CalcFields(Company.Picture);
            end;

            trigger OnAfterGetRecord();
            begin
                StartBalance := 0;
                TCredit := 0;
                TDebit := 0;
                if BankAccDateFilter <> '' then
                    if GetRangeMin("Date Filter") <> 0D then begin
                        SetRange("Date Filter", 0D, GetRangeMin("Date Filter") - 1);
                        CalcFields("Net Change", "Net Change (LCY)");
                        StartBalance := "Net Change";
                        StartBalanceLCY := "Net Change (LCY)";
                        SetFilter("Date Filter", BankAccDateFilter);
                    end;
                ReportForNav.GetDataItem('BankAccount').PrintOnlyIfDetail := ExcludeBalanceOnly or (StartBalance = 0);
                BankAccBalance := StartBalance;
                BankAccBalanceLCY := StartBalanceLCY;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        PrintOnlyOnePerPage: Boolean;
        ExcludeBalanceOnly: Boolean;
        BankAccFilter: Text[250];
        BankAccDateFilter: Text[30];
        BankAccBalance: Decimal;
        BankAccBalanceLCY: Decimal;
        StartBalance: Decimal;
        StartBalanceLCY: Decimal;
        BankAccLedgEntryExists: Boolean;
        PrintReversedEntries: Boolean;
        Cust: Record "Members Register";
        Bank: Record "Bank Account";
        Vend: Record Vendor;
        Names: Text[50];
        TCredit: Decimal;
        TDebit: Decimal;
        Company: Record "Company Information";
        Text000: label 'Period: %1';
        SN: Integer;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516431_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
