#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport50038_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50645 "Credit Score"
{
    RDLCLayout = 'Layouts/CreditScore.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Members Register"; "Members Register")
        {
            DataItemTableView = where("No." = filter('002000001'));
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            trigger OnAfterGetRecord();
            begin
                /*VarDepositInconsistencyStartDateActual:=20180110D;
				VarDepositInconsistencyEndMonth:=CALCDATE('CM',VarDepositInconsistencyStartDateActual);
				REPEAT
					  IF WORKDATE>VarDepositInconsistencyStartDateActual THEN BEGIN
						VarDepositInconsistencyEndMonth:=CALCDATE('CM',VarDepositInconsistencyStartDateActual);
						VarDepositInconsistencyDateFilter:=FORMAT(VarDepositInconsistencyStartDateActual)+'..'+FORMAT(VarDepositInconsistencyEndMonth);
						ObjDetailedLedger.RESET;
						ObjDetailedLedger.SETRANGE(ObjDetailedLedger."Vendor No.","Deposits Account No");
						ObjDetailedLedger.SETFILTER(ObjDetailedLedger."Posting Date",VarDepositInconsistencyDateFilter);
						ObjDetailedLedger.SETFILTER(ObjDetailedLedger."Credit Amount",'<>%1',0);
						IF ObjDetailedLedger.FINDSET THEN BEGIN
						  ObjDetailedLedger.CALCSUMS(ObjDetailedLedger."Credit Amount");
						  VarTotalCredits:=ObjDetailedLedger."Credit Amount";
						  IF VarTotalCredits<"Members Register"."Monthly Contribution" THEN
						  VarDepositInconsistencyCount:=VarDepositInconsistencyCount+1;
						  END;
						  VarTotalCredits:=0;
						  VarDepositInconsistencyStartDateActual:=CALCDATE('1M',VarDepositInconsistencyStartDateActual);
						END;
					  UNTIL VarDepositInconsistencyStartDateActual>=WORKDATE;
					  MESSAGE(FORMAT(VarDepositInconsistencyCount));
					  ObjCreditScoreCriteria.RESET;
					  ObjCreditScoreCriteria.SETRANGE(ObjCreditScoreCriteria.Category,ObjCreditScoreCriteria.Category::"Deposit Inconsistency In A Year");
					  ObjCreditScoreCriteria.SETFILTER(ObjCreditScoreCriteria."Min Count Range",'<=%1',VarDepositInconsistencyCount);
					  ObjCreditScoreCriteria.SETFILTER(ObjCreditScoreCriteria."Max Count Range",'>=%1',VarDepositInconsistencyCount);
					  IF ObjCreditScoreCriteria.FINDSET THEN BEGIN
						ObjMemberCreditScore.INIT;
						ObjMemberCreditScore."Member No":="No.";
						ObjMemberCreditScore."Member Name":=Name;
						ObjMemberCreditScore.Category:=ObjCreditScoreCriteria.Category;
						ObjMemberCreditScore."Score Base Value":=VarDepositInconsistencyCount;
						ObjMemberCreditScore.Score:=ObjCreditScoreCriteria."Risk Score";
						ObjMemberCreditScore."Report Date":=WORKDATE;
						ObjMemberCreditScore.INSERT;
						END;
				*/
                SFactory.FnRunMemberCreditScoring("No.");

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        VarDepositInconsistencyStartDateActual: Date;
        VarDepositInconsistencyEndMonth: Date;
        VarDepositInconsistencyDateFilter: Text;
        ObjDetailedLedger: Record "Detailed Vendor Ledg. Entry";
        VarDepositInconsistencyCount: Integer;
        VarTotalCredits: Decimal;
        ObjCreditScoreCriteria: Record "Credit Score Criteria";
        ObjMemberCreditScore: Record "Member Credit Scoring";
        SFactory: Codeunit "SURESTEP Factory";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50038_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
