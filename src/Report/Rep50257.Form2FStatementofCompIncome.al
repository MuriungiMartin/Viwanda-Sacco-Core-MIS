#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516257_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50257 "Form2F Statement of CompIncome"
{
    RDLCLayout = 'Layouts/Form2FStatementofCompIncome.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Company; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(AsAt; AsAt)
            {
            }
            column(Date; Date)
            {
            }
            column(FinancialYear; FinancialYear)
            {
            }
            column(Name; Company.Name)
            {
            }
            column(InterestonLoanPortfolio; InterestonLoanPortfolio)
            {
            }
            column(FeesCommissiononLoanPortfolio; FeesCommissiononLoanPortfolio)
            {
            }
            column(GovernmentSecurities; GovernmentSecurities)
            {
            }
            column(InvestmentinCompaniesshares; InvestmentinCompaniesshares)
            {
            }
            column(EquityInvestmentsinsubsidiaries; EquityInvestmentsinsubsidiaries)
            {
            }
            column(Derivatives; Derivatives)
            {
            }
            column(CollectiveinvestmentSchemes; CollectiveinvestmentSchemes)
            {
            }
            column(CommercialPapers; CommercialPapers)
            {
            }
            column(PlacementinBanks; PlacementinBanks)
            {
            }
            column(nterestExpenseonDeposits; nterestExpenseonDeposits)
            {
            }
            column(CostofExternalBorrowings; CostofExternalBorrowings)
            {
            }
            column(DividendExpenses; DividendExpenses)
            {
            }
            column(OtherFinancialExpense; OtherFinancialExpense)
            {
            }
            column(FeesCommissionExpense; FeesCommissionExpense)
            {
            }
            column(OtherExpense; OtherExpense)
            {
            }
            column(ProvisionforLoanLosses; ProvisionforLoanLosses)
            {
            }
            column(ValueofLoansRecovered; ValueofLoansRecovered)
            {
            }
            column(PersonnelExpenses; PersonnelExpenses)
            {
            }
            column(GovernanceExpenses; GovernanceExpenses)
            {
            }
            column(MarketingExpenses; MarketingExpenses)
            {
            }
            column(DepreciationandAmortizationCharges; DepreciationandAmortizationCharges)
            {
            }
            column(AdministrativeExpenses; AdministrativeExpenses)
            {
            }
            column(NonOperatingIncome; NonOperatingIncome)
            {
            }
            column(NonOperatingExpense; NonOperatingExpense)
            {
            }
            column(Taxes; Taxes)
            {
            }
            column(Donations; Donations)
            {
            }
            column(FinancialIncomefromLoansPortfolio; FinancialIncomefromLoansPortfolio)
            {
            }
            column(FinancialExpense; FinancialExpense)
            {
            }
            column(NetFinancialIncomeLoss; NetFinancialIncomeLoss)
            {
            }
            column(NetNonOperatingIncomeExpense; NetNonOperatingIncomeExpense)
            {
            }
            column(FinancialIncomefromInvestments; FinancialIncomefromInvestments)
            {
            }
            column(AllowanceforLoanLoss; AllowanceforLoanLoss)
            {
            }
            column(OperatingExpenses; OperatingExpenses)
            {
            }
            column(NetOperatingIncome; NetOperatingIncome)
            {
            }
            column(NetIncomeBeforeTaxesandDonations; NetIncomeBeforeTaxesandDonations)
            {
            }
            column(NetIncomeAfterTaxesbeforeDonations; NetIncomeAfterTaxesbeforeDonations)
            {
            }
            column(NetIncomeAfterTaxesandDonations; NetIncomeAfterTaxesandDonations)
            {
            }
            column(FinancialIncome; FinancialIncome)
            {
            }
            trigger OnAfterGetRecord();
            begin
                InterestonLoanPortfolio := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::InterestonLoanPortfolio);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            InterestonLoanPortfolio += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //fees and commision on loan portfolio
                FeesCommissiononLoanPortfolio := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::FeesCommissiononLoanPortfolio);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            FeesCommissiononLoanPortfolio += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gov securities
                GovernmentSecurities := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::GovernmentSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            GovernmentSecurities += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //investment incompany shares
                InvestmentinCompaniesshares := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::InvestmentinCompaniesshares);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            InvestmentinCompaniesshares += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //nterestExpenseonDeposits
                nterestExpenseonDeposits := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::nterestExpenseonDeposits);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            nterestExpenseonDeposits += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //dividend expenses
                DividendExpenses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::DividendExpenses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            DividendExpenses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Other Financial Expense
                OtherFinancialExpense := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::OtherFinancialExpense);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherFinancialExpense += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Fees & Commission Expense
                FeesCommissionExpense := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::FeesCommissionExpense);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            FeesCommissionExpense += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Other Expense
                OtherExpense := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::OtherExpense);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherExpense += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Provision for Loan Losses
                ProvisionforLoanLosses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F(Statement of C Income)", '%1', GLAccount."form2f(statement of c income)"::ProvisionforLoanLosses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            ProvisionforLoanLosses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Personnel Expenses
                PersonnelExpenses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::PersonnelExpenses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PersonnelExpenses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Governance Expenses
                GovernanceExpenses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::GovernanceExpenses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            GovernanceExpenses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Marketing Expenses
                MarketingExpenses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::MarketingExpenses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            MarketingExpenses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //DepreciationandAmortizationCharges
                DepreciationandAmortizationCharges := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::DepreciationandAmortizationCharges);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            DepreciationandAmortizationCharges += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //AdministrativeExpenses
                AdministrativeExpenses := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::AdministrativeExpenses);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            AdministrativeExpenses += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //taxes
                Taxes := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::Taxes);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Taxes += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //nonoperating incomes
                Taxes := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::NonOperatingIncome);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            NonOperatingIncome += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //nonoperating expense
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Form2F1(Statement of C Income)", '%1', GLAccount."form2f1(statement of c income)"::NonOperatingExpense);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            NonOperatingExpense += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                FinancialIncomefromInvestments := InvestmentinCompaniesshares + EquityInvestmentsinsubsidiaries + PlacementinBanks + Derivatives + CollectiveinvestmentSchemes + GovernmentSecurities + CommercialPapers;
                FinancialIncomefromLoansPortfolio := InterestonLoanPortfolio + FeesCommissiononLoanPortfolio;
                FinancialExpense := (DividendExpenses + nterestExpenseonDeposits + OtherFinancialExpense + OtherExpense + FeesCommissionExpense + CostofExternalBorrowings);
                NetNonOperatingIncomeExpense := NonOperatingIncome + NonOperatingExpense;
                FinancialIncome := FinancialIncomefromLoansPortfolio + NetNonOperatingIncomeExpense + FinancialIncomefromInvestments;
                NetFinancialIncomeLoss := FinancialIncome + FinancialExpense;
                AllowanceforLoanLoss := ProvisionforLoanLosses + ValueofLoansRecovered;
                OperatingExpenses := GovernanceExpenses + PersonnelExpenses + MarketingExpenses + AdministrativeExpenses + DepreciationandAmortizationCharges;
                NetOperatingIncome := NetFinancialIncomeLoss + AllowanceforLoanLoss + OperatingExpenses;
                NetIncomeBeforeTaxesandDonations := NetOperatingIncome;//+NetNonOperatingIncomeExpense;
                NetIncomeAfterTaxesbeforeDonations := NetIncomeBeforeTaxesandDonations - Taxes;
                NetIncomeAfterTaxesandDonations := NetIncomeAfterTaxesbeforeDonations - Donations;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(AsAt; AsAt)
                {
                    ApplicationArea = Basic;
                    Caption = 'AsAt';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        DateFilter := '..' + Format(AsAt);
        Date := CalcDate('-CY', Today);
        DateFilter11 := Format(Date) + '..' + Format(AsAt);
        FinancialYear := Date2dmy(Date, 3);
        ;
        ReportsForNavPre;
    end;

    var
        FinancialIncome: Decimal;
        AsAt: Date;
        DateFilter: Text;
        Date: Date;
        DateFilter11: Text;
        FinancialYear: Integer;
        InterestonLoanPortfolio: Decimal;
        MemberLedgerEntry: Record "Member Ledger Entry";
        FeesCommissiononLoanPortfolio: Decimal;
        GLAccount: Record "G/L Account";
        GLEntry: Record "G/L Entry";
        GovernmentSecurities: Decimal;
        InvestmentinCompaniesshares: Decimal;
        EquityInvestmentsinsubsidiaries: Decimal;
        Derivatives: Decimal;
        CollectiveinvestmentSchemes: Decimal;
        CommercialPapers: Decimal;
        PlacementinBanks: Decimal;
        nterestExpenseonDeposits: Decimal;
        CostofExternalBorrowings: Decimal;
        DividendExpenses: Decimal;
        OtherFinancialExpense: Decimal;
        FeesCommissionExpense: Decimal;
        OtherExpense: Decimal;
        ProvisionforLoanLosses: Decimal;
        ValueofLoansRecovered: Decimal;
        PersonnelExpenses: Decimal;
        GovernanceExpenses: Decimal;
        MarketingExpenses: Decimal;
        DepreciationandAmortizationCharges: Decimal;
        AdministrativeExpenses: Decimal;
        NonOperatingIncome: Decimal;
        NonOperatingExpense: Decimal;
        Donations: Decimal;
        Taxes: Decimal;
        FinancialIncomefromLoansPortfolio: Decimal;
        FinancialExpense: Decimal;
        NetFinancialIncomeLoss: Decimal;
        NetNonOperatingIncomeExpense: Decimal;
        FinancialIncomefromInvestments: Decimal;
        AllowanceforLoanLoss: Decimal;
        OperatingExpenses: Decimal;
        NetOperatingIncome: Decimal;
        NetIncomeBeforeTaxesandDonations: Decimal;
        NetIncomeAfterTaxesbeforeDonations: Decimal;
        NetIncomeAfterTaxesandDonations: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516257_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
