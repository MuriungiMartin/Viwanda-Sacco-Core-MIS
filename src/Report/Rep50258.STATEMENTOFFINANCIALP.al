#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516258_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50258 "STATEMENT OF FINANCIAL P"
{
    RDLCLayout = 'Layouts/STATEMENTOFFINANCIALP.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Company Information"; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(StartDate; StartDate)
            {
            }
            column(FinancialYear; FinancialYear)
            {
            }
            column(Asat; Asat)
            {
            }
            column(Name; "Company Information".Name)
            {
            }
            column(Cashinhand; Cashinhand)
            {
            }
            column(Cashatbank; Cashatbank)
            {
            }
            column(CashCashEquivalent; CashCashEquivalent)
            {
            }
            column(PrepaymentsSundryReceivables; PrepaymentsSundryReceivables)
            {
            }
            column(FinancialInvestments; FinancialInvestments)
            {
            }
            column(GovernmentSecurities; GovernmentSecurities)
            {
            }
            column(Placement; Placement)
            {
            }
            column(CommercialPapers; CommercialPapers)
            {
            }
            column(CollectiveInvestment; CollectiveInvestment)
            {
            }
            column(Derivatives; Derivatives)
            {
            }
            column(EquityInvestments; EquityInvestments)
            {
            }
            column(Investmentincompanies; Investmentincompanies)
            {
            }
            column(GrossLoanPortfolio; GrossLoanPortfolio)
            {
            }
            column(PropertyEquipment; PropertyEquipment)
            {
            }
            column(AllowanceforLoanLoss; AllowanceforLoanLoss)
            {
            }
            column(Nonwithdrawabledeposits; Nonwithdrawabledeposits)
            {
            }
            column(TaxPayable; TaxPayable)
            {
            }
            column(DeferredTaxLiability; DeferredTaxLiability)
            {
            }
            column(RetirementBenefitsLiability; RetirementBenefitsLiability)
            {
            }
            column(OtherLiabilities; OtherLiabilities)
            {
            }
            column(ExternalBorrowings; ExternalBorrowings)
            {
            }
            column(TotalLiabilities; TotalLiabilities)
            {
            }
            column(ShareCapital; ShareCapital)
            {
            }
            column(StatutoryReserve; StatutoryReserve)
            {
            }
            column(OtherReserves; OtherReserves)
            {
            }
            column(RevaluationReserves; RevaluationReserves)
            {
            }
            column(ProposedDividends; ProposedDividends)
            {
            }
            column(AdjustmenttoEquity; AdjustmenttoEquity)
            {
            }
            column(PrioryarRetainedEarnings; PrioryarRetainedEarnings)
            {
            }
            column(CurrentYearSurplus; CurrentYearSurplus)
            {
            }
            column(TaxRecoverable; TaxRecoverable)
            {
            }
            column(DeferredTaxAssets; DeferredTaxAssets)
            {
            }
            column(RetirementBenefitAssets; RetirementBenefitAssets)
            {
            }
            column(OtherAssets; OtherAssets)
            {
            }
            column(IntangibleAssets; IntangibleAssets)
            {
            }
            column(PrepaidLeaseentals; PrepaidLeaseentals)
            {
            }
            column(InvestmentProperties; InvestmentProperties)
            {
            }
            column(DividendPayable; DividendPayable)
            {
            }
            column(NetLoanPortfolio; NetLoanPortfolio)
            {
            }
            column(AccountsReceivables; AccountsReceivables)
            {
            }
            column(PropertyEquipmentOtheassets; PropertyEquipmentOtheassets)
            {
            }
            column(AccountsPayableOtherLiabilities; AccountsPayableOtherLiabilities)
            {
            }
            column(CapitalGrants; CapitalGrants)
            {
            }
            column(EQUITY; EQUITY)
            {
            }
            column(RetainedEarnings; RetainedEarnings)
            {
            }
            column(OtherEquityAccounts; OtherEquityAccounts)
            {
            }
            column(TotalEquity; TotalEquity)
            {
            }
            column(TotalLiabilitiesandEquity; TotalLiabilitiesandEquity)
            {
            }
            column(TotalLiabilitiesNew; TotalLiabilitiesNew)
            {
            }
            column(TotalAssets; TotalAssets)
            {
            }
            trigger OnPreDataItem();
            begin
                DateFilter := '..' + Format(Asat);
                StartDate := CalcDate('-CY', Asat);
                FinancialYear := Date2dmy(Asat, 3);
            end;

            trigger OnAfterGetRecord();
            begin
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::Cashinhand);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Cashinhand += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::Cashatbank);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Cashatbank += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gross loab portfolio
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::GrossLoanPortfolio);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            GrossLoanPortfolio += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //property and equipments
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::PropertyEquipment);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PropertyEquipment += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //allowance for loan loss
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::AllowanceforLoanLoss);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            AllowanceforLoanLoss += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //prepayments and sandry receivables
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::PrepaymentsSundryReceivables);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PrepaymentsSundryReceivables += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //non withdrawal
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::Nonwithdrawabledeposits);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Nonwithdrawabledeposits += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //share capital
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::ShareCapital);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            ShareCapital += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //prior year
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::PrioryarRetainedEarnings);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PrioryarRetainedEarnings += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //statutory
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::StatutoryReserve);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            StatutoryReserve += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //other reserves
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::OtherReserves);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherReserves += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //revaluation reservs
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::RevaluationReserves);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            RevaluationReserves += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //tax payable
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::TaxPayable);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TaxPayable += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //other liabilities
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP2, '%1', GLAccount.Statementoffp2::OtherLiabilities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherLiabilities += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //investment in company shares
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::Investmentincompanies);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Investmentincompanies += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //other assets
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::"Other Assets");
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherAssets += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //intangible assets
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::IntangibleAssets);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            IntangibleAssets += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.StatementOfFP, '%1', GLAccount.Statementoffp::CurrentYearSurplus);
                GLAccount.SetFilter(GLAccount."Date Filter", DateFilter);
                GLAccount.SetAutocalcFields("Net Change");
                if GLAccount.FindSet then begin
                    repeat
                        CurrentYearSurplus += GLAccount."Net Change";
                    until GLAccount.Next = 0;
                    //MESSAGE('%1',CurrentYearSurplus);
                end;
                CashCashEquivalent := Cashatbank + Cashinhand;
                FinancialInvestments := GovernmentSecurities + Placement + CollectiveInvestment + Derivatives + EquityInvestments + Investmentincompanies + CommercialPapers;
                NetLoanPortfolio := GrossLoanPortfolio + AllowanceforLoanLoss;
                AccountsReceivables := TaxRecoverable + DeferredTaxAssets + RetirementBenefitAssets;
                PropertyEquipmentOtheassets := InvestmentProperties + PropertyEquipment + PrepaidLeaseentals + OtherAssets + IntangibleAssets;
                AccountsPayableOtherLiabilities := TaxPayable + DividendPayable + DeferredTaxLiability + ExternalBorrowings + RetirementBenefitsLiability + OtherLiabilities;
                EQUITY := ShareCapital + CapitalGrants;
                RetainedEarnings := PrioryarRetainedEarnings + CurrentYearSurplus;
                OtherEquityAccounts := StatutoryReserve + OtherReserves + RevaluationReserves + AdjustmenttoEquity + ProposedDividends;
                TotalEquity := EQUITY + RetainedEarnings + OtherEquityAccounts;
                TotalLiabilitiesNew := Nonwithdrawabledeposits + AccountsPayableOtherLiabilities;
                TotalLiabilitiesandEquity := TotalEquity + TotalLiabilitiesNew;
                TotalAssets := CashCashEquivalent + FinancialInvestments + NetLoanPortfolio + AccountsReceivables + PropertyEquipmentOtheassets + PrepaymentsSundryReceivables;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(Asat; Asat)
                {
                    ApplicationArea = Basic;
                    Caption = 'Asat';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        CompanyInformation: Record "Company Information";
        Cashinhand: Decimal;
        FinancialYear: Integer;
        StartDate: Date;
        Cashatbank: Decimal;
        CashCashEquivalent: Decimal;
        GLEntry: Record "G/L Entry";
        GLAccount: Record "G/L Account";
        DateFilter: Text;
        Asat: Date;
        PrepaymentsSundryReceivables: Decimal;
        FinancialInvestments: Decimal;
        GovernmentSecurities: Decimal;
        Placement: Decimal;
        CommercialPapers: Decimal;
        CollectiveInvestment: Decimal;
        Derivatives: Decimal;
        EquityInvestments: Decimal;
        Investmentincompanies: Decimal;
        GrossLoanPortfolio: Decimal;
        PropertyEquipment: Decimal;
        AllowanceforLoanLoss: Decimal;
        Nonwithdrawabledeposits: Decimal;
        TaxPayable: Decimal;
        RetirementBenefitsLiability: Decimal;
        OtherLiabilities: Decimal;
        DeferredTaxLiability: Decimal;
        ExternalBorrowings: Decimal;
        TotalLiabilities: Decimal;
        ShareCapital: Decimal;
        StatutoryReserve: Decimal;
        OtherReserves: Decimal;
        RevaluationReserves: Decimal;
        ProposedDividends: Decimal;
        AdjustmenttoEquity: Decimal;
        PrioryarRetainedEarnings: Decimal;
        CurrentYearSurplus: Decimal;
        TaxRecoverable: Decimal;
        DeferredTaxAssets: Decimal;
        RetirementBenefitAssets: Decimal;
        OtherAssets: Decimal;
        IntangibleAssets: Decimal;
        PrepaidLeaseentals: Decimal;
        InvestmentProperties: Decimal;
        DividendPayable: Decimal;
        NetLoanPortfolio: Decimal;
        AccountsReceivables: Decimal;
        PropertyEquipmentOtheassets: Decimal;
        AccountsPayableOtherLiabilities: Decimal;
        CapitalGrants: Decimal;
        EQUITY: Decimal;
        RetainedEarnings: Decimal;
        OtherEquityAccounts: Decimal;
        TotalEquity: Decimal;
        TotalLiabilitiesandEquity: Decimal;
        TotalLiabilitiesNew: Decimal;
        TotalAssets: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516258_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
