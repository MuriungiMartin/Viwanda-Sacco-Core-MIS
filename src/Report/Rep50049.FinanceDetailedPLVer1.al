#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516049_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50049 "Finance Detailed P&L Ver1"
{
    RDLCLayout = 'Layouts/FinanceDetailedP&LVer1.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Detailed Income & Expenditure"; "Detailed Income & Expenditure")
        {
            PrintOnlyIfDetail = false;
            column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(UserId; UserId)
            {
            }
            column(RowNo_DetailedIncomeExpenditure; "Detailed Income & Expenditure"."Row No")
            {
            }
            column(Description_DetailedIncomeExpenditure; "Detailed Income & Expenditure".Description)
            {
            }
            column(GLAccount_DetailedIncomeExpenditure; "Detailed Income & Expenditure"."G/L Account")
            {
            }
            column(VarJanBalances; VarJanBalances)
            {
            }
            column(VarFebBalances; VarFebBalances)
            {
            }
            column(VarMarBalances; VarMarBalances)
            {
            }
            column(VarAprBalances; VarAprBalances)
            {
            }
            column(VarMayBalances; VarMayBalances)
            {
            }
            column(VarJunBalances; VarJunBalances)
            {
            }
            column(VarJulBalances; VarJulBalances)
            {
            }
            column(VarAugBalances; VarAugBalances)
            {
            }
            column(VarSepBalances; VarSepBalances)
            {
            }
            column(VarOctBalances; VarOctBalances)
            {
            }
            column(VarNovBalances; VarNovBalances)
            {
            }
            column(VarDecBalances; VarDecBalances)
            {
            }
            column(AccountType_DetailedIncomeExpenditure; "Detailed Income & Expenditure"."Account Type")
            {
            }
            column(VarYearStartDate; Format(VarYearStartDate, 0, '<Year4>'))
            {
            }
            trigger OnAfterGetRecord();
            begin
                VarJanBalances := 0;
                VarFebBalances := 0;
                VarMarBalances := 0;
                VarAprBalances := 0;
                VarJunBalances := 0;
                VarJulBalances := 0;
                VarAugBalances := 0;
                VarSepBalances := 0;
                VarOctBalances := 0;
                VarNovBalances := 0;
                VarDecBalances := 0;
                //===============================================================Jan
                VarJanDateFilter := Format(VarYearStartDate) + '..' + Format(CalcDate('CM', VarYearStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarJanDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarJanBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Feb
                FebStartDate := CalcDate('1M', VarYearStartDate);
                VarFebDateFilter := Format(FebStartDate) + '..' + Format(CalcDate('CM', FebStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarFebDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarFebBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Mar
                MarStartDate := CalcDate('2M', VarYearStartDate);
                VarMarDateFilter := Format(MarStartDate) + '..' + Format(CalcDate('CM', MarStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarMarDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarMarBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Apr
                AprStartDate := CalcDate('3M', VarYearStartDate);
                VarAprDateFilter := Format(AprStartDate) + '..' + Format(CalcDate('CM', AprStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarAprDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarAprBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================May
                MayStartDate := CalcDate('4M', VarYearStartDate);
                VarMayDateFilter := Format(MayStartDate) + '..' + Format(CalcDate('CM', MayStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarMayDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarMayBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Jun
                JunStartDate := CalcDate('5M', VarYearStartDate);
                VarJunDateFilter := Format(JunStartDate) + '..' + Format(CalcDate('CM', JunStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarJunDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarJunBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Jul
                JulStartDate := CalcDate('6M', VarYearStartDate);
                VarJulDateFilter := Format(JulStartDate) + '..' + Format(CalcDate('CM', JulStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarJulDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarJulBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Aug
                AugStartDate := CalcDate('7M', VarYearStartDate);
                VarAugDateFilter := Format(AugStartDate) + '..' + Format(CalcDate('CM', AugStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarAugDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarAugBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Sep
                SepStartDate := CalcDate('8M', VarYearStartDate);
                VarSepDateFilter := Format(SepStartDate) + '..' + Format(CalcDate('CM', SepStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarSepDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarSepBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Oct
                OctStartDate := CalcDate('9M', VarYearStartDate);
                VarOctDateFilter := Format(OctStartDate) + '..' + Format(CalcDate('CM', OctStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarOctDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarOctBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Nov
                NovStartDate := CalcDate('10M', VarYearStartDate);
                VarNovDateFilter := Format(NovStartDate) + '..' + Format(CalcDate('CM', NovStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarNovDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarNovBalances := ObjGLAccounts.Amount;
                end;
                //===============================================================Dec
                DecStartDate := CalcDate('11M', VarYearStartDate);
                VarDecDateFilter := Format(DecStartDate) + '..' + Format(CalcDate('CM', DecStartDate));
                ObjGLAccounts.Reset;
                ObjGLAccounts.SetRange(ObjGLAccounts."G/L Account No.", "G/L Account");
                ObjGLAccounts.SetFilter(ObjGLAccounts."Posting Date", VarDecDateFilter);
                if ObjGLAccounts.FindSet then begin
                    ObjGLAccounts.CalcSums(ObjGLAccounts.Amount);
                    VarDecBalances := ObjGLAccounts.Amount;
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field("Year Start Date"; VarYearStartDate)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Year Start Date';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Company: Record "Company Information";
        SFactory: Codeunit "SURESTEP Factory";
        ObjGLAccounts: Record "G/L Entry";
        VarJanDateFilter: Text;
        VarJanBalances: Decimal;
        VarFebDateFilter: Text;
        VarFebBalances: Decimal;
        VarMarDateFilter: Text;
        VarMarBalances: Decimal;
        VarAprDateFilter: Text;
        VarAprBalances: Decimal;
        VarMayDateFilter: Text;
        VarMayBalances: Decimal;
        VarJunDateFilter: Text;
        VarJunBalances: Decimal;
        VarJulDateFilter: Text;
        VarJulBalances: Decimal;
        VarAugDateFilter: Text;
        VarAugBalances: Decimal;
        VarSepDateFilter: Text;
        VarSepBalances: Decimal;
        VarOctDateFilter: Text;
        VarOctBalances: Decimal;
        VarNovDateFilter: Text;
        VarNovBalances: Decimal;
        VarDecDateFilter: Text;
        VarDecBalances: Decimal;
        VarYearStartDate: Date;
        FebStartDate: Date;
        MarStartDate: Date;
        AprStartDate: Date;
        MayStartDate: Date;
        JunStartDate: Date;
        JulStartDate: Date;
        AugStartDate: Date;
        SepStartDate: Date;
        OctStartDate: Date;
        NovStartDate: Date;
        DecStartDate: Date;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516049_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
